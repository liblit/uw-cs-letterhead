%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: UW logo 4C_Gradient.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: Designer%%CreationDate: 4/13/07%%BoundingBox: 0 0 342 332%%HiResBoundingBox: 0 0 341.1641 331.1167%%CropBox: 0 0 341.1641 331.1167%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Cyan Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2007-04-13T14:00:06-05:00</xap:CreateDate>
         <xap:ModifyDate>2007-04-13T14:03:44-05:00</xap:ModifyDate>
         <xap:MetadataDate>2007-04-13T14:03:44-05:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>248</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA+AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FUi8y+efKvlpoU1q/W2muAWgt0SSeZ1XYsIoVkkoPHjTATS0+XvOXnDzF5s8z&#xA;PPd26TW7kvp+m3yyeisJPJI4UPBDJ6YBkfizcjTYLmPkmK57eTdCO7vJnnDzF5T8ypPa26Q26EPq&#xA;Gm2Kyei0IPJ45UHNBJ6ZLRvxVuQp0bHHMVz281nHd9SeW/OnljzKsp0W/S6e3p68BV4po+X2S8Mq&#xA;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&#xA;OGOUvpBLVr5Wlu2ZbXz/AKzcMoqyxS6W5A8TxsziJArPFKPMEIn/AAJq3/U669/wWm/9kWFghbry&#xA;u9pII7r8wNYgkI5BJZtLQkE0rRrMbbYDIBshinIWASvtfKN1doXtfPmtXCKaM0UmmOAetCVsjiCD&#xA;yROEo8xSv/gTVv8Aqdde/wCC03/siwsEA2gwqxVvzG1UMDQg3GlAgj/ozyPGO9u/L5P5svkUZF5J&#xA;1GWNZYvPGuyRuKo6vprKQe4IsslbUQQaK/8AwJq3/U669/wWm/8AZFih3+BNW/6nXXv+C03/ALIs&#xA;Vd/gTVv+p117/gtN/wCyLFXf4E1b/qdde/4LTf8AsixV3+BNW/6nXXv+C03/ALIsVd/gTVv+p117&#xA;/gtN/wCyLFVnnvV9Z8o/l1fXumtPquqWkSxwXNwqySF5ZBH68whRFIjD824pSgxV53qXlPTvMUOl&#xA;6Nog/S+oG5gvvMvn24UsYhAwkZbe4cfbYjisUR4ovWla4VZJ5d0fTPP/AJvuvO+o2MNxoVkj6b5b&#xA;jmiRxcKrET3rcgeSs1UirsFqepwKzvXtDutVSFbfWb7SDEWLNYG3Bk5U2f6xDcDam1KYqk/+BNW/&#xA;6nXXv+C03/sixV3+BNW/6nXXv+C03/sixV3+BNW/6nXXv+C03/sixV3+BNW/6nXXv+C03/sixV3+&#xA;BNW/6nXXv+C03/sixV3+BNW/6nXXv+C03/sixV3+BNW/6nXXv+C03/sixV3+BNW/6nXXv+C03/si&#xA;xV3+BNW/6nXXv+C03/sixV3+BNW/6nXXv+C03/sixV3+BNW/6nXXv+C03/sixV3+BNW/6nXXv+C0&#xA;3/sixV3+BNW/6nXXv+C03/sixV3+BNW/6nXXv+C03/sixVW/MfybZ+bPKt5p0sSteIjS6dKR8Udw&#xA;oqlD4N9lvbAXY9l66WmzCYPp/i8w8G/5x01oad58k02aiDU7eSEBtiJYf3qjf/JVhTE9C9n7UYPE&#xA;0wmP4DfwO36n1BhfO3i3/OT0Onf4d0iZo1/SP1wpFNQcvQ9JjItetOfA4Or1vslKXizF+nh+2xX6&#xA;VD/nF/WY20rWdFLUlhnS8Re5WVBG5+j0l+/G92XtbgInDJ0I4flv+l7hheQfMn5+6Np8n5lWNlpU&#xA;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&#xA;5bpf+kO8/wCqONK7/lafkf8A5bpf+kO8/wCqONK7/lafkf8A5bpf+kO8/wCqONK7/lafkf8A5bpf&#xA;+kO8/wCqONK7/lafkf8A5bpf+kO8/wCqONK7/lafkf8A5bpf+kO8/wCqONK7/lafkf8A5bpf+kO8&#xA;/wCqONK7/lafkf8A5bpf+kO8/wCqONK7/lafkf8A5bpf+kO8/wCqONK7/lafkf8A5bpf+kO8/wCq&#xA;ONK7/lafkf8A5bpf+kO8/wCqONK7/lafkf8A5bpf+kO8/wCqONK7/lafkf8A5bpf+kO8/wCqONK7&#xA;/lafkf8A5bpf+kO8/wCqONK7/lafkf8A5bpf+kO8/wCqONK7/lafkf8A5bpf+kO8/wCqONKsk/M3&#xA;yBIyNJdO7RHlGzWV2SrUpVaw7HGkiRHJf/ytPyP/AMt0v/SHef8AVHGkO/5Wn5H/AOW6X/pDvP8A&#xA;qjjSu/5Wn5H/AOW6X/pDvP8AqjjSu/5Wn5H/AOW6X/pDvP8AqjjSu/5Wn5H/AOW6X/pDvP8AqjjS&#xA;u/5Wn5H/AOW6X/pDvP8AqjjSu/5Wn5H/AOW6X/pDvP8AqjjStN+aXkVlKteylSKEGzvCCD/zxxpb&#xA;ai/M/wAhRRpFFdyRxRqFRFsrwKqgUAAENAAMaSSSbLLsUOxV2KuxV2KuxV2KpX5l8z6J5Z0eXWNb&#xA;uDa6bAUWa4EcsvEyMEWqxK7bswHTFW7fzNoVz5dXzJDdq2iNbG9F5RgvoKpcuVIDiijcEV7Uriqz&#xA;yv5q0HzRpKavoVybvTpHaNJzFLCGZDRqLMsbbHatMVTbFUgsfPnlO+803nlW2vw+v2KmS5sWjlQq&#xA;o4klXdFjfZwfhY4qn+Ksd80/mD5S8q3Nnba7eSW0+oc/qcaW1zcGT06cgvoRy7jkNsVX+XvPvlHz&#xA;DcSWuk6ik15EvOSzkSSC4VP5jDOsclPfjiqf4qkmg+dfLev6jqmnaTdNcXmjS+hqcTQzxelJyZeP&#xA;KVEVjWNvsk4qmWp6np+l2E+oajcJa2VqhkuLiU8URR3JxVj/AJf/ADN8oa9qMWn6dPcG5uY2mtPW&#xA;s7u3jmiUci8Uk0SIy0PjirKcVYzrn5jeU9G1FtLuLmW51RFDyWFjbz3k6K24LpbpJwqN/ipiqM8t&#xA;ec/LXmWOZ9GvluXtm4XVuyvFPC3hLDKEkT6VxVOJZFiieRq8UUs3EFjQCpoqgk/IYqk3lPzt5W82&#xA;2Ul75e1BL6CF/Smorxuj9aPHKqOte1V3xVf5b826B5lhup9GuHuIrKdrS5Z4Z4OM8dOcf75I6la7&#xA;0xVOMVdirsVdirsVdirsVdirsVdirsVdirsVdirzz86L6yOneXtBuZkQa7runWzxuac4Y7hZpNu4&#xA;qij5kYqweLy1r9j5huPyhSKQ+U9SvF1i3vt+MekK3q3Nl02/0gJGPZjX7WFWU/kXeWcP+MvLsMsT&#xA;HR/MF76McbA8baZqx7D/ACkcfRTArOvN/mjTvK3lu/13UHC29lEzhCQDJJT4Ilr+07UUYq8KvPK3&#xA;n/y5oGmfmNcT6bdXOl3Da7fG3SdbyePUin1qF5WkMTIsTBVAQUC7e5V9BaPq2n6xpdrqmnTLcWV5&#xA;GssEqEEFWFe3cdCOxwK8t/ObWdK03z5+XM2oXcVrFb31zPPJKwVUiEaLzYnoKmmKqes6pp/nf8zv&#xA;KF15PreLoE002sa/CjC2S2ZeP1b1yAJWk3HFSaV/1qKvYcVeXflHqOn3Pnf8yI7aZJJF1dGZVO9B&#xA;GYyflzjYYqzD8wYvLE3k/UoPNEhh0GdEivZl5AoJJFVHqgYjjIVNaUHU7VxV5t5Q8z6xo/nDRPKu&#xA;heZbfzz5bu0dZGUJJd6bBEg4NLcwExsvb958R6U6Yq9qxV4z+WGv6T5L1LzLoXnS5j0jXrvVZ75N&#xA;Rv3EUV9byU9OSO4kojcd/h5bV8agKo3QHtPMX52yeaPLKmTQrXSjZarq0YZbe7ujJVI422WYxqFq&#xA;w6UG/TFXrEkiRo0kjBI0BZ3Y0AA3JJOKvnf8vvLeqW/kXTvP3kJ1m8wW8t7HrWkhv3WpW63szLG4&#xA;7TpEymNutKDwxV6P+SGpx6r5Y1TVI4nhjv8AXNTukhlHGRFmuWcK47MOVDir0LFXYq7FXYq7FXYq&#xA;7FX/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:E98FC615EA2811DBA5C4A9D70D9CCAC7</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:301BCEDEEA4111DBA5C4A9D70D9CCAC7</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:E98FC614EA2811DBA5C4A9D70D9CCAC7</stRef:instanceID>
            <stRef:documentID>uuid:8400A409CE4D11DB8D68FAAAA68286B9</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -331.117 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 331.117 li341.164 331.117 li341.164 0 licpclp[1 0 0 1 0 0 ] concat49.1465 212.138 mo51.4756 212.138 li52.3301 212.138 53.3662 212.248 53.7021 213.015 cv53.7803 213.015 li54.6084 210.408 li54.5303 210.408 li54.1943 210.539 53.7803 210.56 53.3398 210.56 cv43.6846 210.56 li43.0371 210.56 li42.7012 210.517 42.3643 210.517 42.0537 210.408 cv41.9766 210.408 li41.0703 213.015 li41.1475 213.015 li41.9502 212.38 43.1152 212.138 44.2285 212.138 cv46.5059 212.138 li46.5059 221.916 li46.5059 222.902 46.6611 224.501 45.3672 224.919 cv45.3672 224.984 li50.4922 224.984 li50.4922 224.919 li49.1201 224.24 49.1465 223.384 49.1465 222.134 cv49.1465 212.138 li49.1465 212.138 licpfalse sop/0 [/DeviceCMYK] /CSA add_res0 0 0 1 cmykef73.6123 217.949 mo73.6123 221.916 li73.6123 222.902 73.7939 224.501 72.4736 224.919 cv72.4736 224.984 li77.418 224.984 li77.418 224.919 li76.0977 224.501 76.2529 222.902 76.2529 221.916 cv76.2529 213.63 li76.2529 212.642 76.0977 211.042 77.418 210.626 cv77.418 210.56 li72.4736 210.56 li72.4736 210.626 li73.7939 211.042 73.6123 212.642 73.6123 213.652 cv73.6123 216.369 li64.2676 216.369 li64.2676 213.652 li64.2676 212.642 64.1123 211.042 65.4063 210.626 cv65.4063 210.56 li60.4883 210.56 li60.4883 210.626 li61.8086 211.042 61.627 212.642 61.627 213.63 cv61.627 221.916 li61.627 222.902 61.7822 224.501 60.4883 224.919 cv60.4883 224.984 li65.4063 224.984 li65.4063 224.919 li64.1123 224.501 64.2676 222.902 64.2676 221.916 cv64.2676 217.949 li73.6123 217.949 li73.6123 217.949 licpf88.8633 217.949 mo90.7793 217.949 li91.582 217.949 92.6689 217.925 93.083 218.562 cv93.1602 218.562 li93.1602 216.238 li93.083 216.238 li92.7725 216.369 92.3584 216.369 91.9443 216.369 cv88.8633 216.369 li88.8633 212.292 li89.6924 212.162 90.5977 212.138 91.5039 212.138 cv92.6943 212.138 93.7559 212.226 94.5586 213.015 cv94.6357 213.015 li94.6357 210.451 li94.5586 210.451 li94.2217 210.605 93.7822 210.56 93.3418 210.56 cv85.0586 210.56 li85.0586 210.626 li86.3789 211.042 86.2236 212.642 86.2236 213.652 cv86.2236 221.916 li86.2236 222.902 86.3789 224.523 85.0586 224.919 cv85.0586 224.984 li95.8525 224.984 li97.0176 222.113 li96.9395 222.113 li95.6455 223.078 93.8594 223.537 92.1514 223.406 cv88.8633 223.142 li88.8633 217.949 li88.8633 217.949 licpef128.904 224.984 mo132.71 224.984 li132.71 224.919 li131.39 224.501 131.545 222.902 131.545 221.916 cv131.545 213.652 li131.545 212.642 131.39 211.042 132.71 210.626 cv132.684 210.56 li127.766 210.56 li127.766 210.626 li129.06 211.042 128.904 212.642 128.904 213.63 cv128.904 220.228 li128.904 221.017 128.931 221.564 128.36 222.222 cv127.507 223.253 126.031 223.757 124.581 223.757 cv121.915 223.757 120.466 222.398 120.466 219.482 cv120.466 213.63 li120.466 212.642 120.311 211.042 121.604 210.626 cv121.604 210.56 li116.687 210.56 li116.687 210.626 li118.007 211.042 117.825 212.642 117.825 213.63 cv117.825 219.482 li117.825 221.06 117.773 222.529 119.146 223.8 cv120.311 224.875 122.122 225.335 123.831 225.335 cv125.643 225.335 127.766 224.808 128.904 223.537 cv128.904 224.984 li128.904 224.984 licpef143.455 213.652 mo152.334 223.187 li153.473 224.437 154.275 225.16 156.113 225.685 cv156.113 213.388 li156.113 212.162 156.113 211.285 157.459 210.626 cv157.459 210.56 li152.903 210.56 li152.903 210.626 li154.275 211.285 154.249 212.162 154.249 213.388 cv154.249 221.697 li144.775 211.568 li144.413 211.13 li144.231 210.955 144.128 210.845 144.024 210.582 cv144.024 210.56 li140.245 210.56 li140.245 210.626 li141.592 211.285 141.592 212.162 141.592 213.388 cv141.592 222.134 li141.592 223.363 141.592 224.24 140.22 224.919 cv140.22 224.984 li144.801 224.984 li144.801 224.919 li143.43 224.24 143.455 223.363 143.455 222.134 cv143.455 213.652 li143.455 213.652 licpf165.799 221.916 mo165.799 222.902 165.954 224.523 164.66 224.919 cv164.66 224.984 li169.578 224.984 li169.578 224.919 li168.284 224.501 168.439 222.902 168.439 221.916 cv168.439 213.652 li168.439 212.666 168.284 211.042 169.578 210.626 cv169.578 210.56 li164.66 210.56 li164.66 210.626 li165.98 211.042 165.799 212.642 165.799 213.652 cv165.799 221.916 li165.799 221.916 licpf184.282 222.398 mo180.166 212.863 li179.959 212.38 179.468 211.306 179.468 210.824 cv179.493 210.56 li175.714 210.56 li175.714 210.626 li176.853 211.371 177.241 212.642 177.733 213.761 cv181.642 222.726 li182.393 224.458 182.987 224.634 184.8 225.642 cv191.634 210.56 li187.776 210.56 li187.776 210.626 li189.382 211.173 188.501 212.972 187.803 214.529 cv184.282 222.398 li184.282 222.398 licpf202.247 217.949 mo204.162 217.949 li204.965 217.949 206.052 217.925 206.467 218.562 cv206.544 218.562 li206.544 216.238 li206.467 216.238 li206.156 216.369 205.741 216.369 205.327 216.369 cv202.247 216.369 li202.247 212.292 li203.075 212.162 203.981 212.138 204.888 212.138 cv206.078 212.138 207.14 212.226 207.941 213.015 cv208.02 213.015 li208.02 210.451 li207.941 210.451 li207.605 210.605 207.165 210.56 206.726 210.56 cv198.442 210.56 li198.442 210.626 li199.762 211.042 199.606 212.642 199.606 213.652 cv199.606 221.916 li199.606 222.902 199.762 224.523 198.442 224.919 cv198.442 224.984 li209.236 224.984 li210.401 222.113 li210.323 222.113 li209.029 223.078 207.243 223.537 205.534 223.406 cv202.247 223.142 li202.247 217.949 li202.247 217.949 licpef217.518 210.56 mo217.518 210.626 li218.837 211.042 218.656 212.642 218.656 213.652 cv218.656 221.916 li218.656 222.902 218.837 224.523 217.518 224.919 cv217.518 224.984 li222.461 224.984 li222.461 224.919 li221.142 224.523 221.297 222.923 221.297 221.916 cv221.297 212.095 li221.892 212.007 222.461 211.941 223.057 211.919 cv224.791 211.853 226.396 212.775 226.396 214.353 cv226.396 216.414 223.988 217.224 221.918 217.488 cv224.299 220.578 li227.457 223.888 li228.233 224.699 229.088 224.984 230.46 224.984 cv232.842 224.984 li231.366 224.195 229.735 223.056 228.647 221.916 cv224.921 217.949 li227.043 217.531 229.036 216.019 229.036 214.089 cv229.036 212.095 227.146 210.56 223.678 210.56 cv217.518 210.56 li217.518 210.56 licpf247.258 210.693 mo246.016 210.363 244.695 210.21 243.401 210.21 cv240.243 210.21 236.903 211.261 236.903 214.023 cv236.903 218.671 245.809 218.058 245.809 221.476 cv245.809 223.011 243.582 223.757 242.106 223.757 cv240.088 223.757 237.965 223.056 236.438 221.937 cv237.188 224.677 li238.664 225.138 240.243 225.335 241.822 225.335 cv245.86 225.335 248.76 223.142 248.76 220.796 cv248.76 216.742 239.854 216.787 239.854 213.783 cv239.854 212.271 241.719 211.789 243.194 211.789 cv244.644 211.789 246.248 212.292 247.258 213.169 cv247.258 210.693 li247.258 210.693 licpf257.429 221.916 mo257.429 222.902 257.584 224.523 256.29 224.919 cv256.29 224.984 li261.208 224.984 li261.208 224.919 li259.913 224.501 260.069 222.902 260.069 221.916 cv260.069 213.652 li260.069 212.666 259.913 211.042 261.208 210.626 cv261.208 210.56 li256.29 210.56 li256.29 210.626 li257.609 211.042 257.429 212.642 257.429 213.652 cv257.429 221.916 li257.429 221.916 licpf274.873 212.138 mo277.202 212.138 li278.057 212.138 279.092 212.248 279.429 213.015 cv279.506 213.015 li280.335 210.408 li280.257 210.408 li279.921 210.539 279.506 210.56 279.066 210.56 cv269.411 210.56 li268.764 210.56 li268.428 210.517 268.091 210.517 267.78 210.408 cv267.703 210.408 li266.797 213.015 li266.874 213.015 li267.677 212.38 268.842 212.138 269.954 212.138 cv272.232 212.138 li272.232 221.916 li272.232 222.902 272.388 224.501 271.094 224.919 cv271.094 224.984 li276.219 224.984 li276.219 224.919 li274.847 224.24 274.873 223.384 274.873 222.134 cv274.873 212.138 li274.873 212.138 licpef293.929 218.671 mo300.297 210.56 li295.767 210.56 li295.767 210.626 li297.216 211.218 296.621 212.271 296.181 212.818 cv292.971 216.896 li288.829 211.173 li288.493 210.714 287.716 210.56 286.888 210.56 cv284.532 210.56 li285.774 211.13 286.292 211.853 286.991 212.818 cv291.288 218.671 li291.288 221.916 li291.288 222.945 291.47 224.371 290.201 224.919 cv290.201 224.984 li295.249 224.984 li295.249 224.919 li293.929 224.107 293.929 223.451 293.929 222.134 cv293.929 218.671 li293.929 218.671 licpf79.0537 288.015 mo79.0537 290.966 79.4258 295.822 76.3232 297.003 cv76.3232 297.199 li88.1133 297.199 li88.1133 297.003 li85.0107 295.755 85.3828 290.966 85.3828 288.015 cv85.3828 263.279 li85.3828 260.328 85.0107 255.472 88.1133 254.226 cv88.1133 254.029 li76.3232 254.029 li76.3232 254.226 li79.4883 255.472 79.0537 260.261 79.0537 263.279 cv79.0537 288.015 li79.0537 288.015 licp0.03 1 0.66 0.12 cmykf115.342 254.423 mo112.363 253.439 109.198 252.978 106.096 252.978 cv98.5264 252.978 90.5215 256.128 90.5215 264.394 cv90.5215 278.304 111.867 276.466 111.867 286.703 cv111.867 291.294 106.53 293.525 102.994 293.525 cv98.1533 293.525 93.0654 291.425 89.4053 288.08 cv91.2041 296.281 li94.7412 297.66 98.5264 298.25 102.312 298.25 cv111.991 298.25 118.94 291.689 118.94 284.667 cv118.94 272.531 97.5957 272.662 97.5957 263.673 cv97.5957 259.146 102.063 257.703 105.6 257.703 cv109.074 257.703 112.922 259.212 115.342 261.835 cv115.342 254.423 li115.342 254.423 licpf153.985 254.619 mo150.324 253.701 146.477 252.978 142.692 252.978 cv129.972 252.978 120.913 261.968 120.913 275.548 cv120.913 289.589 129.972 298.25 144.615 298.25 cv147.842 298.25 151.068 297.724 153.985 296.281 cv157.149 288.671 li156.963 288.671 li153.054 291.033 148.4 292.804 143.747 292.804 cv134.191 292.804 127.986 284.208 127.986 274.564 cv127.986 265.05 133.942 258.425 142.506 258.425 cv146.602 258.425 150.572 259.869 153.985 262.164 cv153.985 254.619 li153.985 254.619 licpef179.8 257.638 mo189.604 257.638 195.375 266.888 195.375 276.466 cv195.375 286.244 189.355 293.525 179.924 293.525 cv170.175 293.525 164.029 284.078 164.029 274.892 cv164.029 264.986 170.175 257.638 179.8 257.638 cv179.8 257.638 licp180.234 252.914 mo167.194 252.585 156.956 263.017 156.956 275.482 cv156.956 288.933 167.318 298.25 179.614 298.25 cv191.962 298.25 202.448 288.539 202.448 275.154 cv202.448 263.345 193.265 252.847 180.234 252.914 cv180.234 252.914 licpef212.372 263.279 mo233.654 291.82 li236.385 295.56 238.309 297.724 242.714 299.298 cv242.714 262.492 li242.714 258.818 242.714 256.193 245.94 254.226 cv245.94 254.029 li235.02 254.029 li235.02 254.226 li238.309 256.193 238.246 258.818 238.246 262.492 cv238.246 287.359 li215.536 257.046 li214.668 255.734 li214.233 255.21 213.985 254.882 213.736 254.095 cv213.736 254.029 li204.678 254.029 li204.678 254.226 li207.904 256.193 207.904 258.818 207.904 262.492 cv207.904 288.671 li207.904 292.345 207.904 294.968 204.615 297.003 cv204.615 297.199 li215.599 297.199 li215.599 297.003 li212.31 294.968 212.372 292.345 212.372 288.671 cv212.372 263.279 li212.372 263.279 licpf272.437 254.423 mo269.458 253.439 266.294 252.978 263.191 252.978 cv255.622 252.978 247.617 256.128 247.617 264.394 cv247.617 278.304 268.962 276.466 268.962 286.703 cv268.962 291.294 263.626 293.525 260.089 293.525 cv255.249 293.525 250.161 291.425 246.5 288.08 cv248.3 296.281 li251.837 297.66 255.622 298.25 259.406 298.25 cv269.086 298.25 276.036 291.689 276.036 284.667 cv276.036 272.531 254.69 272.662 254.69 263.673 cv254.69 259.146 259.158 257.703 262.695 257.703 cv266.17 257.703 270.017 259.212 272.437 261.835 cv272.437 254.423 li272.437 254.423 licpf281.793 288.015 mo281.793 290.966 282.165 295.822 279.063 297.003 cv279.063 297.199 li290.853 297.199 li290.853 297.003 li287.75 295.755 288.122 290.966 288.122 288.015 cv288.122 263.279 li288.122 260.328 287.75 255.472 290.853 254.226 cv290.853 254.029 li279.063 254.029 li279.063 254.226 li282.228 255.472 281.793 260.261 281.793 263.279 cv281.793 288.015 li281.793 288.015 licpf301.327 263.279 mo322.61 291.82 li325.341 295.56 327.264 297.724 331.67 299.298 cv331.67 262.492 li331.67 258.818 331.67 256.193 334.896 254.226 cv334.896 254.029 li323.976 254.029 li323.976 254.226 li327.264 256.193 327.202 258.818 327.202 262.492 cv327.202 287.359 li304.492 257.046 li303.623 255.734 li303.188 255.21 302.94 254.882 302.692 254.095 cv302.692 254.029 li293.633 254.029 li293.633 254.226 li296.86 256.193 296.86 258.818 296.86 262.492 cv296.86 288.671 li296.86 292.345 296.86 294.968 293.571 297.003 cv293.571 297.199 li304.554 297.199 li304.554 297.003 li301.266 294.968 301.327 292.345 301.327 288.671 cv301.327 263.279 li301.327 263.279 licpf42.2607 259.267 mo50.5137 286.316 li52.9893 294.414 53.5137 294.021 60.416 298.974 cv76.2461 244.876 li64.6924 244.876 li64.6924 245.113 li70.5439 247.236 68.0684 253.605 66.7178 258.087 cv58.2402 286.867 li47.8125 252.82 li46.7617 249.359 46.2373 246.843 46.6875 244.876 cv36.1084 244.876 li36.1084 245.113 li40.2354 247.316 38.7344 252.425 37.3096 257.222 cv28.5313 287.101 li17.3535 250.539 li16.9033 249.044 16.1533 246.607 16.4531 244.876 cv5.5 244.876 li5.5 245.113 li9.25098 247.787 10.376 252.898 11.7266 257.222 cv20.5791 286.238 li23.0547 294.335 23.7305 293.785 30.5566 298.974 cv42.2607 259.267 li42.2607 259.267 licpf91.1221 327.082 mo86.6787 318.318 li86.5361 318.039 86.3467 317.742 86.3467 317.423 cv86.3467 317.404 li82.21 317.404 li82.21 317.462 li83.2979 317.96 83.0381 318.755 82.9424 319.31 cv81.5967 327.638 li81.4072 328.712 81.2646 329.685 80.2725 330.421 cv80.2725 330.48 li84.126 330.48 li84.126 330.421 li83.0146 330.003 83.1787 329.128 83.3682 327.917 cv84.7158 319.371 li89.208 328.333 li89.7744 329.447 90.1045 329.984 91.2881 330.74 cv96.583 319.351 li97.9287 328.931 li97.9287 329.607 97.7881 330.203 96.96 330.421 cv96.96 330.48 li101.522 330.48 li101.522 330.421 li100.577 329.865 100.458 329.328 100.317 328.394 cv98.7568 318.636 li98.7568 318.177 98.9229 317.601 99.4893 317.462 cv99.4893 317.404 li95.3994 317.404 li95.3994 317.423 li95.3994 317.839 95.2354 318.238 95.0459 318.656 cv91.1221 327.082 li91.1221 327.082 licp0 0 0 1 cmykf124.058 324.101 mo119.401 324.101 li121.741 319.093 li124.058 324.101 li124.058 324.101 licp124.743 325.572 mo126.021 328.375 li126.657 329.765 126.847 329.984 125.688 330.421 cv125.688 330.48 li130.534 330.48 li130.534 330.421 li129.187 329.845 128.761 328.732 128.218 327.599 cv123.302 317.404 li119.567 317.404 li119.567 317.462 li120.702 317.761 120.251 318.595 119.921 319.31 cv115.974 327.599 li115.454 328.732 115.052 329.845 113.681 330.421 cv113.681 330.48 li118.03 330.48 li118.03 330.421 li116.896 330.064 117.062 329.488 117.558 328.375 cv118.786 325.572 li124.743 325.572 li124.743 325.572 licpef146.946 319.052 mo147.655 318.914 148.364 318.833 149.073 318.833 cv153.021 318.833 155.337 320.583 155.337 324.062 cv155.337 327.5 152.194 329.05 148.673 329.05 cv148.081 329.05 147.515 329.009 146.946 328.912 cv146.946 319.052 li146.946 319.052 licp144.536 327.619 mo144.536 328.791 144.677 329.746 143.495 330.421 cv143.495 330.48 li149.169 330.48 li154.464 330.48 158.032 327.738 158.032 323.822 cv158.032 319.867 154.675 317.404 149.286 317.404 cv143.495 317.404 li143.495 317.462 li144.7 317.761 144.536 319.212 144.536 320.126 cv144.536 327.619 li144.536 327.619 licpef172.702 327.699 mo172.702 328.593 172.844 330.064 171.659 330.421 cv171.659 330.48 li176.153 330.48 li176.153 330.421 li174.971 330.044 175.112 328.593 175.112 327.699 cv175.112 320.205 li175.112 319.31 174.971 317.839 176.153 317.462 cv176.153 317.404 li171.659 317.404 li171.659 317.462 li172.867 317.839 172.702 319.291 172.702 320.205 cv172.702 327.699 li172.702 327.699 licpf199.107 317.523 mo197.973 317.224 196.768 317.085 195.586 317.085 cv192.701 317.085 189.652 318.039 189.652 320.542 cv189.652 324.757 197.783 324.201 197.783 327.3 cv197.783 328.693 195.751 329.369 194.403 329.369 cv192.56 329.369 190.621 328.732 189.227 327.718 cv189.912 330.203 li191.26 330.621 192.701 330.798 194.144 330.798 cv197.831 330.798 200.479 328.812 200.479 326.685 cv200.479 323.007 192.347 323.048 192.347 320.324 cv192.347 318.953 194.049 318.515 195.396 318.515 cv196.72 318.515 198.186 318.974 199.107 319.767 cv199.107 317.523 li199.107 317.523 licpf222.581 318.496 mo226.316 318.496 228.515 321.298 228.515 324.201 cv228.515 327.162 226.222 329.369 222.629 329.369 cv218.918 329.369 216.577 326.505 216.577 323.724 cv216.577 320.722 218.918 318.496 222.581 318.496 cv222.581 318.496 licp222.747 317.066 mo217.783 316.966 213.883 320.126 213.883 323.902 cv213.883 327.976 217.83 330.798 222.511 330.798 cv227.215 330.798 231.209 327.857 231.209 323.802 cv231.209 320.226 227.711 317.044 222.747 317.066 cv222.747 317.066 licpef247.571 320.205 mo255.68 328.851 li256.72 329.984 257.452 330.64 259.131 331.117 cv259.131 319.966 li259.131 318.853 259.131 318.058 260.359 317.462 cv260.359 317.404 li256.199 317.404 li256.199 317.462 li257.452 318.058 257.429 318.853 257.429 319.966 cv257.429 327.5 li248.777 318.318 li248.446 317.919 li248.281 317.761 248.187 317.662 248.092 317.423 cv248.092 317.404 li244.641 317.404 li244.641 317.462 li245.87 318.058 245.87 318.853 245.87 319.966 cv245.87 327.898 li245.87 329.009 245.87 329.804 244.617 330.421 cv244.617 330.48 li248.801 330.48 li248.801 330.421 li247.548 329.804 247.571 329.009 247.571 327.898 cv247.571 320.205 li247.571 320.205 licpf159.634 241.199 mo160.637 238.962 163.367 235.47 166.396 235.47 cv167.002 235.47 167.769 235.615 168.001 236.046 cv168.305 236.621 168.034 237.525 167.713 238.244 cv167.216 239.351 166.182 240.81 165.215 241.816 cv163.98 243.068 162.554 243.847 160.982 243.847 cv159.143 243.847 158.935 242.759 159.634 241.199 cv159.634 241.199 licp169.803 238.736 mo170.962 236.148 169.791 234.505 167.009 234.505 cv165.124 234.505 163.219 235.101 161.36 236.396 cv159.742 237.503 158.261 239.105 157.58 240.625 cv156.403 243.253 157.634 244.814 160.438 244.814 cv164.141 244.814 168.294 242.103 169.803 238.736 cv169.803 238.736 licpef178.946 234.712 mo180.015 233.029 li180.426 232.412 180.756 231.775 181.431 231.22 cv181.896 230.832 182.483 230.523 183.021 230.523 cv184.391 230.523 183.358 231.775 184.705 231.775 cv185.243 231.775 185.875 231.468 186.104 230.955 cv186.546 229.968 184.843 229.763 184.058 229.763 cv182.667 229.763 180.968 230.4 179.651 231.386 cv178.313 232.371 177.754 233.316 176.904 234.712 cv174.862 234.712 li174.497 235.328 li176.494 235.328 li170.718 244.402 li169.818 245.757 li169.448 246.332 168.86 247.195 168.223 247.667 cv167.644 248.056 166.814 248.406 166.208 248.406 cv164.705 248.406 165.436 246.826 163.955 246.826 cv163.438 246.826 162.817 247.009 162.569 247.564 cv162.026 248.775 163.935 249.125 164.922 249.125 cv166.56 249.125 168.611 248.652 170.159 247.4 cv171.71 246.148 172.559 244.71 173.513 243.232 cv178.536 235.328 li180.869 235.328 li181.235 234.712 li178.946 234.712 li178.946 234.712 licpf151.064 238.434 mo0 238.434 li0 236.928 li151.064 236.928 li151.064 238.434 licpf341.164 238.434 mo187.097 238.434 li187.097 236.928 li341.164 236.928 li341.164 238.434 licpf341.152 308.481 mo0 308.481 li0 306.975 li341.152 306.975 li341.152 308.481 licpf216.83 26.3184 mo211.107 19.3291 203.972 15.3301 196.195 14.7534 cv193.587 14.3613 191.022 14.4648 188.581 15.0005 cv188.214 12.4971 187.27 10.6216 185.709 9.48682 cv183.916 8.18311 181.899 8.20508 180.937 8.30566 cv178.502 -0.446289 171.227 -0.0112305 170.577 0.00927734 cv169.93 -0.0112305 162.656 -0.445313 160.22 8.29785 cv159.178 8.17725 156.906 8.11426 154.961 9.52539 cv153.409 10.6523 152.473 12.479 152.113 14.8979 cv149.811 14.4521 147.4 14.3877 144.922 14.7593 cv137.192 15.3301 130.057 19.3296 124.333 26.3193 cv114.282 38.5952 108.881 59.5195 108.881 84.6187 cv108.881 92.3857 109.398 100.553 110.455 108.987 cv116.004 153.289 137.389 185.916 166.405 194.626 cv167.702 196.808 169.315 198.374 170.376 198.67 cv170.578 198.727 li170.779 198.67 li171.839 198.374 173.449 196.808 174.746 194.627 cv203.769 185.92 225.158 153.292 230.709 108.987 cv231.766 100.553 232.283 92.3872 232.283 84.6211 cv232.283 59.52 226.882 38.5947 216.83 26.3184 cvcp0.3 0.4 0.7 0.1 cmykf170.59 57.0015 mo170.563 57.0015 li167.467 56.9185 163.432 56.2349 159.16 55.125 cv155.477 54.1689 150.812 55.6421 146.68 59.0659 cv135.376 68.4331 133.413 85.0337 133.413 95.4277 cv133.413 97.5327 133.493 99.3828 133.593 100.867 cv137.352 150.183 167.675 169.737 170.597 171.508 cv173.518 169.736 203.812 150.183 207.57 100.871 cv207.709 98.8076 207.774 96.834 207.774 94.9478 cv207.774 72.6489 198.661 62.5303 194.487 59.0703 cv190.352 55.645 185.683 54.1685 181.995 55.125 cv177.567 56.2749 173.5 56.9233 170.59 57.0015 cvcp0.03 1 0.66 0.12 cmykf153.869 43.3608 mo153.925 43.3276 153.98 43.2935 154.035 43.2588 cv155.056 42.5776 155.731 41.6685 156.169 40.8223 cv157.878 37.5171 157.396 32.5376 155.174 28.7056 cv154.852 28.7021 153.501 28.6885 151.975 28.6733 cv152.105 28.8037 152.236 28.9033 152.362 29.0698 cv153.38 30.4097 153.941 32.5967 154.042 35.5649 cv154.057 35.8647 154.065 36.1699 154.065 36.479 cv154.065 36.8574 154.049 37.2271 154.027 37.5918 cv154.019 37.7339 154.007 37.8726 153.995 38.0117 cv153.977 38.2192 153.955 38.4229 153.93 38.6245 cv153.912 38.7705 153.896 38.9175 153.874 39.0601 cv153.827 39.3696 153.773 39.6724 153.71 39.9663 cv153.694 40.042 153.674 40.1133 153.656 40.1875 cv153.595 40.4517 153.528 40.7075 153.454 40.9561 cv153.438 41.0083 153.423 41.0596 153.406 41.1108 cv153.015 42.3701 152.469 43.4126 151.812 44.1416 cv152.392 44.0259 152.93 43.8389 153.432 43.5952 cv153.58 43.519 153.732 43.4458 153.869 43.3608 cvcplevel3{gsaveclp[-5.33053e-07 12.1948 -12.1948 -5.33053e-07 154.504 33.5107 ] concat/0 <</ShadingType 2 /ColorSpace /0 /CSA get_res/Coords [0 0 1 0 ]/Domain [0 1 ]/Extend[ true true]/Function<</Domain[0 1 ] /FunctionType 3/Functions [<</Domain[0 1 ] /FunctionType 2/C0 [0.3 0.4 0.7 0.1 ]/C1 [0.3 0.4 0.7 1 ]/N 1 >>]/Bounds []/Encode [0 1 ]>>>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore}iflevel3 not{gsave[-5.33053e-07 12.1948 -12.1948 -5.33053e-07 154.504 33.5107 ] concatclp/0 {/0 /CSA get_res setcolorspace<</NumSamples 256 /NumComp 4 /Scaling[[0.00392157 0 ][0.00392157 0 ][0.00392157 0 ][0.00392157 0 ]]/Samples[76 101 178 <~)&aG6*??1C+<_pR,UFca-R^Dn.kE8)0/#"61,CaE2E*QS3BB5a4[)(q5X@_(6q'R884cBF92&&T:Janc;H$Op<``C+>$>-8?!^lG@:E_VA7]@cBPD3sCM[j*DfB]:F*)MHG'A1VH@($fI=?ZrJV&N-KnY8:Ll%"IN/`jXO-#KePE_>uQ^=)-R[]h<StDXJTq\<XV5C/hW2ZetXKAY/Yd(I=Za@-K\%&uZ]">Vg^;%J"_SX4/`Q#s>ai_fMbg"GZd*^:je'uq!f@\d1gYCT?hV[8MioB+]jlYail0@U$mHs?1nF?)@o_%qOp\=R\qu$El~>]>>0 0 1 0 []true true []/DeviceCMYKGenStrips} /Gradient add_res /0 /Gradient get_res exec grestore}ifnewpath170.577 13.6089 mo172.087 10.6963 174.159 8.79883 176.638 8.12012 cv176.211 6.67432 175.11 5.17529 174.064 5.17529 cv172.779 5.17529 172.033 5.86475 171.687 6.21045 cv171.638 6.31055 170.718 7.31641 170.598 7.44775 cv170.598 7.47119 li170.597 7.47021 170.589 7.46143 170.587 7.45947 cv170.585 7.46143 170.578 7.47021 170.577 7.47119 cv170.577 7.44775 li170.457 7.31641 169.537 6.31055 169.488 6.21045 cv169.142 5.86475 168.396 5.17529 167.11 5.17529 cv166.065 5.17529 164.964 6.67432 164.537 8.12012 cv167.016 8.79883 169.066 10.6963 170.577 13.6089 cvcplevel3{gsaveclp[-2.95052e-07 -6.75 6.75 -2.95052e-07 170.587 9.41553 ] concat/0 /Gradient get_res clonedict shfill grestore}iflevel3 not{gsave[-2.95052e-07 -6.75 6.75 -2.95052e-07 170.587 9.41553 ] concatclp/0 /Gradient get_res exec grestore}ifnewpath212.625 34.4165 mo212.675 34.2412 li212.796 34.1597 li209.314 28.8945 205.013 25.0815 199.825 23.3315 cv192.954 21.4126 188.944 24.7944 187.165 26.981 cv186.974 27.2158 186.792 27.4595 186.617 27.7085 cv192.039 27.7085 li194.593 27.7085 196.67 31.6743 196.67 36.5493 cv196.67 41.3618 194.762 45.1426 192.301 45.2832 cv191.744 45.5874 191.129 45.8369 190.479 46.0405 cv203.077 46.0405 li207.3 42.7988 211.396 38.7124 212.625 34.4165 cvcplevel3{gsaveclp[-9.95949e-07 -22.7847 22.7847 -9.95949e-07 199.707 38.0034 ] concat/0 /Gradient get_res clonedict shfill grestore}iflevel3 not{gsave[-9.95949e-07 -22.7847 22.7847 -9.95949e-07 199.707 38.0034 ] concatclp/0 /Gradient get_res exec grestore}ifnewpath177.803 44.6938 mo173.481 38.8428 173.256 30.7949 177.23 24.1909 cv179.435 20.5269 181.554 17.8569 185.217 16.3198 cv184.959 14.8501 184.38 13.7939 183.457 13.2192 cv181.725 12.1392 179.319 12.9409 179.295 12.9492 cv179.24 12.9683 li179.184 12.978 li176.82 13.3955 175.327 16.4375 174.491 18.916 cv171.697 27.1968 172.155 40.9189 175.154 46.0405 cv180.208 46.0405 li179.066 45.6885 178.196 45.2266 177.803 44.6938 cvcplevel3{gsaveclp[-7.3763e-07 -16.875 16.875 -7.3763e-07 178.923 23.4155 ] concat/0 /Gradient get_res clonedict shfill grestore}iflevel3 not{gsave[-7.3763e-07 -16.875 16.875 -7.3763e-07 178.923 23.4155 ] concatclp/0 /Gradient get_res exec grestore}ifnewpath166.662 18.9136 mo165.826 16.436 164.333 13.395 161.97 12.978 cv161.912 12.9673 li161.858 12.9487 li161.833 12.9409 159.436 12.1406 157.708 13.2173 cv156.784 13.792 156.204 14.8501 155.948 16.3247 cv159.608 17.8613 161.721 20.5278 163.922 24.186 cv167.897 30.7915 167.673 38.8413 163.351 44.6938 cv162.958 45.2266 162.088 45.689 160.946 46.0405 cv166 46.0405 li168.999 40.918 169.457 27.1948 166.662 18.9136 cvcplevel3{gsaveclp[-7.3763e-07 -16.875 16.875 -7.3763e-07 162.236 23.4155 ] concat/0 /Gradient get_res clonedict shfill grestore}iflevel3 not{gsave[-7.3763e-07 -16.875 16.875 -7.3763e-07 162.236 23.4155 ] concatclp/0 /Gradient get_res exec grestore}ifnewpath148.879 45.2837 mo146.417 45.1436 144.506 41.3325 144.506 36.479 cv144.506 31.5342 146.488 27.6606 149.018 27.6606 cv149.059 27.6606 149.097 27.6699 149.137 27.6719 cv149.137 27.6616 149.136 27.6499 149.136 27.6499 cv149.136 27.6499 149.25 27.6509 149.255 27.6509 cv149.271 27.6509 149.805 27.6406 149.821 27.6406 cv149.853 27.6406 149.911 27.6509 149.949 27.6528 cv150.297 27.6563 152.935 27.6826 154.536 27.6987 cv154.362 27.4521 154.182 27.2104 153.992 26.9775 cv152.215 24.7944 148.207 21.4136 141.365 23.3237 cv136.167 25.0771 131.857 28.8965 128.37 34.1699 cv128.517 34.2686 li128.567 34.4438 li129.794 38.7324 133.874 42.8071 138.083 46.0405 cv150.702 46.0405 li150.051 45.8369 149.436 45.5874 148.879 45.2837 cvcplevel3{gsaveclp[-9.95949e-07 -22.7847 22.7847 -9.95949e-07 141.453 38.0034 ] concat/0 /Gradient get_res clonedict shfill grestore}iflevel3 not{gsave[-9.95949e-07 -22.7847 22.7847 -9.95949e-07 141.453 38.0034 ] concatclp/0 /Gradient get_res exec grestore}ifnewpath141.071 22.3687 mo148.487 20.2969 152.835 23.9717 154.768 26.3467 cv155.12 26.7793 155.437 27.2397 155.737 27.7114 cv155.745 27.7114 155.764 27.7114 155.764 27.7114 cv155.909 27.9434 li157.484 30.4634 158.293 33.3809 158.293 36.105 cv158.293 38.1714 157.828 40.1265 156.879 41.7119 cv155.752 43.5947 154.013 44.7793 151.862 45.1714 cv156.438 46.4785 161.668 45.2886 162.546 44.1001 cv166.627 38.5737 166.831 30.9595 163.065 24.7017 cv160.414 20.2964 157.371 17.4009 152.617 16.3071 cv152.495 16.2793 li151.92 16.147 151.335 16.0435 150.743 15.9668 cv150.675 15.9585 150.605 15.9556 150.536 15.9478 cv150.075 15.8931 149.608 15.8584 149.137 15.8374 cv148.922 15.8281 148.707 15.8257 148.491 15.8232 cv148.131 15.8188 147.768 15.8247 147.403 15.8398 cv147.193 15.8486 146.984 15.855 146.772 15.8701 cv146.248 15.9077 145.718 15.9609 145.183 16.0381 cv145.14 16.0439 145.098 16.0464 145.055 16.0527 cv144.118 16.1226 143.195 16.2417 142.286 16.4082 cv135.903 17.5894 130.213 21.1904 125.339 27.1426 cv124.484 28.187 123.676 29.3188 122.89 30.4893 cv127.574 33.6353 li131.183 28.1582 135.662 24.1929 141.071 22.3687 cvcplevel3{gsaveclp[-7.85525e-07 17.9707 -17.9707 -7.85525e-07 144.322 34.4736 ] concat/0 /Gradient get_res clonedict shfill grestore}iflevel3 not{gsave[-7.85525e-07 17.9707 -17.9707 -7.85525e-07 144.322 34.4736 ] concatclp/0 /Gradient get_res exec grestore}ifnewpath198.848 16.4048 mo197.938 16.2378 197.013 16.1187 196.073 16.0488 cv196.021 16.041 195.969 16.0381 195.916 16.0308 cv195.367 15.9517 194.823 15.8994 194.282 15.8633 cv194.081 15.8496 193.881 15.8423 193.681 15.8345 cv193.237 15.8179 192.797 15.8149 192.36 15.8271 cv192.212 15.8311 192.062 15.8301 191.913 15.8374 cv191.305 15.8682 190.701 15.9219 190.106 16.0093 cv190.099 16.0103 190.092 16.0122 190.084 16.0132 cv189.452 16.1069 188.829 16.2324 188.216 16.3906 cv187.479 16.5806 li187.479 16.5767 li183.188 17.8389 180.541 20.6279 178.087 24.7065 cv174.323 30.9629 174.527 38.5752 178.608 44.1001 cv179.486 45.29 184.722 46.4814 189.301 45.1719 cv187.147 44.7778 185.405 43.5918 184.277 41.7051 cv182.079 38.0273 182.481 32.3682 185.255 27.9429 cv185.255 27.9429 185.264 27.9575 185.268 27.9658 cv185.609 27.4043 185.976 26.8579 186.39 26.3496 cv188.326 23.9727 192.674 20.2964 200.12 22.3765 cv205.519 24.1973 209.989 28.1563 213.592 33.625 cv218.27 30.4819 li217.484 29.314 216.678 28.1846 215.824 27.1421 cv210.951 21.1909 205.263 17.5898 198.848 16.4048 cvcplevel3{gsaveclp[-7.85524e-07 17.9707 -17.9707 -7.85524e-07 196.835 34.4736 ] concat/0 /Gradient get_res clonedict shfill grestore}iflevel3 not{gsave[-7.85524e-07 17.9707 -17.9707 -7.85524e-07 196.835 34.4736 ] concatclp/0 /Gradient get_res exec grestore}ifnewpath175.441 189.392 mo175.472 189.216 175.491 189.036 175.513 188.857 cv175.526 188.747 175.545 188.637 175.555 188.525 cv175.581 188.231 175.596 187.936 175.596 187.637 cv175.596 187.637 175.598 187.497 175.598 187.43 cv175.598 186.698 175.526 185.963 175.384 185.243 cv175.384 185.243 175.378 185.209 175.374 185.19 cv175.359 185.177 175.333 185.155 175.333 185.155 cv174.855 184.748 174.308 184.391 173.681 184.083 cv172.968 183.683 172.181 183.438 171.343 183.354 cv171.343 183.354 170.582 183.322 170.571 183.322 cv169.811 183.354 li168.972 183.438 168.186 183.683 167.448 184.095 cv166.845 184.391 166.298 184.748 165.821 185.155 cv165.821 185.155 165.794 185.177 165.779 185.19 cv165.775 185.209 165.769 185.244 165.769 185.244 cv165.627 185.963 165.556 186.697 165.556 187.436 cv165.556 187.503 165.557 187.57 165.558 187.637 cv165.558 187.937 165.572 188.234 165.598 188.528 cv165.608 188.64 165.628 188.75 165.641 188.861 cv165.663 189.042 165.682 189.223 165.713 189.4 cv165.739 189.549 165.774 189.695 165.806 189.842 cv165.834 189.977 165.859 190.113 165.893 190.247 cv165.938 190.426 165.991 190.6 166.043 190.775 cv166.072 190.871 166.097 190.969 166.127 191.063 cv166.194 191.268 166.268 191.467 166.343 191.666 cv166.366 191.725 166.386 191.787 166.409 191.845 cv166.498 192.07 166.593 192.288 166.691 192.503 cv166.704 192.532 166.716 192.562 166.729 192.591 cv166.839 192.827 166.953 193.055 167.071 193.278 cv167.074 193.285 167.078 193.292 167.081 193.298 cv167.978 194.988 169.092 196.305 169.922 196.972 cv169.93 196.979 169.939 196.987 169.947 196.994 cv170.047 197.074 170.141 197.139 170.232 197.199 cv170.25 197.21 170.27 197.227 170.287 197.238 cv170.392 197.304 170.489 197.356 170.578 197.393 cv170.666 197.356 170.764 197.304 170.87 197.237 cv170.891 197.224 170.916 197.204 170.938 197.189 cv171.025 197.131 171.115 197.068 171.211 196.991 cv171.228 196.979 171.245 196.961 171.262 196.948 cv171.369 196.861 171.479 196.766 171.594 196.658 cv171.608 196.644 li172.388 195.911 173.323 194.721 174.095 193.255 cv174.104 193.238 li174.22 193.016 174.332 192.79 174.439 192.556 cv174.453 192.527 174.465 192.498 174.478 192.469 cv174.574 192.255 174.668 192.039 174.755 191.817 cv174.777 191.76 174.797 191.701 174.818 191.643 cv174.893 191.445 174.966 191.246 175.032 191.042 cv175.062 190.951 175.086 190.856 175.114 190.763 cv175.166 190.587 175.219 190.412 175.264 190.232 cv175.296 190.103 175.321 189.97 175.349 189.838 cv175.38 189.689 175.416 189.542 175.441 189.392 cvcplevel3{gsaveclp[-10.6841 -9.34032e-07 9.34032e-07 -10.6841 173.04 190.357 ] concat/0 /Gradient get_res clonedict shfill grestore}iflevel3 not{gsave[-10.6841 -9.34032e-07 9.34032e-07 -10.6841 173.04 190.357 ] concatclp/0 /Gradient get_res exec grestore}ifnewpath148.729 34.7305 mo148.87 35.2246 148.954 35.7749 148.954 36.3105 cv148.954 36.8384 148.872 37.3804 148.734 37.8691 cv149.304 37.8647 150.031 37.8623 150.385 37.8594 cv150.493 37.3428 150.613 36.7803 150.613 36.2573 cv150.613 35.6733 150.525 35.2075 150.419 34.7202 cv150.056 34.7236 149.314 34.7256 148.729 34.7305 cvcplevel3{gsaveclp[-1.02577e-07 2.34668 -2.34668 -1.02577e-07 149.67 36.002 ] concat/0 /Gradient get_res clonedict shfill grestore}iflevel3 not{gsave[-1.02577e-07 2.34668 -2.34668 -1.02577e-07 149.67 36.002 ] concatclp/0 /Gradient get_res exec grestore}ifnewpath184.988 40.8203 mo185.427 41.667 186.104 42.5776 187.126 43.2593 cv187.182 43.2944 187.238 43.3286 187.295 43.3623 cv187.434 43.4482 187.587 43.5234 187.738 43.6001 cv188.235 43.8408 188.771 44.0229 189.344 44.1382 cv188.341 43.0273 187.593 41.1929 187.274 38.9717 cv187.268 38.9263 187.263 38.8789 187.256 38.833 cv187.217 38.5366 187.185 38.2344 187.16 37.9258 cv187.153 37.8364 187.146 37.7476 187.14 37.6572 cv187.117 37.2944 187.102 36.9263 187.102 36.5493 cv187.102 36.1509 187.117 35.7642 187.141 35.3823 cv187.146 35.2905 187.153 35.1997 187.16 35.1089 cv187.186 34.7661 187.219 34.4312 187.263 34.1045 cv187.267 34.0762 187.27 34.0469 187.273 34.0186 cv187.597 31.6772 188.363 29.7896 189.401 28.7085 cv185.983 28.7085 li183.763 32.5396 183.279 37.5171 184.988 40.8203 cvcplevel3{gsaveclp[-5.33053e-07 12.1948 -12.1948 -5.33053e-07 186.681 33.5107 ] concat/0 /Gradient get_res clonedict shfill grestore}iflevel3 not{gsave[-5.33053e-07 12.1948 -12.1948 -5.33053e-07 186.681 33.5107 ] concatclp/0 /Gradient get_res exec grestore}ifnewpath192.6 37.8691 mo192.463 37.3804 192.38 36.8384 192.38 36.3105 cv192.38 35.7749 192.464 35.2246 192.605 34.7305 cv192.02 34.7256 191.277 34.7236 190.915 34.7202 cv190.809 35.2075 190.721 35.6733 190.721 36.2573 cv190.721 36.7803 190.841 37.3428 190.949 37.8594 cv191.303 37.8623 192.029 37.8647 192.6 37.8691 cvcplevel3{gsaveclp[-1.02577e-07 2.34668 -2.34668 -1.02577e-07 191.663 36.002 ] concat/0 /Gradient get_res clonedict shfill grestore}iflevel3 not{gsave[-1.02577e-07 2.34668 -2.34668 -1.02577e-07 191.663 36.002 ] concatclp/0 /Gradient get_res exec grestore}ifnewpath190.513 74.2505 mo190.513 77.9917 li191.086 77.9082 li191.102 77.9058 192.717 77.6836 193.618 78.5981 cv194.197 79.186 194.384 80.1499 194.173 81.4634 cv194.178 81.439 185.773 117.864 183.6 127.289 cv182.735 123.154 171.149 67.7251 171.149 67.7251 cv169.545 67.7251 li169.545 67.7251 161.111 122.05 160.385 126.728 cv159.333 122.221 149.814 81.4287 149.814 81.4287 cv149.793 81.1948 149.783 80.9702 149.783 80.7559 cv149.783 79.6865 150.046 78.8706 150.575 78.3638 cv151.337 77.6323 152.453 77.7744 152.464 77.7759 cv153.031 77.853 li153.034 77.2808 li153.034 74.2505 li139.083 74.2505 li139.083 77.8354 li139.5 77.9067 li139.585 77.9214 141.596 78.2837 141.911 80.0337 cv141.916 80.0581 159.574 155.82 159.574 155.82 cv161.682 155.82 li161.682 155.82 170.017 101.255 170.145 100.419 cv170.202 100.419 li170.356 101.217 180.972 155.82 180.972 155.82 cv182.815 155.82 li199.579 79.9863 li200.103 77.8628 202.285 78.0356 202.378 78.0444 cv202.923 78.0938 li202.925 77.5464 li202.925 74.2505 li190.513 74.2505 licp0 0 0 0 cmykf229.42 108.825 mo229.164 110.871 228.862 112.882 228.539 114.876 cv228.479 115.181 li223.104 113.462 li223.136 113.127 li223.396 111.547 223.638 109.942 223.855 108.307 cv224.831 100.975 225.335 93.3862 225.335 85.8843 cv225.335 81.3867 225.151 76.9219 224.783 72.561 cv225.855 72.479 229.084 72.2305 230.505 72.1211 cv230.818 76.1348 230.987 80.2856 230.987 84.5718 cv230.987 92.2954 230.472 100.424 229.42 108.825 cvcp228.214 116.873 mo225.707 131.213 221.465 144.13 215.814 155.17 cv210.561 152.005 li215.772 142.037 220.168 129.794 222.781 115.115 cv222.826 114.681 li228.275 116.447 li228.214 116.873 licp192.506 184.08 mo188.559 179.277 li195.729 173.875 203.511 165.18 210.069 152.936 cv210.104 152.935 210.139 152.941 210.174 152.94 cv210.365 153.055 213.981 155.233 215.362 156.065 cv209.23 167.78 201.479 177.304 192.506 184.08 cvcp175.291 193.097 mo176.056 191.474 176.596 189.603 176.596 187.637 cv176.596 187.646 li176.597 187.574 176.598 187.502 176.598 187.43 cv176.598 186.809 176.536 186.188 176.442 185.572 cv179.747 184.738 183.634 182.863 187.758 179.877 cv188.651 180.964 190.797 183.576 191.703 184.679 cv186.598 188.41 181.102 191.24 175.291 193.097 cvcp175.114 190.763 mo175.086 190.856 175.062 190.951 175.032 191.042 cv174.966 191.246 174.893 191.445 174.818 191.643 cv174.797 191.701 174.777 191.76 174.755 191.817 cv174.668 192.039 174.574 192.255 174.478 192.469 cv174.465 192.498 174.453 192.527 174.439 192.556 cv174.332 192.79 174.22 193.016 174.104 193.238 cv174.095 193.255 li173.323 194.721 172.388 195.911 171.608 196.644 cv171.594 196.658 li171.479 196.766 171.369 196.861 171.262 196.948 cv171.245 196.961 171.228 196.979 171.211 196.991 cv171.115 197.068 171.025 197.131 170.938 197.189 cv170.916 197.204 170.891 197.224 170.87 197.237 cv170.764 197.304 170.666 197.356 170.578 197.393 cv170.489 197.356 170.392 197.304 170.287 197.238 cv170.27 197.227 170.25 197.21 170.232 197.199 cv170.141 197.139 170.047 197.074 169.947 196.994 cv169.939 196.987 169.93 196.979 169.922 196.972 cv169.092 196.305 167.978 194.988 167.081 193.298 cv167.078 193.292 167.074 193.285 167.071 193.278 cv166.953 193.055 166.839 192.827 166.729 192.591 cv166.716 192.562 166.704 192.532 166.691 192.503 cv166.593 192.288 166.498 192.07 166.409 191.845 cv166.386 191.787 166.366 191.725 166.343 191.666 cv166.268 191.467 166.194 191.268 166.127 191.063 cv166.097 190.969 166.072 190.871 166.043 190.775 cv165.991 190.6 165.938 190.426 165.893 190.247 cv165.859 190.113 165.834 189.977 165.806 189.842 cv165.774 189.695 165.739 189.549 165.713 189.4 cv165.682 189.223 165.663 189.042 165.641 188.861 cv165.628 188.75 165.608 188.64 165.598 188.528 cv165.572 188.234 165.558 187.937 165.558 187.637 cv165.557 187.57 165.556 187.503 165.556 187.436 cv165.556 186.697 165.627 185.963 165.769 185.244 cv165.769 185.244 165.775 185.209 165.779 185.19 cv165.794 185.177 165.821 185.155 165.821 185.155 cv166.298 184.748 166.845 184.391 167.448 184.095 cv168.186 183.683 168.972 183.438 169.811 183.354 cv170.571 183.322 li170.582 183.322 171.343 183.354 171.343 183.354 cv172.181 183.438 172.968 183.683 173.681 184.083 cv174.308 184.391 174.855 184.748 175.333 185.155 cv175.333 185.155 175.359 185.177 175.374 185.19 cv175.378 185.209 175.384 185.243 175.384 185.243 cv175.526 185.963 175.598 186.698 175.598 187.43 cv175.598 187.497 175.596 187.637 175.596 187.637 cv175.596 187.936 175.581 188.231 175.555 188.525 cv175.545 188.637 175.526 188.747 175.513 188.857 cv175.491 189.036 175.472 189.216 175.441 189.392 cv175.416 189.542 175.38 189.689 175.349 189.838 cv175.321 189.97 175.296 190.103 175.264 190.232 cv175.219 190.412 175.166 190.587 175.114 190.763 cvcp149.464 184.686 mo150.33 183.629 152.504 180.979 153.406 179.878 cv157.525 182.858 161.41 184.738 164.711 185.572 cv164.617 186.188 164.556 186.809 164.556 187.43 cv164.556 187.502 164.557 187.574 164.558 187.646 cv164.558 189.606 165.095 191.474 165.859 193.094 cv160.055 191.238 154.564 188.412 149.464 184.686 cvcp125.801 156.067 mo127.176 155.242 130.761 153.091 130.952 152.976 cv131 152.977 131.048 152.969 131.097 152.97 cv137.654 165.199 145.432 173.891 152.598 179.286 cv148.663 184.086 li139.687 177.31 131.935 167.785 125.801 156.067 cvcp112.956 116.904 mo112.885 116.447 li118.321 114.681 li118.387 115.141 li121.001 129.811 125.383 142.063 130.594 152.024 cv125.349 155.172 li119.703 144.14 115.463 131.232 112.956 116.904 cvcp112.631 114.907 mo112.306 112.903 112.003 110.881 111.745 108.825 cv110.692 100.424 110.177 92.2939 110.177 84.5693 cv110.177 80.2788 110.347 76.1226 110.661 72.1045 cv111.893 72.2026 115.278 72.4722 116.382 72.5601 cv116.012 76.9229 115.829 81.3901 115.829 85.8901 cv115.829 93.3901 116.333 100.977 117.309 108.307 cv117.527 109.951 117.771 111.564 118.033 113.153 cv118.097 113.447 li112.686 115.213 li112.631 114.907 licp122.338 31.3237 mo123.522 32.1191 125.894 33.7114 127.041 34.4814 cv121.244 43.748 117.803 57.0298 116.472 71.564 cv110.731 71.1064 li112.114 54.8428 116.076 41.0806 122.338 31.3237 cvcp125.339 27.1426 mo130.213 21.1904 135.903 17.5894 142.286 16.4082 cv143.195 16.2417 144.118 16.1226 145.055 16.0527 cv145.098 16.0464 145.14 16.0439 145.183 16.0381 cv145.718 15.9609 146.248 15.9077 146.772 15.8701 cv146.984 15.855 147.193 15.8486 147.403 15.8398 cv147.768 15.8247 148.131 15.8188 148.491 15.8232 cv148.707 15.8257 148.922 15.8281 149.137 15.8374 cv149.608 15.8584 150.075 15.8931 150.536 15.9478 cv150.605 15.9556 150.675 15.9585 150.743 15.9668 cv151.335 16.0435 151.92 16.147 152.495 16.2793 cv152.617 16.3071 li157.371 17.4009 160.414 20.2964 163.065 24.7017 cv166.831 30.9595 166.627 38.5737 162.546 44.1001 cv161.668 45.2886 156.438 46.4785 151.862 45.1714 cv154.013 44.7793 155.752 43.5947 156.879 41.7119 cv157.828 40.1265 158.293 38.1714 158.293 36.105 cv158.293 33.3809 157.484 30.4634 155.909 27.9434 cv155.764 27.7114 li155.764 27.7114 155.745 27.7114 155.737 27.7114 cv155.437 27.2397 155.12 26.7793 154.768 26.3467 cv152.835 23.9717 148.487 20.2969 141.071 22.3687 cv135.662 24.1929 131.183 28.1582 127.574 33.6353 cv122.89 30.4893 li123.676 29.3188 124.484 28.187 125.339 27.1426 cvcp155.716 10.584 mo157.784 9.07568 160.495 9.646 160.522 9.65186 cv161.145 9.7876 li161.294 9.16895 li163.359 0.566406 170.201 1.26855 170.492 1.30615 cv170.662 1.30615 li170.952 1.26855 177.794 0.566406 179.86 9.16895 cv180.008 9.78662 li180.631 9.65186 li180.655 9.64697 183.048 9.15137 184.955 10.5459 cv186.292 11.5239 187.101 13.2124 187.371 15.5537 cv187.123 15.6245 186.881 15.7104 186.637 15.791 cv186.276 14.0181 185.47 12.7305 184.229 11.9609 cv181.893 10.5132 178.938 11.5112 178.813 11.5542 cv178.927 11.5249 li176.492 11.9551 174.475 14.3477 173.093 18.4443 cv170.351 26.5713 170.453 41.3027 174.028 47.0303 cv172.925 46.9321 171.791 46.8506 170.6 46.7959 cv169.391 46.8511 168.242 46.9336 167.124 47.0337 cv170.702 41.3071 170.803 26.5698 168.06 18.4419 cv166.678 14.3467 164.661 11.9546 162.227 11.5249 cv162.34 11.5547 li162.216 11.5112 159.269 10.5142 156.937 11.959 cv155.695 12.7285 154.888 14.019 154.528 15.7954 cv154.131 15.6655 153.73 15.5469 153.323 15.4424 cv153.586 13.1914 154.387 11.5537 155.716 10.584 cvcp188.216 16.3906 mo188.829 16.2324 189.452 16.1069 190.084 16.0132 cv190.092 16.0122 190.099 16.0103 190.106 16.0093 cv190.701 15.9219 191.305 15.8682 191.913 15.8374 cv192.062 15.8301 192.212 15.8311 192.36 15.8271 cv192.797 15.8149 193.237 15.8179 193.681 15.8345 cv193.881 15.8423 194.081 15.8496 194.282 15.8633 cv194.823 15.8994 195.367 15.9517 195.916 16.0308 cv195.969 16.0381 196.021 16.041 196.073 16.0488 cv197.013 16.1187 197.938 16.2378 198.848 16.4048 cv205.263 17.5898 210.951 21.1909 215.824 27.1421 cv216.678 28.1846 217.484 29.314 218.27 30.4819 cv213.592 33.625 li209.989 28.1563 205.519 24.1973 200.12 22.3765 cv192.674 20.2964 188.326 23.9727 186.39 26.3496 cv185.976 26.8579 185.609 27.4043 185.268 27.9658 cv185.264 27.9575 185.255 27.9429 185.255 27.9429 cv182.481 32.3682 182.079 38.0273 184.277 41.7051 cv185.405 43.5918 187.147 44.7778 189.301 45.1719 cv184.722 46.4814 179.486 45.29 178.608 44.1001 cv174.527 38.5752 174.323 30.9629 178.087 24.7065 cv180.541 20.6279 183.188 17.8389 187.479 16.5767 cv187.479 16.5806 li188.216 16.3906 licp198.676 144.951 mo204.822 133.68 209.945 118.985 211.369 100.298 cv212.092 90.5762 211.063 82.6963 209.215 76.3838 cv211.703 76.2368 220.247 75.5586 223.84 73.0581 cv224.759 84.4912 224.398 96.6494 222.863 108.175 cv220.491 125.986 215.544 140.485 209.528 151.914 cv203.638 151.607 198.899 145.255 198.676 144.951 cvcp179.669 169.325 mo179.461 169.362 li184.881 164.558 191.979 156.912 198.144 145.904 cv199.292 147.371 203.565 152.355 209.014 152.89 cv202.565 164.833 194.96 173.315 187.975 178.566 cv187.95 178.537 li187.794 178.496 li181.087 176.737 179.683 169.399 179.669 169.325 cvcp162.365 169.943 mo166.977 173.938 170.227 175.802 170.334 175.862 cv170.577 175.996 li170.819 175.862 li170.927 175.802 174.177 173.939 178.79 169.944 cv179.215 171.581 181.112 177.398 187.002 179.268 cv183.087 182.066 179.401 183.84 176.261 184.633 cv175.982 184.394 li175.441 183.933 174.823 183.53 174.146 183.197 cv173.336 182.743 172.418 182.457 171.443 182.358 cv170.571 182.322 li169.71 182.358 li168.735 182.457 167.817 182.743 166.983 183.209 cv166.329 183.531 165.712 183.933 165.172 184.394 cv165.171 184.394 164.942 184.59 164.887 184.637 cv161.75 183.843 158.066 182.065 154.157 179.27 cv160.044 177.401 161.941 171.579 162.365 169.943 cvcp143.019 145.906 mo149.183 156.914 156.278 164.559 161.695 169.363 cv161.485 169.325 li161.472 169.399 160.067 176.738 153.37 178.496 cv153.213 178.537 li153.191 178.563 li146.211 173.318 138.615 164.853 132.169 152.923 cv137.594 152.357 141.868 147.375 143.019 145.906 cvcp131.949 76.3838 mo130.101 82.6963 129.072 90.5757 129.795 100.297 cv131.219 118.985 136.342 133.681 142.487 144.953 cv142.248 145.279 137.51 151.604 131.651 151.949 cv125.628 140.514 120.675 126.003 118.3 108.175 cv116.765 96.6494 116.404 84.4912 117.325 73.0581 cv120.917 75.5586 129.46 76.2368 131.949 76.3838 cvcp147.863 53.4453 mo146.642 54.2974 145.438 55.2349 144.236 56.2837 cv144.093 56.4063 143.945 56.5356 143.792 56.6714 cv143.694 56.7588 143.597 56.8394 143.499 56.9282 cv143.501 56.9316 li140.23 59.9224 135.284 65.7388 132.247 75.3984 cv130.12 75.2778 120.394 74.5864 117.424 71.8848 cv118.705 57.4531 122.064 44.2788 127.754 35.1318 cv130.638 43.9863 144.226 51.5537 147.863 53.4453 cvcp187.113 51.0938 mo185.127 50.666 183.224 50.6499 181.514 51.0938 cv176.556 52.3799 173.356 52.9604 170.577 53.0347 cv167.474 52.9512 163.896 52.1982 159.64 51.0938 cv157.936 50.6514 156.04 50.6655 154.062 51.0898 cv158.647 49.0913 163.863 48.103 170.6 47.7949 cv177.319 48.1035 182.529 49.0933 187.113 51.0938 cvcp210.602 94.1582 mo210.602 96.0933 210.528 98.1143 210.371 100.223 cv206.408 152.242 173.608 173.033 170.577 174.844 cv167.546 173.033 134.757 152.241 130.792 100.222 cv130.679 98.7065 130.588 96.8096 130.588 94.6431 cv130.588 84.0947 132.751 67.165 145.144 56.8228 cv149.985 52.7827 155.311 51.0024 159.389 52.0615 cv163.711 53.1836 167.352 53.9482 170.577 54.0347 cv173.462 53.958 176.729 53.3682 181.765 52.0615 cv185.849 51.002 191.179 52.7837 196.023 56.8281 cv196.133 56.9194 196.249 57.019 196.364 57.1191 cv196.442 57.187 196.52 57.2534 196.598 57.3228 cv201.387 61.5454 210.602 72.4912 210.602 94.1582 cvcp197.661 56.9331 mo197.665 56.9282 li197.535 56.8105 197.405 56.7031 197.275 56.5879 cv197.193 56.5151 197.113 56.4453 197.034 56.3765 cv195.797 55.29 194.559 54.3213 193.301 53.4443 cv196.938 51.5508 210.515 43.981 213.424 35.1411 cv219.105 44.2861 222.461 57.4565 223.74 71.8843 cv220.771 74.5874 211.041 75.2783 208.916 75.3984 cv205.878 65.7378 200.931 59.9224 197.661 56.9331 cvcp192.301 45.2832 mo194.762 45.1426 196.67 41.3618 196.67 36.5493 cv196.67 31.6743 194.593 27.7085 192.039 27.7085 cv186.617 27.7085 li186.792 27.4595 186.974 27.2158 187.165 26.981 cv188.944 24.7944 192.954 21.4126 199.825 23.3315 cv205.013 25.0815 209.314 28.8945 212.796 34.1597 cv212.675 34.2412 li212.625 34.4165 li210.051 43.417 194.889 51.5068 192.353 52.8062 cv187.6 49.7085 182.741 48.02 176.055 47.2427 cv175.907 47.0894 li172.245 43.1196 171.477 27.8486 174.491 18.916 cv175.327 16.4375 176.82 13.3955 179.184 12.978 cv179.24 12.9683 li179.295 12.9492 li179.319 12.9409 181.725 12.1392 183.457 13.2192 cv184.38 13.7939 184.959 14.8501 185.217 16.3198 cv181.554 17.8569 179.435 20.5269 177.23 24.1909 cv173.256 30.7949 173.481 38.8428 177.803 44.6938 cv179.311 46.7358 187.723 47.7837 192.301 45.2832 cvcp192.039 28.7085 mo193.757 28.7085 195.67 31.9287 195.67 36.5493 cv195.67 40.7485 194.063 44.2964 192.16 44.2964 cv190.258 44.2964 188.102 40.7485 188.102 36.5493 cv188.102 32.2993 190.203 28.7085 192.039 28.7085 cvcp187.273 34.0186 mo187.27 34.0469 187.267 34.0762 187.263 34.1045 cv187.219 34.4312 187.186 34.7661 187.16 35.1089 cv187.153 35.1997 187.146 35.2905 187.141 35.3823 cv187.117 35.7642 187.102 36.1509 187.102 36.5493 cv187.102 36.9263 187.117 37.2944 187.14 37.6572 cv187.146 37.7476 187.153 37.8364 187.16 37.9258 cv187.185 38.2344 187.217 38.5366 187.256 38.833 cv187.263 38.8789 187.268 38.9263 187.274 38.9717 cv187.593 41.1929 188.341 43.0273 189.344 44.1382 cv188.771 44.0229 188.235 43.8408 187.738 43.6001 cv187.587 43.5234 187.434 43.4482 187.295 43.3623 cv187.238 43.3286 187.182 43.2944 187.126 43.2593 cv186.104 42.5776 185.427 41.667 184.988 40.8203 cv183.279 37.5171 183.763 32.5396 185.983 28.7085 cv189.401 28.7085 li188.363 29.7896 187.597 31.6772 187.273 34.0186 cvcp149.949 27.6528 mo149.911 27.6509 149.853 27.6406 149.821 27.6406 cv149.805 27.6406 149.271 27.6509 149.255 27.6509 cv149.25 27.6509 149.136 27.6499 149.136 27.6499 cv149.136 27.6499 149.137 27.6616 149.137 27.6719 cv149.097 27.6699 149.059 27.6606 149.018 27.6606 cv146.488 27.6606 144.506 31.5342 144.506 36.479 cv144.506 41.3325 146.417 45.1436 148.879 45.2837 cv153.454 47.7803 161.844 46.7339 163.351 44.6938 cv167.673 38.8413 167.897 30.7915 163.922 24.186 cv161.721 20.5278 159.608 17.8613 155.948 16.3247 cv156.204 14.8501 156.784 13.792 157.708 13.2173 cv159.436 12.1406 161.833 12.9409 161.858 12.9487 cv161.912 12.9673 li161.97 12.978 li164.333 13.395 165.826 16.436 166.662 18.9136 cv169.676 27.8462 168.909 43.1187 165.247 47.0894 cv165.071 47.2495 li158.381 48.0283 153.558 49.7119 148.811 52.8057 cv146.275 51.5093 131.141 43.4429 128.567 34.4438 cv128.517 34.2686 li128.37 34.1699 li131.857 28.8965 136.167 25.0771 141.365 23.3237 cv148.207 21.4136 152.215 24.7944 153.992 26.9775 cv154.182 27.2104 154.362 27.4521 154.536 27.6987 cv152.935 27.6826 150.297 27.6563 149.949 27.6528 cvcp149.018 44.2944 mo147.117 44.2944 145.51 40.7153 145.51 36.479 cv145.51 32.2432 147.117 28.6646 149.018 28.6646 cv150.919 28.6646 153.061 32.2432 153.061 36.479 cv153.061 40.7153 150.919 44.2944 149.018 44.2944 cvcp153.406 41.1108 mo153.423 41.0596 153.438 41.0083 153.454 40.9561 cv153.528 40.7075 153.595 40.4517 153.656 40.1875 cv153.674 40.1133 153.694 40.042 153.71 39.9663 cv153.773 39.6724 153.827 39.3696 153.874 39.0601 cv153.896 38.9175 153.912 38.7705 153.93 38.6245 cv153.955 38.4229 153.977 38.2192 153.995 38.0117 cv154.007 37.8726 154.019 37.7339 154.027 37.5918 cv154.049 37.2271 154.065 36.8574 154.065 36.479 cv154.065 36.1699 154.057 35.8647 154.042 35.5649 cv153.941 32.5967 153.38 30.4097 152.362 29.0698 cv152.236 28.9033 152.105 28.8037 151.975 28.6733 cv153.501 28.6885 154.852 28.7021 155.174 28.7056 cv157.396 32.5376 157.878 37.5171 156.169 40.8223 cv155.731 41.6685 155.056 42.5776 154.035 43.2588 cv153.98 43.2935 153.925 43.3276 153.869 43.3608 cv153.732 43.4458 153.58 43.519 153.432 43.5952 cv152.93 43.8389 152.392 44.0259 151.812 44.1416 cv152.469 43.4126 153.015 42.3701 153.406 41.1108 cvcp230.435 71.1235 mo224.693 71.5649 li223.362 57.0234 219.922 43.7363 214.126 34.4707 cv215.304 33.6792 217.817 31.9907 218.82 31.3159 cv225.088 41.0762 229.052 54.8477 230.435 71.1235 cvcp216.83 26.3184 mo211.107 19.3291 203.972 15.3301 196.195 14.7534 cv193.587 14.3613 191.022 14.4648 188.581 15.0005 cv188.214 12.4971 187.27 10.6216 185.709 9.48682 cv183.916 8.18311 181.899 8.20508 180.937 8.30566 cv178.502 -0.446289 171.227 -0.0112305 170.577 0.00927734 cv169.93 -0.0112305 162.656 -0.445313 160.22 8.29785 cv159.178 8.17725 156.906 8.11426 154.961 9.52539 cv153.409 10.6523 152.473 12.479 152.113 14.8979 cv149.811 14.4521 147.4 14.3877 144.922 14.7593 cv137.192 15.3301 130.057 19.3296 124.333 26.3193 cv114.282 38.5952 108.881 59.5195 108.881 84.6187 cv108.881 92.3857 109.398 100.553 110.455 108.987 cv116.004 153.289 137.389 185.916 166.405 194.626 cv167.702 196.808 169.315 198.374 170.376 198.67 cv170.578 198.727 li170.779 198.67 li171.839 198.374 173.449 196.808 174.746 194.627 cv203.769 185.92 225.158 153.292 230.709 108.987 cv231.766 100.553 232.283 92.3872 232.283 84.6211 cv232.283 59.52 226.882 38.5947 216.83 26.3184 cvcp207.57 100.871 mo203.812 150.183 173.518 169.736 170.597 171.508 cv167.675 169.737 137.352 150.183 133.593 100.867 cv133.493 99.3828 133.413 97.5327 133.413 95.4277 cv133.413 85.0337 135.376 68.4331 146.68 59.0659 cv150.812 55.6421 155.477 54.1689 159.16 55.125 cv163.432 56.2349 167.467 56.9185 170.563 57.0015 cv170.59 57.0015 li173.5 56.9233 177.567 56.2749 181.995 55.125 cv185.683 54.1685 190.352 55.645 194.487 59.0703 cv198.661 62.5303 207.774 72.6489 207.774 94.9478 cv207.774 96.834 207.709 98.8076 207.57 100.871 cvcp195.125 58.3003 mo190.679 54.6147 185.802 53.1045 181.743 54.1572 cv177.395 55.2866 173.41 55.9233 170.577 56.0005 cv167.599 55.9194 163.545 55.231 159.411 54.1572 cv155.358 53.105 150.483 54.6157 146.042 58.2964 cv141.395 62.1465 130.784 74.0098 132.595 100.938 cv136.568 153.062 170.016 172.338 170.353 172.527 cv170.597 172.663 li170.841 172.527 li171.178 172.338 204.596 153.062 208.568 100.943 cv210.38 74.0142 199.771 62.1514 195.125 58.3003 cvcp148.061 33.3862 mo148.354 32.4458 148.755 31.895 149.079 31.895 cv149.401 31.895 150.281 32.439 150.574 33.3701 cv148.061 33.3862 licp150.385 37.8594 mo150.031 37.8623 149.304 37.8647 148.734 37.8691 cv148.872 37.3804 148.954 36.8384 148.954 36.3105 cv148.954 35.7749 148.87 35.2246 148.729 34.7305 cv149.314 34.7256 150.056 34.7236 150.419 34.7202 cv150.525 35.2075 150.613 35.6733 150.613 36.2573 cv150.613 36.7803 150.493 37.3428 150.385 37.8594 cvcp149.079 40.6191 mo148.767 40.6191 148.381 40.1064 148.091 39.2246 cv150.554 39.2085 li150.263 40.0996 149.393 40.6191 149.079 40.6191 cvcp149.079 30.9951 mo148.055 30.9951 147.362 32.1997 147.018 33.7847 cv146.483 34.1787 146.233 35.2427 146.233 36.3105 cv146.233 37.3975 146.492 38.4795 147.047 38.855 cv147.4 40.3774 148.083 41.519 149.079 41.519 cv150.275 41.519 151.502 39.874 151.765 37.897 cv151.866 37.3916 151.963 36.8203 151.963 36.2573 cv151.963 35.5239 151.854 34.9414 151.734 34.3921 cv151.446 32.5171 150.23 30.9951 149.079 30.9951 cvcp0 0 0 1 cmykf190.721 36.2573 mo190.721 35.6733 190.809 35.2075 190.915 34.7202 cv191.277 34.7236 192.02 34.7256 192.605 34.7305 cv192.464 35.2246 192.38 35.7749 192.38 36.3105 cv192.38 36.8384 192.463 37.3804 192.6 37.8691 cv192.029 37.8647 191.303 37.8623 190.949 37.8594 cv190.841 37.3428 190.721 36.7803 190.721 36.2573 cvcp190.779 39.2085 mo193.243 39.2246 li192.953 40.1064 192.567 40.6191 192.255 40.6191 cv191.941 40.6191 191.071 40.0996 190.779 39.2085 cvcp193.273 33.3862 mo190.76 33.3701 li191.053 32.439 191.934 31.895 192.255 31.895 cv192.578 31.895 192.979 32.4458 193.273 33.3862 cvcp189.6 34.3921 mo189.479 34.9414 189.371 35.5239 189.371 36.2573 cv189.371 36.8203 189.468 37.3916 189.568 37.897 cv189.832 39.874 191.059 41.519 192.255 41.519 cv193.252 41.519 193.934 40.3774 194.287 38.855 cv194.842 38.4795 195.102 37.3975 195.102 36.3105 cv195.102 35.2427 194.852 34.1787 194.316 33.7847 cv193.973 32.1997 193.279 30.9951 192.255 30.9951 cv191.104 30.9951 189.889 32.5171 189.6 34.3921 cvcpf170.577 13.6089 mo169.066 10.6963 167.016 8.79883 164.537 8.12012 cv164.964 6.67432 166.065 5.17529 167.11 5.17529 cv168.396 5.17529 169.142 5.86475 169.488 6.21045 cv169.537 6.31055 170.457 7.31641 170.577 7.44775 cv170.577 7.47119 li170.578 7.47021 170.585 7.46143 170.587 7.45947 cv170.589 7.46143 170.597 7.47021 170.598 7.47119 cv170.598 7.44775 li170.718 7.31641 171.638 6.31055 171.687 6.21045 cv172.033 5.86475 172.779 5.17529 174.064 5.17529 cv175.11 5.17529 176.211 6.67432 176.638 8.12012 cv174.159 8.79883 172.087 10.6963 170.577 13.6089 cvcp178.298 8.48779 mo177.998 6.521 176.316 3.67529 174.064 3.67529 cv172.239 3.67529 171.095 4.79248 170.602 5.41553 cv170.601 5.41406 170.599 5.41309 170.598 5.41162 cv170.598 5.38818 li170.595 5.39258 170.591 5.396 170.587 5.3999 cv170.583 5.396 170.58 5.39258 170.577 5.38818 cv170.577 5.41162 li170.576 5.41309 170.574 5.41406 170.573 5.41553 cv170.08 4.79248 168.936 3.67529 167.11 3.67529 cv164.858 3.67529 163.177 6.521 162.876 8.48779 cv162.764 9.21875 li163.494 9.34082 li166.266 9.8042 168.353 11.8228 169.875 15.5122 cv170.566 17.124 li170.566 17.1729 li170.577 17.1484 li170.587 17.1729 li170.587 17.124 li171.299 15.5122 li172.822 11.8228 174.909 9.8042 177.681 9.34082 cv178.411 9.21875 li178.298 8.48779 licpf118.829 98.7466 mo118.986 100.617 119.141 102.488 119.298 104.359 cv119.323 104.313 li119.405 105.088 119.504 105.857 119.599 106.627 cv119.585 106.651 li119.864 108.589 120.125 110.53 120.394 112.469 cv120.413 112.443 li121.64 120.071 123.316 127.824 125.98 135.091 cv125.989 135.087 li127.567 140.286 137.213 136.076 135.479 131.207 cv135.462 131.159 135.434 131.118 135.415 131.073 cv135.439 131.063 li135.439 131.062 135.438 131.062 135.438 131.061 cv132.506 123.186 130.5 114.738 129.44 105.899 cv128.917 101.919 128.655 97.8501 128.729 93.835 cv128.785 90.7969 127.886 88.644 124.462 88.2466 cv121.953 87.9551 118.574 89.4531 118.511 92.3594 cv118.579 94.5356 118.698 96.6426 118.843 98.7236 cv118.829 98.7466 licplevel3{gsaveclp[-8.55336 1.59125 -1.59125 -8.55336 126.55 112.853 ] concat/0 /Gradient get_res clonedict shfill grestore}iflevel3 not{gsave[-8.55336 1.59125 -1.59125 -8.55336 126.55 112.853 ] concatclp/0 /Gradient get_res exec grestore}ifnewpath131.741 136.035 mo130.227 136.689 127.554 136.867 126.864 134.93 cv126.174 132.977 128.177 131.118 129.773 130.425 cv131.288 129.773 133.965 129.604 134.649 131.529 cv135.346 133.485 133.338 135.345 131.741 136.035 cv123.621 89.1255 mo128.403 89.103 127.797 92.7817 127.85 96.2695 cv125.17 94.7227 121.648 95.312 119.654 97.6426 cv119.544 95.9067 119.452 94.1548 119.394 92.3555 cv119.429 90.8501 121.173 89.1348 123.621 89.1255 cv130.741 120.996 mo130.98 121.041 131.2 121.092 131.364 121.158 cv131.45 121.47 131.89 123.064 132.147 123.999 cv131.965 123.951 131.756 123.921 131.554 123.884 cv131.265 122.901 130.994 121.938 130.741 120.996 cv129.328 120.853 mo129.565 120.859 129.799 120.875 130.025 120.896 cv130.277 121.841 130.546 122.806 130.833 123.794 cv130.6 123.773 130.37 123.751 130.126 123.75 cv129.844 122.757 129.575 121.787 129.328 120.853 cv127.779 120.929 mo128.044 120.891 128.333 120.865 128.642 120.854 cv128.893 121.804 129.161 122.784 129.447 123.794 cv129.165 123.815 128.887 123.859 128.603 123.913 cv128.313 122.889 128.035 121.891 127.779 120.929 cv126.345 121.427 mo126.592 121.287 126.85 121.164 127.129 121.07 cv127.385 122.032 127.661 123.03 127.951 124.053 cv127.942 124.055 127.934 124.055 127.926 124.058 cv127.666 124.17 127.422 124.303 127.186 124.445 cv126.887 123.408 126.607 122.402 126.345 121.427 cv125.255 126.268 mo125.031 126.576 124.813 126.911 124.601 127.279 cv124.292 126.145 123.832 124.446 123.765 124.2 cv123.872 123.998 124.094 123.616 124.417 123.183 cv124.679 124.182 124.961 125.212 125.255 126.268 cv124.942 122.556 mo125.182 122.298 125.453 122.042 125.761 121.81 cv126.025 122.792 126.306 123.798 126.607 124.843 cv126.313 125.074 126.034 125.335 125.77 125.631 cv125.477 124.576 125.201 123.553 124.942 122.556 cv125.895 112.941 mo126.165 112.875 126.454 112.828 126.757 112.795 cv126.957 113.801 127.179 114.841 127.425 115.924 cv127.122 115.956 126.836 116.003 126.569 116.061 cv126.321 114.982 126.098 113.943 125.895 112.941 cv124.444 113.504 mo124.708 113.356 124.979 113.235 125.256 113.135 cv125.457 114.131 125.681 115.163 125.926 116.234 cv125.65 116.326 125.38 116.46 125.128 116.6 cv124.878 115.53 124.65 114.499 124.444 113.504 cv123.18 118.196 mo122.968 118.437 122.758 118.696 122.557 118.993 cv122.325 117.869 121.995 116.251 121.94 115.985 cv122.111 115.695 122.307 115.425 122.514 115.167 cv122.718 116.146 122.939 117.153 123.18 118.196 cv123.065 114.545 mo123.311 114.303 123.573 114.086 123.846 113.889 cv124.053 114.881 124.281 115.908 124.532 116.972 cv124.278 117.149 124.008 117.371 123.734 117.625 cv123.491 116.566 123.269 115.54 123.065 114.545 cv128.808 115.889 mo128.567 115.877 128.33 115.875 128.097 115.882 cv127.85 114.798 127.627 113.758 127.426 112.752 cv127.68 112.748 127.933 112.749 128.18 112.765 cv128.367 113.782 128.575 114.822 128.808 115.889 cv130.188 116.072 mo129.963 116.02 129.732 115.982 129.5 115.951 cv129.268 114.89 129.06 113.858 128.87 112.846 cv129.133 112.889 129.381 112.943 129.595 113.014 cv129.672 113.412 130.019 115.19 130.188 116.072 cv120.517 106.851 mo120.62 106.686 120.786 106.473 121.002 106.24 cv121.138 107.323 121.299 108.446 121.485 109.612 cv121.313 109.791 121.14 109.979 120.97 110.181 cv120.815 109.071 120.654 107.963 120.517 106.851 cv122.852 108.448 mo122.597 108.622 122.335 108.83 122.071 109.061 cv121.888 107.888 121.735 106.763 121.604 105.674 cv121.845 105.47 122.107 105.268 122.399 105.086 cv122.521 106.161 122.672 107.281 122.852 108.448 cv124.307 107.71 mo124.056 107.786 123.772 107.906 123.467 108.072 cv123.294 106.919 123.148 105.813 123.031 104.748 cv123.31 104.62 123.601 104.527 123.898 104.459 cv124.009 105.503 124.143 106.583 124.307 107.71 cv125.849 107.545 mo125.521 107.543 125.223 107.559 124.96 107.586 cv124.798 106.465 124.666 105.394 124.557 104.356 cv124.869 104.326 125.171 104.311 125.45 104.315 cv125.558 105.353 125.688 106.424 125.849 107.545 cv127.374 107.656 mo127.091 107.618 126.807 107.587 126.525 107.57 cv126.364 106.456 126.232 105.39 126.124 104.358 cv126.446 104.396 126.746 104.456 127.03 104.532 cv127.126 105.553 127.237 106.592 127.374 107.656 cv128.808 107.972 mo128.578 107.893 128.322 107.831 128.058 107.775 cv127.923 106.745 127.813 105.741 127.718 104.752 cv127.971 104.846 128.212 104.949 128.443 105.058 cv128.489 105.428 128.688 107.021 128.808 107.972 cv127.884 97.6538 mo127.912 98.4795 127.954 99.311 128.008 100.146 cv127.813 100.042 127.6 99.9429 127.376 99.8501 cv127.334 98.8931 127.307 97.9487 127.291 97.0132 cv127.503 97.1289 127.701 97.2549 127.871 97.3979 cv127.874 97.4502 127.879 97.5439 127.884 97.6538 cv125.681 96.4746 mo126.013 96.5327 126.33 96.6099 126.623 96.7139 cv126.636 97.666 126.662 98.6289 126.702 99.6035 cv126.4 99.5093 126.082 99.4312 125.753 99.3711 cv125.711 98.3828 125.689 97.4209 125.681 96.4746 cv124.114 96.3779 mo124.423 96.3652 124.724 96.3711 125.017 96.3931 cv125.024 97.3354 125.044 98.2935 125.084 99.2783 cv124.788 99.2495 124.487 99.2363 124.182 99.2456 cv124.142 98.2681 124.122 97.3159 124.114 96.3779 cv122.552 96.6621 mo122.831 96.563 123.128 96.4849 123.451 96.4385 cv123.459 97.3755 123.479 98.3267 123.519 99.3042 cv123.233 99.3521 122.936 99.4404 122.631 99.5703 cv122.586 98.5776 122.563 97.6113 122.552 96.6621 cv121.003 97.5654 mo121.267 97.3384 121.562 97.1318 121.892 96.9521 cv121.905 97.9141 121.934 98.8936 121.981 99.9004 cv121.692 100.067 121.406 100.261 121.13 100.478 cv121.068 99.4805 121.029 98.5132 121.003 97.5654 cv120.589 102.225 mo122.501 99.9307 125.589 99.5059 128.077 101.264 cv128.151 102.178 128.245 103.085 128.34 103.993 cv125.491 102.826 122.502 103.38 120.365 105.612 cv120.263 104.724 120.169 103.83 120.081 102.935 cv120.225 102.693 120.396 102.455 120.589 102.225 cv119.953 101.585 mo119.88 100.724 119.813 99.8623 119.747 99.0005 cv119.923 98.7451 120.124 98.4727 120.357 98.2021 cv120.389 99.1196 120.436 100.061 120.501 101.026 cv120.308 101.211 120.124 101.401 119.954 101.601 cv119.954 101.596 119.954 101.591 119.953 101.585 cv121.14 111.392 mo122.871 108.982 126.083 107.341 128.971 109.049 cv129.117 110.037 129.273 111.022 129.444 112.002 cv126.518 111.344 123.532 112.343 121.699 114.732 cv121.501 113.628 121.315 112.514 121.14 111.392 cv122.803 120.237 mo124.25 117.397 127.41 116.106 130.462 117.077 cv130.69 118.104 130.931 119.127 131.187 120.141 cv128.073 119.425 125.235 120.313 123.443 123.001 cv123.222 122.085 123.008 121.165 122.803 120.237 cv133.858 129.415 mo131.032 128.121 127.377 130 126.17 132.698 cv125.729 131.338 125.315 129.954 124.913 128.555 cv125.596 127.163 126.644 125.455 128.218 124.93 cv129.535 124.531 131.28 124.495 132.556 125.074 cv133.007 126.566 133.478 128.047 133.988 129.506 cv133.939 129.48 133.909 129.438 133.858 129.415 cv135.479 131.207 mo135.462 131.159 135.434 131.118 135.415 131.073 cv135.439 131.063 li135.439 131.062 135.438 131.062 135.438 131.061 cv135.438 131.061 li132.506 123.186 130.5 114.738 129.44 105.899 cv128.917 101.919 128.655 97.8501 128.729 93.835 cv128.785 90.7969 127.886 88.644 124.462 88.2466 cv121.953 87.9551 118.574 89.4531 118.511 92.3594 cv118.579 94.5356 118.698 96.6426 118.843 98.7236 cv118.829 98.7466 li118.986 100.617 119.141 102.488 119.298 104.359 cv119.323 104.313 li119.405 105.088 119.504 105.857 119.599 106.627 cv119.585 106.651 li119.864 108.589 120.125 110.53 120.394 112.469 cv120.413 112.443 li121.64 120.071 123.316 127.824 125.98 135.091 cv125.989 135.087 li127.567 140.286 137.213 136.076 135.479 131.207 cv0 0 0 1 cmykf222.321 98.7236 mo222.466 96.6426 222.585 94.5356 222.653 92.3594 cv222.59 89.4531 219.211 87.9551 216.701 88.2466 cv213.277 88.644 212.379 90.7969 212.436 93.835 cv212.509 97.8501 212.247 101.919 211.724 105.899 cv210.664 114.738 208.658 123.186 205.726 131.061 cv205.726 131.062 205.725 131.062 205.725 131.063 cv205.749 131.073 li205.73 131.118 205.702 131.159 205.686 131.207 cv203.951 136.076 213.597 140.286 215.175 135.087 cv215.184 135.091 li217.848 127.824 219.524 120.071 220.751 112.443 cv220.771 112.469 li221.039 110.53 221.3 108.589 221.579 106.651 cv221.565 106.627 li221.66 105.857 221.759 105.088 221.841 104.313 cv221.866 104.359 li222.023 102.488 222.178 100.617 222.335 98.7466 cv222.321 98.7236 licplevel3{gsaveclp[8.55336 1.59125 1.59125 -8.55336 214.613 112.852 ] concat/0 /Gradient get_res clonedict shfill grestore}iflevel3 not{gsave[8.55336 1.59125 1.59125 -8.55336 214.613 112.852 ] concatclp/0 /Gradient get_res exec grestore}ifnewpath209.423 136.035 mo207.826 135.345 205.818 133.485 206.515 131.529 cv207.199 129.604 209.877 129.773 211.391 130.425 cv212.986 131.118 214.99 132.977 214.3 134.93 cv213.609 136.867 210.938 136.689 209.423 136.035 cv217.543 89.1255 mo219.991 89.1348 221.735 90.8501 221.771 92.3555 cv221.712 94.1548 221.62 95.9067 221.51 97.6426 cv219.516 95.312 215.994 94.7227 213.314 96.2695 cv213.367 92.7817 212.761 89.103 217.543 89.1255 cv210.423 120.996 mo210.17 121.938 209.899 122.901 209.61 123.884 cv209.408 123.921 209.199 123.951 209.017 123.999 cv209.274 123.064 209.714 121.47 209.8 121.158 cv209.964 121.092 210.184 121.041 210.423 120.996 cv211.836 120.853 mo211.589 121.787 211.32 122.757 211.038 123.75 cv210.794 123.751 210.564 123.773 210.331 123.794 cv210.618 122.806 210.887 121.841 211.139 120.896 cv211.365 120.875 211.599 120.859 211.836 120.853 cv213.385 120.929 mo213.129 121.891 212.852 122.889 212.562 123.913 cv212.277 123.859 211.999 123.815 211.717 123.794 cv212.003 122.784 212.271 121.804 212.522 120.854 cv212.831 120.865 213.12 120.891 213.385 120.929 cv214.819 121.427 mo214.557 122.402 214.277 123.408 213.979 124.445 cv213.742 124.303 213.498 124.17 213.238 124.058 cv213.23 124.055 213.222 124.055 213.213 124.053 cv213.503 123.03 213.779 122.032 214.035 121.07 cv214.314 121.164 214.572 121.287 214.819 121.427 cv215.909 126.268 mo216.203 125.212 216.485 124.182 216.747 123.183 cv217.07 123.616 217.292 123.998 217.399 124.2 cv217.332 124.446 216.872 126.145 216.563 127.279 cv216.351 126.911 216.133 126.576 215.909 126.268 cv216.222 122.556 mo215.963 123.553 215.688 124.576 215.395 125.631 cv215.13 125.335 214.852 125.074 214.557 124.843 cv214.858 123.798 215.139 122.792 215.403 121.81 cv215.711 122.042 215.982 122.298 216.222 122.556 cv215.27 112.941 mo215.066 113.943 214.843 114.982 214.595 116.061 cv214.328 116.003 214.042 115.956 213.739 115.924 cv213.985 114.841 214.207 113.801 214.407 112.795 cv214.71 112.828 214.999 112.875 215.27 112.941 cv216.72 113.504 mo216.514 114.499 216.286 115.53 216.036 116.6 cv215.783 116.46 215.514 116.326 215.238 116.234 cv215.483 115.163 215.707 114.131 215.908 113.135 cv216.185 113.235 216.456 113.356 216.72 113.504 cv217.984 118.196 mo218.225 117.153 218.446 116.146 218.65 115.167 cv218.857 115.425 219.053 115.695 219.224 115.985 cv219.169 116.251 218.839 117.869 218.607 118.993 cv218.406 118.696 218.196 118.437 217.984 118.196 cv218.099 114.545 mo217.896 115.54 217.673 116.566 217.43 117.625 cv217.156 117.371 216.886 117.149 216.632 116.972 cv216.883 115.908 217.111 114.881 217.318 113.889 cv217.591 114.086 217.854 114.303 218.099 114.545 cv212.356 115.889 mo212.589 114.822 212.797 113.782 212.984 112.765 cv213.231 112.749 213.484 112.748 213.738 112.752 cv213.537 113.758 213.314 114.798 213.067 115.882 cv212.834 115.875 212.597 115.877 212.356 115.889 cv210.976 116.072 mo211.146 115.19 211.492 113.412 211.569 113.014 cv211.783 112.943 212.031 112.889 212.294 112.846 cv212.104 113.858 211.896 114.89 211.664 115.951 cv211.432 115.982 211.201 116.02 210.976 116.072 cv220.647 106.851 mo220.51 107.963 220.349 109.071 220.194 110.181 cv220.024 109.979 219.852 109.791 219.679 109.612 cv219.865 108.446 220.026 107.323 220.162 106.24 cv220.378 106.473 220.544 106.686 220.647 106.851 cv218.313 108.448 mo218.492 107.281 218.643 106.161 218.765 105.086 cv219.057 105.268 219.319 105.47 219.56 105.674 cv219.429 106.763 219.276 107.888 219.093 109.061 cv218.829 108.83 218.567 108.622 218.313 108.448 cv216.857 107.71 mo217.021 106.583 217.155 105.503 217.266 104.459 cv217.563 104.527 217.854 104.62 218.133 104.748 cv218.016 105.813 217.87 106.919 217.697 108.072 cv217.392 107.906 217.108 107.786 216.857 107.71 cv215.315 107.545 mo215.476 106.424 215.606 105.353 215.714 104.315 cv215.993 104.311 216.295 104.326 216.607 104.356 cv216.498 105.394 216.366 106.465 216.204 107.586 cv215.941 107.559 215.644 107.543 215.315 107.545 cv213.79 107.656 mo213.927 106.592 214.038 105.553 214.134 104.532 cv214.418 104.456 214.718 104.396 215.04 104.358 cv214.932 105.39 214.8 106.456 214.639 107.57 cv214.357 107.587 214.073 107.618 213.79 107.656 cv212.356 107.972 mo212.476 107.021 212.675 105.428 212.721 105.058 cv212.952 104.949 213.193 104.846 213.446 104.752 cv213.351 105.741 213.241 106.745 213.106 107.775 cv212.842 107.831 212.586 107.893 212.356 107.972 cv213.28 97.6538 mo213.285 97.5439 213.29 97.4502 213.293 97.3979 cv213.463 97.2549 213.661 97.1289 213.873 97.0132 cv213.857 97.9487 213.83 98.8931 213.788 99.8501 cv213.564 99.9429 213.351 100.042 213.156 100.146 cv213.21 99.311 213.252 98.4795 213.28 97.6538 cv215.483 96.4746 mo215.475 97.4209 215.453 98.3828 215.411 99.3711 cv215.082 99.4312 214.764 99.5093 214.462 99.6035 cv214.502 98.6289 214.528 97.666 214.541 96.7139 cv214.834 96.6099 215.151 96.5327 215.483 96.4746 cv217.05 96.3779 mo217.042 97.3159 217.022 98.2681 216.982 99.2456 cv216.677 99.2363 216.376 99.2495 216.08 99.2783 cv216.12 98.2935 216.14 97.3354 216.147 96.3931 cv216.44 96.3711 216.741 96.3652 217.05 96.3779 cv218.612 96.6621 mo218.602 97.6113 218.578 98.5776 218.533 99.5703 cv218.229 99.4404 217.931 99.3521 217.646 99.3042 cv217.685 98.3267 217.705 97.3755 217.713 96.4385 cv218.036 96.4849 218.333 96.563 218.612 96.6621 cv220.161 97.5654 mo220.135 98.5132 220.096 99.4805 220.034 100.478 cv219.758 100.261 219.472 100.067 219.183 99.9004 cv219.23 98.8936 219.259 97.9141 219.272 96.9521 cv219.603 97.1318 219.897 97.3384 220.161 97.5654 cv220.575 102.225 mo220.769 102.455 220.939 102.693 221.083 102.935 cv220.995 103.83 220.901 104.724 220.799 105.612 cv218.662 103.38 215.673 102.826 212.824 103.993 cv212.919 103.085 213.013 102.178 213.087 101.264 cv215.575 99.5059 218.663 99.9307 220.575 102.225 cv221.211 101.585 mo221.21 101.591 221.21 101.596 221.21 101.601 cv221.04 101.401 220.856 101.211 220.663 101.026 cv220.729 100.061 220.775 99.1196 220.807 98.2021 cv221.04 98.4727 221.241 98.7451 221.417 99.0005 cv221.352 99.8623 221.284 100.724 221.211 101.585 cv220.024 111.392 mo219.849 112.514 219.663 113.628 219.465 114.732 cv217.633 112.343 214.646 111.344 211.72 112.002 cv211.891 111.022 212.047 110.037 212.193 109.049 cv215.082 107.341 218.293 108.982 220.024 111.392 cv218.361 120.237 mo218.156 121.165 217.942 122.085 217.721 123.001 cv215.929 120.313 213.091 119.425 209.978 120.141 cv210.233 119.127 210.474 118.104 210.702 117.077 cv213.754 116.106 216.914 117.397 218.361 120.237 cv207.306 129.415 mo207.255 129.438 207.225 129.48 207.176 129.506 cv207.687 128.047 208.157 126.566 208.608 125.074 cv209.884 124.495 211.629 124.531 212.946 124.93 cv214.52 125.455 215.568 127.163 216.251 128.555 cv215.849 129.954 215.436 131.338 214.994 132.698 cv213.787 130 210.133 128.121 207.306 129.415 cv205.686 131.207 mo203.951 136.076 213.597 140.286 215.175 135.087 cv215.184 135.091 li217.848 127.824 219.524 120.071 220.751 112.443 cv220.771 112.469 li221.039 110.53 221.3 108.589 221.579 106.651 cv221.565 106.627 li221.66 105.857 221.759 105.088 221.841 104.313 cv221.866 104.359 li222.023 102.488 222.178 100.617 222.335 98.7466 cv222.321 98.7236 li222.466 96.6426 222.585 94.5356 222.653 92.3594 cv222.59 89.4531 219.211 87.9551 216.701 88.2466 cv213.277 88.644 212.379 90.7969 212.436 93.835 cv212.509 97.8501 212.247 101.919 211.724 105.899 cv210.664 114.738 208.658 123.186 205.726 131.061 cv205.726 131.061 li205.726 131.062 205.725 131.062 205.725 131.063 cv205.749 131.073 li205.73 131.118 205.702 131.159 205.686 131.207 cv0 0 0 1 cmykf128.337 134.327 mo128.027 133.456 128.863 132.277 130.204 131.697 cv131.543 131.114 132.881 131.349 133.191 132.221 cv133.5 133.091 132.664 134.27 131.324 134.851 cv129.983 135.434 128.646 135.198 128.337 134.327 cv128.337 134.327 licpfgsave % PSGState128.337 134.327 mo128.027 133.456 128.863 132.277 130.204 131.697 cv131.543 131.114 132.881 131.349 133.191 132.221 cv133.5 133.091 132.664 134.27 131.324 134.851 cv129.983 135.434 128.646 135.198 128.337 134.327 cv128.337 134.327 licpclpgrestore % PSGState128.337 134.327 mo128.027 133.456 128.863 132.277 130.204 131.697 cv131.543 131.114 132.881 131.349 133.191 132.221 cv133.5 133.091 132.664 134.27 131.324 134.851 cv129.983 135.434 128.646 135.198 128.337 134.327 cv128.337 134.327 licpfgsave % PSGState128.337 134.327 mo128.027 133.456 128.863 132.277 130.204 131.697 cv131.543 131.114 132.881 131.349 133.191 132.221 cv133.5 133.091 132.664 134.27 131.324 134.851 cv129.983 135.434 128.646 135.198 128.337 134.327 cv128.337 134.327 licpclpgrestore % PSGState212.826 134.327 mo213.137 133.456 212.301 132.277 210.961 131.697 cv209.621 131.114 208.283 131.349 207.973 132.221 cv207.664 133.091 208.5 134.27 209.84 134.851 cv211.182 135.434 212.518 135.198 212.826 134.327 cv212.826 134.327 licpfgsave % PSGState212.826 134.327 mo213.137 133.456 212.301 132.277 210.961 131.697 cv209.621 131.114 208.283 131.349 207.973 132.221 cv207.664 133.091 208.5 134.27 209.84 134.851 cv211.182 135.434 212.518 135.198 212.826 134.327 cv212.826 134.327 licpclpgrestore % PSGState%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]][/Gradient [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.1%%For: (Designer) (Universiy of Wisconsin - UCOMM)%%Title: (UW logo 4C_Gradient.eps)%%CreationDate: 4/13/07 2:03 PM%AI9_DataStream%Gb!Q;kuQP2f'%M_^Oq(sR)rBC(.fWn!l>eO5R*%Lbn,gC[Q31,qf/8,m_,YHQ"3IPLU4S,]6^#iZ<aJMcU1\b=6dMBRZF$:;YT)7%=f**?e^Uq:Bk7aobiEe+O!h&Y\4o7F/0,ZF<6)G@[951_B##c`6"boQhc77I\*$e)E89b;>5`o\g[=e3le1jdohP4RILj3CZWF8P%]DJdJWEjF)ATD"e`_Gj*h5YUEch0TT/gq!8l:pO1Z/%NiHbO@if!DAc+BZ7L*ma`1(%dB5kMY/kU]&b[*CHI$k3b&'grCM<)uBGG%CG:9]^dK$`Z$^Mu=+9HG]$Jk,!6,!/5>GDVO8VAJ5'ZF;IP$DbnljVN8jUjtX\piIpk,R!r:/@sg!O4Ck,;gsa(>0b"b+nX599a0%YaOCKEgkP3R\#LP#H^`B)\7=/`6\'?pu,8hE3X&XkEg@?d%YU/'KCfJ#"N(BIhs\FA&[[I<*`AkrtSJK,BF3XiRh;V<Y3,mHiNkE%Im(7>[16j#GjGjMr<L(,a,^[Y@U$O^l/VfZ)47W1QD8Kaa]lC-47>9A@&N6+*WF_X\(PN6+aW%sg3#LeGBJf?5Mk>"hRd\8!!0_!%2`uriXK@;N!$Cq#J%'b%-ujd4QWE:NHU5!goW7;U=]hP1C0?=[J?8Zbi>9Q(7\g!.L\NlYm.P21[N>Uo*;(BA+$8eWP1;CL8_^r!%VN496R^Mr52#W"XrTC]jnJT2Q#D6&IbSW%GI,Oao.#!:P(phq1QFkJQpOKca'&[1'n?1T\kJ):lVdJBR[hh5XqY/6C(L"^B6(aQ4%qSg0/DSO"`gV*%0bAQLGS&oS+]=4p/EIE?Sf'5*h93D;Us31$e!4r4*=,Xs'ouEDq`;\&.La)THUYA#8`W/1<!<6u8Di]P%k`/CW%\4sYQWV=tnaI[OdD/Xm>T=ekF0L;uBJ&`DHoKhZ=_fpEO,gd_s&s1(^h'gW2IK]H9^Ua)Z^"n.Mn'tbd*ZIrY7/ZJ4`.&_90VIrB%bQ"15l2H/>[/Bgs[bH8t5Ps(]6&t9E_.07r3rQZTBK_FEXjXc_=Xn8-6*$Qk>4(a91eA3UmkhB.lFiO[Y47nI*]m)h&>Efe)nXEL%W$c+O+6kL2RdT+-7P.D7TQ.U#WV<\$pUWcd"8E9%/BEu6bj3cg!QHOo^9t?WbEb1%A)-M&Rub?`f<b;E:8e*HC1co<#\:kO-5$[`%>g8S'R3*:XcL@G9s&kbN)7ILVXNW/qb%drN10%=3<EBX[<%ZX$*Hb",WF`K3<n3Y9BM;>^:"(se1Gqh32+QEL8m5AuBN;13.ltl;%WikTtDWms8l*g$D>C&jolP7+5f*oW+L2(CVDA\+B=G@8ges9/gb!s@K)DtGJRAlXDWLJWVR[.ZW:<)'E94lkYQrUJ).2K6h9=&``%YY<6GCs0)lXHHSl.TY*"fo"$je^eQm2JgjNCtj."/\>P[m>>2WCQ@DYN2&G&UH>+^3gO8;NjIi3S?c(5W_RD(fj\1NQF<W.)-c6h%[:O8:>?b=.Xn#M(X1D:].4&"m93On?)'uV"Q0aZt.;b>BV/iP5Wg7C2V9I(s=Y&fLUMQ6uZ<_Xr>NJbn>cs<lj]Y*PY_lW3.XK(4%QkcZ2=.IE6V,SmF.[=bF<`Q.N;cTl%<Nd<@ZYEM-W`.`RQE'%]V-:"PC.\q1WWp(@K+4ltRVOVE)N7pRYA:Pi#2i/BVUXWr/a6[p%COh->qAfD?deP4r9-^"EE1<3jRBY[@>t&oNUDE\h;LbO#L[-QN-VOFeZ:Oo/iP2$X2u'uoMK<d@e,<@'rfLL4jF7.sWP>hG^Qu1E%6_Kb3C8Q7P#V'N2D5(R%19M,]"FiMT\=25[`n0Z3s+Z#NJ\V*`d(cl4p)s7mQ]c1eo^X8[4*B6#'KP!!aCL2_/Gq_,&6@jfDr_gt%lYY"P=u;)rgJ",`O&P=VL6V\tL:!9E[g-Ge"AHgd95#kln"DCt%N@Wl0FtgQGj<&qqGnMEPW:KUKP.3ukJnle45F0]#?UV-j(&91%3\>)##uWO4s25'aG4U1d(ci!)@lbEIF`!R>I8C.U/@tic]Z#@`2XoMf]t`gh9")5;5NQ<!QM"FE^7F)`GOFA(1rp_^?Vjq.6@5"M%Q9[_I++W%oDtQ@lS[JG[aB"dkKDOtFqf2*aD]Bfl1UG&a<ZSo'WAg<ZNT,-V>jjn2`ot0Z#GG1@ck/5CC_8l(k0%7cK+%cpFPAqg%q1'.'DS6LjfonI1'0WSY69Wa`RdS<?_$1!71OG&2!,;,Y=S6jZaTCFCqCeN(F;fX](k$44qd-0oC'RATD7AA;AfGCqM@"n0Zt%j@%'Y\G![8Jorn$Q>iP\kb!Z.l,V&iRHMP9quhWAK0gD7p8:IiPhaO)N?IhqCLWHTLAa9biM>_OL`tN6lF'7@p#oLejRZj/Mo6J15Y)%`!,r\O:PuKciWml71%t,dZ!r;RM,DTk\]ej>pb%G9utGjJ:?,Qm!*tpfDR$E2EdL-Z?P0jHIVQ??XQmNT&%s`;f&h8$)tGbldbf<%!Q.];m@F(RFq&b7ol_j6qGhn\h/^9bW4-agjgK2^ZT:n_N]Oi#nsj-PgQ.n+(;rf=WRXerGQ>rsR%)/K)stZ^^`=-"rs%8hLSaa/%^Na`Y;>77pmfhC=pn2kWY^b;B[N`7(XSC]!m10',"s*@XDr1ce,,C4qVn8<^s&,o;_dg=3F",T">jefja5HD&JQM[ASc6l@oj7ZN%7"]O/^Zlk)+F$,J?,n0]0p@(E?iNcCVpk%?;J]#G\./#<d6$BsS.T4*\usdXP&2bhg&O-`$Zh=iH@9i")'/aA42DPR,1ZN3OVO`Z%r/moR^PU=hs%6#Nf^qCedC?gnKfK(<SEulc_tAI!`??`(5[nHTnK4Y:R*1!,<;qB?df/(;remWCJ!^Z@mDm6HG$aO7Y]5T6m1+Z/%mC2Kf4=HQYP_[$LcZ3Q.C:<8n:N6d@f4/mkOCiX0iI?#BR`5\nRHCGJ4gZ:!+4>*sYN:7W?!_utLirZeAk@LPVcU3:fsWVM.K</^%3<(K35B4?bmTZmBU@a]M\E!njoUh_lF)+TjJg*&=4Idk`Z/Bqud\)fRQpUjD)r4i,eJrc&A;c6!_)OZk/u>;'U;]U*=h&63^-$La%s22l6@TpHeqi:b"(8maCZYo6Gn;sBh?]q07\lHLBDn"N97^i20.<1@G`_3r6G7_*8gGCti6#o2Ba0t1#NGA'*s85iH1Bgdb3MKLq%6NLUH)J[5#QFk0O:&f<R#EJtrTi+^HW%FdAc.3n]fd)[t4&&i!aJC_>h3S^J?L%9ea3It77'iI!FrE4d\rCXE>YW!lIg+Z?]0[Gn%T@Ai*dZR)-mJ.qe7;K&\n`FG"oB1GgW?7XQMT4MS;m_g%SYEMSlR3+OlO4-Fp+pZppiGJ4?@$g$ch/4.XT*J0d\7Y6!I`Ue^KU"-%*9e8W+-@9b2X.U:!S@<CQnpQc-ZcKAmjI-@[d+@C)jo!Lc*4[g=IL#Met?=KU#'VY=p_foNEQGVDKfK+hSDVR(2RPNnb@UK'E[4r%9o0c&>4m38GQpT2U0?E/>K4%&IJ^(q)['FF$12sW+h8nT[)=-"09$*86k/u!#>#AnDaMAiLT<c!Fl^?f:rg7]Y<Q3>:oh4;:*\`I%GoI@mE)/ZD<n+M5l*u;oKN;=t\a,Q%+JQRM%c)#b7cJcAUCO@iBVRu4XsbdKl6X[W>Dm+m?7%LWBd-JjG>_5qV)bPO^'e8b8EtTe%"Z@lG:i%?\'l98:OTZ*[,Z/D=Z)qPHOg:J:)EqU7\0P5p.l\alH_Q5BUn]5jf3"1fQK=(l>8AhG)@j+`OA:Ha(ttn_7e/G`F9Q-W%h\t27+k1=1Do>\@&J3h(F>lI=ro8E>K^+1!$2\XpTf98cf2j",gXZ21O+ZVA!oLqn]M4cu8"U[-:M+g1G-@"/111KVn%Wt.Zj(@2%"a3=L:m*<cm:"_9[+uh:KG@1hg2^D1r<P?G,PRb3+%OU?Fsn&a2H&1[LY;(JX^0-[TZHi+*!WnMN!S9tV[aCoG_!OS9B8?]!cRHQ%^JVEh:KL(Z:uEG_j")mJ(dFajSFB$"1o[6H]KDS>;a!;b]f=k"p$-enEL4_\)Jab1qVd*XA4ns)h9jFI9#".52;##1o_8J9g.=P,%Ct8\'\(>QW^qJfp-u/(#<YQa-l/#liZ%U,lo5!R>'67iBOLpIn(hJhgE?Zc?-uj?Jk,E]AnpU"l;GN$,:,epjpA.^V^m4KCH#!'Y%"o(<anCVYAs6UorYiP9m.tr:r!5(r<#bBVSMK7cH_?WRafV\+*O8b"OmWu"e2bZ]!\#9@\GlB:C`'Qi?;$njP0p"J8[Q8giq_+D$%jQ=PVI8tL0AhpWZC-8nWBCE#]\MXa7C@X)nnd\-8@H=l40%rmCNP$4pgM11JoWbVsCg:;2pURiI,>LfLV4%i(P\sYU8/s(F4C2e\%mFKI_=hu$,HN;A^@A6S<dPP"ECJ81h%GA'2@NNp<OF!Wh?+@;l\MeKC6Tf,uF\:s>Ks"%(WA(rWCUu;7'a(g%E[R]F]h;)4aEJmi%W=h4:hhjbZOWUq%[-1BfF.'KTkt-sqDCjqPKpd.DfdKW[0S%+LL1uU:<9f*5ALn^UhPgZGJ0%4Q:N05F,]!QV]Hm)iQojQs\4poY%dP0TY*NMPt.?,T\C%qp+I2luAnR9!,8Es(#;i_ikSe8;l[>.^bRhEO<e'(<Q59%Tr<-o;a(lQQej!_>e\3I,nZJ0ZI@ZcOYO*hdF%Yl,34@&43R_(/Va=*K/;'G2rb:hefJ/ar,]7KrX*@XV9pA](H/l'k2X2jEJ%e'I[4%;4k[+9)SJA8AXLh0f5$EU@tPCOOZrVY&Qe%9rm(8D:CZ%m>F3<V;DMb\$f=!m+7"eG%"GfRW$_MY#=-Pq26hC=WM"T]_#4mC[]!?CgPm4Q/]r;WdjrXr^#:$)jDgrcM#`4_TA^%%j\EA?n:"A=5+S&OF,M\aYB-`TIs0sT)MQu%l:pljgo=O>S]gKo@4_bp.VS_)grdX7Q^eoS@A%JM/:Dns.=ZUY;m)aW`8?#nfqc"i%MLFM"rc\,ne-+@S[qhNj2=Fe`bN*''(bOdhT3:Vqs5&KmmC/@?mCDt;?gSrFh:gW;[grjjnB^J[I!\k5(V\eqofi#_pO7NM5#R:7%BqFHZK>K$afPU=\^O4[@N?%TBI;('P:fI<kS;S?Y[Wc"^q$*SsLD>F_QBi<3?eYBSKD$+abu3>i3u_P/c:)DC*/0-tQS)?'1l`'?%#49,&?I(:f50j+e)H<[bRic,E2&G-&+7:,cjG:5/=$Mu(=m9__9'9tCla`e2K9OAB[hlXQTg8jqd'/F8p@X'J%6j7ZCoC][d&!H'%h4FYDjc%#"I&;+Cc?0"*SA#j6G]>H[Wqr-kh53JhRVo1B6%AQV?/2$i%(^mtS2]nprh,[L2!jnhfjX6?<q5U"0m_3-F%a4GqFWtu%csuA[7M5DW[+>69`YFCLe9G)!/@Dp]#M#/iXaL'9/?KUUO\`B&/A.Ei#>p+'[Crc?QpJuNS7*A+0nWfg!%-=/B4m?BS_nnjl2?(s%iB2/-mB?4Ph"L0K?^iQ.n3O*>T5&mdncmDnobTirdKV?8%D$WPCqMC8-nqUm&fu.Ep[FLdoP,s">%o<r)25qOJ(VP?^R(2`kH@qY%TY'f6pAS(0NZ@\ih:hB(Kl[P1]2s6*=cF<ka,4oKs8!Kokalt2?`S%h71BUeEjkkT)nX\M"7tl'gn5DD6Fh96#Mi`k3,@A%J"T(`%\aWcUY!;Sh#JJ3fDI2<,4]&kpD3gn#c/`9blH6T^G-;mr_;A>?Y%%_81Oli?MAc&aWVidr?D0Xsa$OQ)4F_`^cQ0/X%XNPOGnW8Q%\$_X=NuBj=_dO(?hpqZtoENpmg&0silYb4F^#%`%Jf+,\>7(teMR-R<B[BG5e`R1l6*@TOHdg+E%_=\Xkg?=+lZMmk1CX,Z(E.C,%]mI.:#(:NXrBYu^j06)++7ia%X/.>T)e9L-9(h\o2@d;V/5m)2hK?19a"V1P&Dl8YohU,C`H0.&=$s'.Z+2'gP4ie,]GG+4Xd)]U%i=?p83'=.-S,[T<ZNGi/RI^Z;;+R6U91KM?XdeW`$_\%/e,<6oie)-?n*^Lj(Cp/b6^M=5W)1NGq,__.4K#?+DM<6gr;57G3N`,T%')elF"@TS)[,QQ%!AYWWqS*6FV1*Qg<'MF(q<p\^_"UXIrb"s%?\]NspJ#6!A5eQcPq`%2QEoE'1ZQ2%.gL.Qm'pE'b#)[C,js8'%jg=qB&3DfJqi=b=oO;5]mam&2pA#gQpT(!Xcb1+l?UOBq:?fI:=lT0a::6j%SBlWC^P9j(s7&Og\6n!LqNZ6ja1h-3S[0(*oqCs$%XHqmq4]]9M=MNjErM0;%r4_Ocf[0(O/`kTV]@FDu*Td.qK,44IBB@.GEVs023-Nb\L#kHBk3I>b3PX*sQsXbJ=R#d,/U#0P:YFUV%q(FI02nJAF8UZQn[CO5Yrp7=ZrmeOHS:1/lp`?nSCB&NrETtXirMhJfjEH3jDTro>5&]pt_jjLC[-'X<?iKi8_N'o5Q;;$!/DiQo%.<YNCSF(=n9OBqKY#GJ8CR(Vf:LRLGZJ=X&@'NrugU++5heQ;+Q1*7aKa^;5>.IUGPfoo_hMQ-arQ_fj4rPM=)L4VQ,ZBf7*83D;%I*PeUYWIb8n^HS=;T95TNcuTDdm$q_5(:(K!\0YBp?f'L`rUqLRo^Cj*NsH;Jp*0mjlJdf#IJQ`TgA3RBNY5uP(nr9FM?<W`XYUa%:<]B(g4GkoQh<(YXnpT:KL**!*,3d^qtCKtTVVO5K5*4k=\3(T;>^CO%_CI+D")gY*`P@Pk77pn+=kA?9%q%UO(k;qUA"UCH;OS*%8*lnQ^!CG,cqI3k@*nm_#=\$p))l4ZISfq2lX`='$a,b:MO6]s*RlNUiWf?"3n$d*ppdQB.OIE1':?KtFSaDP5,;l4[D)T=4mG\\%]H-/NlFn/.$3^^Ep'-iVifCD.+fV)u8;H6L`SFaji]jd"F11B4nO#4c@CL5T?Y!pJ^!a_,::rT778,moho4iFIK,]'+]?#k\K(R!%#Pq.qK#I^[hJ=ZTqphW:aS1q@D)g;5`rL@V'7\Lb-&l(&bZr#=`]krSqQ%@_/_?IIBM[0Kpg`uibP0#a`E[TQY5iOG*8!N%k=`dL%<[ENN!((QQ]?+!G-=":'9PUuHb5W%MaeIRA?ZF9HP.*Q;o64NBOR28Roc;A<?6B,c&j!dX`CD9]HLaAO$-MFTo="!\T%c)!lg&je%XLWeId3fd;^(2_Cn1ta1XG"l"Va5KM/KETUY?kgn=iqbS^[h+>Bn,]EpVn.<3LLSNV+e-s01!q7mm8tOHsl$cQbWSBhMoX';!3UF%CeJ&)c@1WC/A3FDN8D1IeNrbBKRBIX`86X:1h,pR5;20YfQK)OEl05U.KR]cp8;0Lg-TIehRNct>%nunhXbDI`%JrJO.SqGl9/L>%^Qp"R?WWLns68:FBD(7W#YpXg1o>3[]asAmJRb\o;d^_b$dq]G`n\L*Br*[H0+,qn0U^ZCd?qRpgRk4HTZCb!6WA91^2j*^C:^I>%'59E!,Upn-[KsJ$_5bP@nhFCR?;l?eQ1hlP`Z-B*+f<Q@csJrH+';s5$O/Xr/`js9jE[lGc:b\u(Oh28bO@9J^.)gF8OoMi%NWZT%h4mtIoIZN`VI_opWloj]=Q16/-C:YeqWGI2k,MjpP]XLB/I'IhgT:BlEG#L0duuTN@rEL,.rEk8g\aU,CMp2Ln'79`.=&895C@d6%T@?3/XRqQ+q>>ok%m0X[/lAlU8:>q!$D#hS'IOaO/>Z@]3DYPAEpPZpZTkRM#r,*H>)U[X!bJ[_GZT*IYEq'"Z(PD^jc80!kJ,>Z%a,m2ngmRYI\UKp^`iF$f&di8lC?b:MQ48hK*T->(RY$s_O=:bnTQ`*,ZBN_@$#9l#<L,80k%@#G3uA(Q9>n(Y6[:,(GI2Q9p@_E&%b-3hA%l6&7oO_I+*X-n3;]*K;-(Q5t/Ye\"?m="l5#*E;eIjqUNskaVb630dVO`Nb0#LUZ-Mt#Y\GdBuTEZ?`Urleb(M/e/=>H7S%jF4@';tAbt0Uk;=^]j#R6k;k&J/G2=qQ&KkiRGr%fLHp4r7N*eFsKdR[ZY#rK8#^IJDCb=LpQj)0RuC"Bc00JKI9@i2-=!$LLWhL%M<#%P_?aEjN3u!=%qG!=^+s*>V*DB7qC(NAI&)'Z9osu#IB,JXJfEH/?`2a3g+$4JQmA9-=g8)N+Y/=,.nJZR@1n(h66mUfUh,8c%M"**3n(-[ba7:POHfrSpk:[-bhDe!D-KAuqd2nIu/m29p>>2Z9=O-sE7GGI73uDN>-b21CGL!6%Z7?S.*-']](Du8.Rpn[O>h!IZ%\.d;ma7oIIZ7g-`%jQ/f#rfj@jm*<O5[li6?P<;p;63%R1h:W8AU8FrGS!cM[E\;J$>3h\.db^.b?e#5Sn.:JcWMl82DE:`JoEBE%#tJKY/-]VKj^g(n#U`j1V^5N8(D@mC/,9hb$bnY`cf>]mIJrJ:;"@>hTU_Urf9aPYp4fC!n?uk*D+mLI7;be^0'gZ.gmt+:MqOY#%]'LW"]WgUT@Q>d%!LcgCmN-5^?CjVT-_`0+7%a5InalP(cL\hAF>fQ%26*]NDJJ/uU1($GE[%[GW@d50_0H"PQ^4PG*9q)]WY[V.%5=Rl<j3K%l9;6md`q0/La?AggO@m,U(TCM?)V-i#chn'$X,ht&7V[DmF>d=XA5_,e34":2:NVQA>Q+'%1uG@5,#OO"RDdLgE&!Y<%-6N)Z!-CAX,+!nVSbjBYmTe1Z[#8g*N],SnO.B"gd6,#R3h$.?lT])>TR@6e:V_gAE,7N2@1nTT]gs+g&/Q:pT0h8b`5c2`T44m)%?[V(?HucJ?=r3:6ep(^U8O4LKFBFLO;FI7G+;M8.QA9kJ#Yf@OUB@`3pgH+E#t`kGB[,o7+ut`(b@IC-qp=$K>(-=]0_Z_Kp6q;l%>eQr;V)+mf),JLQCRU>6Lsqu"[HG6A)08)^cffg)1T1Bs''pu_l;9;Snub)!9US,2-k5M6gFH]8=J+K;Cmon+H<b1Z/T(2YP/W27%eni!%KZVToXRuC^Y>MSZ_?ZQhBP`-NcR#+rX3Vm35`.i\iJ?$[rQHC:M#'t\Z76WqpEu8]G[P<DroEUGiHfr1,Rk>$Y6N'nYUQ@k%9]X5:<U,g@L&n?9N[3W.iXO>O<r)q:(OZBa!Aj+UiiC)E@VIpFq9r179eVd/)o.g8*A_><>f''=XGr@=(;lLm'4'30,J:,'<0Kq2%&OXJ_r0AMBUm<X:ej=t&.!&i+YnY?k]"CWJ9PH96NWSfuR#C^!`fjI\Wg!mR[a?AR[b+_4d1R&'$!%Ckc=VdKV5sFdC&H)8Z%8U4%*1;1)a2DJDrO/>_Hn/\pm$)n4,u#lG0q::+eX'o@Z$*GnD-;ZNi0U\g4`%S\l8Nh^9$MYUq7:aXEEnL'ThDP]$Yt0Sf$MN]5f4=Y%rp:0De^,UDcr%/r"uUME'm)1\Jn*EZXX$roH.@LFf$MAE.OsY0DE1u3?#g+>?S+6C%:/n)=@!a-/N@>O?#g*SnFS*3ThDP]oBQ+J%XJ&:iT]7)Vl"fLG/*NcgEdjf-q4eRfm#kncM)q;c*;JRgYK=m=WMef;#N@:Scur<P#6nI-E@IfKSfHq8s%s*f^SCNPhU?ha3&d=T%$G)V!ns%Sj;b57GkEuJ^0)+LokVBe9\k[!fMWtQ19/:Ob?=-%TS>X7-<Z!otOYm<i;];fd$jUiCDL1Z67XM9Np*n'u;O,H8jXI#n%f^%g)W?<qG[FLm>Ym0r)W?>2])Q3)sVJmJ]=-G5i9H&Bq/FDW;BJV3rY>1LI=R;>+).Z.?>F`Gf]r)[)h,4J_67sUam^8K-).[9n%!Oa9u'u[R4;Ag[!B>J>;7%8qsr.3-[oaJ<E2l&ipSAe?MSrtJYWc-!lOLiB;5(>A\M9Nn1;.LRj^05OX,K@^BYjKgGWK-F,$g_!B%EJV3oC=#\\N>kejTh_D>=>dQ$,[6oOCh+9J4d]Xuht:3Z6lMt`Dj9[t/3Bs8;[VU$07IZT(;ZeCV$!Q.8NH91-P7Ynn[25hEo>!;%j,8,RV`d8ZNpgFolH[&F$DFUHjF6sNiZmTZY.UccK[*':gPiUOCj%lUcM!lFa0b)S/Ellj=%!6jSaL\kl08;W&SOBu_;6&8[-JA%%aD/8qlDG>%N++b7gFPeTj8I9Q`h'(W%5p^S\#VU2<)IMH:[T>]\r2Ps0T.(4UuQV$-1\#2fo[WrMMssF(Jh#e/TD_$Xs5kMSBjF9%G)S&5?-]7f4MV-bj*1[C>%GFOgrriG+[&a%e\<2b@:mMg1'l42g_LQfa2t_OP.;K<&XCYTP<pAgZTB+`a'F!U=s$DH:JpPN&<^XG%WV1$gpJ.gQ.]tZ^hU@Q?V'1nYAFZM990T1l4>P"nG%5f.&uILsmPSFFJf^=UK<RiM99MbU6)X=q4F]r]OVsF\VS-3[^RNq%_gUQP%AsUO4r+-'M7'JL25JH/$'GGuq1;-0^cTL9NOWl#[Q(a0CJqlHDOnJTYB&Slgl9&.(->%@\/iC]*8Pu"A+H_<!EcG2aIb@As6hMm3%GSK2&jh9pI%GP.fRN%NkP1J",2UAN#da:a+*2h*=K_L3)0GtY81lLq0U""e#Hq@C@2t"@f_f7E2X.)BaA55`VR5B8004bI36Ccpg%<*U7."<C(IT"e"p@$*r3L*NYt)hAF^"Pr2(9^_3c=V$i:-`:kAHFSd`.s*]8HFSef<6)"o9?9r#@6NE<'rbp4iDN_b:/qfPnM.!e%DV"K";U3hGKV]S!A/MJ)PHCXc9/TW!_dt#Bikjk6D*=DEa^,DV<lBu'%lY]t/(]\R/QGW[7BTdr(JC;4$([&(V[[Jch$"gIUBPfV%+41t$ip/F$`%&;ukra)8jQM%j?#,QBiMD!Tk4>CLMH8`WX5l=6n1N-[bG(MS#B5Q@Je/NWf6Upe9SV)ijl?kEQ[AhS5X[#3F\Z%A%251dPq"[jb-83*1U7A`/A\p<*j4T?QB,Zob0YTH*-%iP6%@I![NXX`M";+CMG6df)b*Gf:l\>7-YM.#Hp70$*$sbSDlF*[flipR!%aG2),`R:4)M$>ig+Itod09!rl^<Nr-p"Sg_;SUJR,5(-b9I`rnr7Xgo;PB^#<2<tVZ`$F6IV)H>MY1cLY(;V9?4.gADdQ"'77UuA%Kurh]2jE*Q0TQM"DDb3[L1s<>Jl4/.>%buU\=e$[ldu,m;RjYli+H'tQR\.XFX`hs<t6U@bc2@P)J-!clGkE/bG;\RA?o)m8MMLV%2-)TIm3gP!A)%@9-1Y(26K.1olCPjO+V$ru;J&p;B<TG9+3ArtqSm"baOo/gKt3LALUdb!1-AuaJX<SM#B1l)dn73B(R]P'60,uj%LY1@g?rE]1^;m:T'>d&<Gq[S$*YIGS08AXchHBV_purd^9D`dGp=ddHo%jU0[otff2Re!PI>X)?T?Ss[D411.@r,5<>MHbEcq:ls%Z@k46e:!LXm)E4\`GYL)@^kBl,4Dd@FXGu)ln?*=aq(-LMr!s5mnTH`lHY]E-9W/h]bZk0TjkKoGn`'5\I^0I$5^<[-W\l:cP]Sq%'lP76pTD.p_mNSQ0=QA"q\?3;$C--irHodu)Cfq-cos[Q):Wn5rqpX/-*G*[^Ud#eG.Ugb#?>NRG2b%=E_jZ4g\;,fHGZ?0b'NEI%^&ItsL!ZK5L#(P1"nOioK3+7;])+[5VF[k*1d(`]4am4sXdRsBZo_H)V.hl<oP#qF#oV3tpNH-R=-;O3LD3UPE8fR%Hq9bShk`4l%jYipN*l!17Vo]2BWSBQr@3*TcXP52b2+d=ue`Z"oRaXre^Qd?>9rV7]4ZRu:eZ<)?Mt/L>^6CS9-+T71[l?TYc;h`nBHpk($0ChS%q1tQR:P#ZZ]/%>MEiIY,]F[*_*r&Q@I_trul/AmGini(Y8W?E@9JIjQQD<;t9>=:"qTl)hGqVf[Vn5]#9c#ZSW?QISeT<N-2WJP`%-uCg?/^?qgl(XJ%FK<F2eT=ZrFKtAYM6#m\WdL>HRSGmjceCRAf/gL30$<sN0R6.<F<e,bB2VG?-]r%G9p`k84af1n<%T,mAZ"""%$+W2TXJQq+TB:<+SbPV'FA_VH]2rEQeT=Zi2)6XB<Ae&i8tqVHnrD"oRP(V+N`U;GZC3E2r.:Ns=]Ej=e^DFMqDW[Wh8Bo^Z)[%d%e5sqgRP(V+DYb@mnTN3&4-mIH/pbQM>tl+M7cBkeQIU(S*Fs2sY,7,OD;RE9X(o5E>.TBV.,qfT;,%kW6'0".U7*^7Q7i*tj7LlD%;71KHg7Lqo>u^VobUkZVgG,9#(qSZ[\=gsEksA<h%D_K`;M,23H@Ml<-XV^00nL9e.1>D"SuI[N0oFI5G"95G);>)bf?V<MFckCs%<:A@+4]%I<h1X2EeKrbI8TD#k;6O#thPZ.5p`=FM:AiO0^I'MG.3[S(`D^nnVo5o'OrpAl]2.t8*-o_1_ENs,I5Z+<_]/k-APU#r%K=?bPn!p;MD\'CdD]t$P3<(Cd)_C]N]<SZ8-@Y)0UAea!Tt@T#&HbZ>ceM7T]1DtG*Np@un^-)+c5?Q)h:28BWLgZDUoH,=p6e!i%Q"f;HG:>2ONIU(CN6/')&BB7^DN&r$5V=T]L^]Gofpc-8`QMSdZ7)kV1ds_-qUZV7o'E3q`>DVI3(L_YQYVRnSgL3m1V/Zcl4j/_%]jY&(fuAuR8k\mi#4@L/+n]jtCoF'V5AVb.gN8Ve\q$[-Wo$3.FZ+,GQQGi0:Rhk_3rc:eTr@g;g,sMZI%6Z#0_%?;Lu$P";tMk`%9l3l&'D+*RgTJ2U@JZJSS](%?RS7rREAiNY_QlF66[ku<p.oHl/1H##f:S@lY.eq`L52<Oa"k!RQR6/tpJ*fL[Sf".=+]nSL3':H%L-rNX)nV1T[ef7[[.c%X6.YC/0Kbuh$\mgX?4[[BrJU*n%oq)bCJfcoj1[7$rJY+)0`2+XoeVMPcB[ndfou,nn?c4==#De&%"UYV%m-b6)]V'T\P9I`=XX=`7Z,XLt2eHK"N&iWROJF2?$!t-"ICECmEAs`X'JJ69?hp)OKtC;;j\9#VjM$j;2&RaTE&ZoPGn[o2(\,XA%i/P@R3g3H,^$5oMiGSG(f9mmf:m-]c%$U9;;!pf;V#+oPW-_%>ZW+?:M/&(:kD.@TWD+2]m8dcb`RpH:itg3l^:nPNdhgSa$^oT9%mj*q]-iG>kn_E\>ik9<k'f"[lPMtSkl0@"J;JXF>GB'3*^f$?S9eWccEf;b#;%Y^(&JOP6Cdlun]_cRtZ^l:++[rtMMI\9.f2F0!%9^rD?jnM8<Z$,5'0@`4-a[Jnhq#\[k34V7[N@R[OZ%tu_D`hTjlg7NeQ!fH+@4$D^C[&/#(5F1\hP6!VpMIK(]AOm0>jH*>>bSLB%X/Q.]bbuH3g]$uo4iZsCV!c@`PIr>tWWjfKEP4sYH(h8$<0Kq2&^eJ3ot^Is]3u\$,0(@0Yi"pBeA44DV"_j=_V2^[r8[D(8u(kZ%bPK@\gK2bqSTg6Vr&ur#n[Cbt>-H7m4deKdn$(';lV>Y[GOt8Z\_&[MhV7M9RZ&3%BC7s`p[Ko^L#1C5EsYg&I8?mAqnlkJ<GH`5%Vm1kdEpq\JRmpZM?Sgpe[aM-3BWs=q^[TU5lJ[gS!unoCqX3$@CT&:l.D?&u[eE_uMfWk62+NM(rA,8HSNNt)ECG,eP3V$&H9b79%ec'Ehrk=1/FKq+?*o`(H$F,4qE\QkZ@dI9FrUZ#ZfKn[as&qJlS8$/dLSqnDA'!_sb28]7.9\?0^HHd1[PJ_+YH+![TlqWK&85c?%#eUg[''j^iDM=<Mf-?K/*YP$O[pFk2amg0SeA_9@KA('.2!@FU.W'43=3Q[@CG@H=8.Wg_XNpj@11"]qr00J&%Gmj>Bsgqmq)4i:%0=+VUUfPIGF$g`#O32^H<O)E8<-"n:8m@<5Y/[S9)tDe$0KqpJ7D:tPClCKY`:ZR5mh26UQrN''<gFLp.CP-*_oQrlZr8FjIa!OQ%5/\hWH51V@fs*hd[5?+1Y,c(.R,d'tWQsE_g8icngJ=#7,?95",hpbX9NhP.3g1u<e_6fJ21]5GBYW,#r\:JUS1%ngbdtV?^hGsT%=9BDSY]D4:1u601H"CKu+/TsGVj5[pp(GaKG(-dVfZpVq3m*GOL;VMVZa5d4[JAl4APu%3d3gp<AQKIf6,R:\>_\lfAJap:4P;C/%@=lhJKH6!bVg<:YH<]G^BB).u2H"Ig(YR6%!fjeR@&t9IgMuXALjpjk4uB)j[IM%sK'pp[69l]V'1r:Xr-kqL:=>AqgEU(=8R9Kl%M^m0^=VbLh2QF>]mYW916>%NMd7H2K4;[@#1sW")A;XQ^oUUu!>`Q4%,N$rfB?(VldY>nuA$s5L)SeVVC*JQa9b!b>&'74>J8&d!%7qgp-WW<!W8Zi(6a.GKiMg?Ek:K.K7QpX1Li:&7/EI0IcMgA^3kX8F$Os!;s!?A,FM;=2+?IU4F5B.EG`.B2VL>m(21f]&<R`Tj)%W_acF'd!8TO7N*"ZMfuJng/S?B(m]\X;>cOO7Hj[1Q<!SKSf!9E$XtGGa'lV?ID(2-sqkDe7S1uhhW9I)*Q,4moNNo;`r2=S5Ll#%H9"e#bi^d^1cXH"^LSiR`SF@ihXqgnaYf!#rHKX?m-]UcIb/M^Ctf9Roh0baDkak;,2Vuc?;S!>G5QR_,*-FbG=0L@qB`&-N6E8:%q6"(FY*?jVVg?rJ;.8@O`VX->Y2:Y";Ha/eq-CbrI&903F_UDjrIRZM5NF_Rh_Ob.^L[8$HC\K-GQ"89mUhQS)LC!gR;eAT.qeGJ%LKB[!ZgsmD=8bV'?^^=f^LX?;?^3Ooo)PJn"t"fN05=h-[%!eYUOJEl@BL=5nYNAl:4C`37dol,./lp=*oDctrK;L>2'Z&7lPH'h%\2l:3>E8`dT1:o(YPNtA+I_q.^Z=r"mN7qt>sCo(7;SfI0%7Q#Qi*kU>;7u%]7,4.<0ZZ35ulWp2+QmCdCSH7n+n?Fl8Jh!Vg&*f%7'!58f.XZNs#n*\lQ5%moc*oo^.BC/%Td][^[!h(h1L25F7^L/j4?F>^ZlVR^Pqoiht0o_C#8MU<p./RTdeml$dL8=/P_su8&":J%^,A0s]7)KJ>]cmP?KHD0P']dj*oA5R)!ZfoCkN$ED)"W[X*t`<W"\^(hb)n/I`%;1`+"YWGQ#Oa8t4B&`R:f9EL$4W^?_,e1QB&T%.HS0jWSZZ.;2:Y'*PFFNf!t2=:$083HB3"0409]5oi$JYhrO8&77<D=gmpXs]7.kN/_:(hmCRgE2,=f^Cs$u#6Al8?m1K(t:%YSq%ZIth;dCXkLd7e8pVL$iIE0<SlqBag[0oRXR?,&t;#KM2C03L$j<mpX/qB[SF[scKbS]/3i)i:cpO_$8"GQ![L2Pc>Yi*F+9J/MD>%cK&9GNPnosK!D,nht;p!FN3.l1>09gnPd<3r7KVMa+*`h2&'[K==?ro3+X][7U0E&gmtVb_ld9qKo%gWUIa4\-/OF"('F@('(TJI%i>e24HSB[s^K3Je-;^+\<ruBon!(e?\t+](DHc..Dr]pKF)g^>b8.G!SZ7Seo+c"lePoYoF*:gWc/jDW]UqPmd+mXRcGNoGe"<b-%%i_^tb/Y#?="@pE:L0f#rDQ[qJ(E29g>:G=;X6O7/)+F%2._:3n4))\^:RI,g8tVAoK[J^Ze`Y0jh1V4Vd(VPUrnV]:N+Cb[>V]g%IJ%tZq/ncKUg.86hC1B2g-GJ9>qRVA&+X(S]jA,!li6=#ke47H7ITW`cM&-WpS\Xn%'[$YEUC$AF0p#PgjQp3p&0>Wq0h]%pmqAW%%9d-,piQDVqhM*)r4GrjbV-=B\R"$:IrtSNZLW"g/HqYk>CFm0J('PLZF?sifi_'qf4kBR\/WOU`4>4:[tIoVqcH\+5IX\)d\S<6%`B/\;V3oM2f3pbt?BsCiYEsRK_mPc^Q/X4gdcJVAD=Or1/+&Udg0N`sZ@-iigg@QLDm=J.:5l[P>$^r7+9#)o[@91X8c5Sf0<?+=%k"dEI[8oZEjHGX/pF7Ckrn7%T8k\cPO1,dI)XljT4s'!1CW47#XLPCV]rTf)\^dP&T+Ud.DWU3^@4$b`[tjb-k1n[Vesor-\D3KV%IU.K3emE9Fe,9#8FTqU'418C++3KZ;,/[F:I/^?7f;$6_<Rh0jrc\.T<q#K9i,9F8_U#D"TB6OR[J%mk*[jXp:o&Rb;p:07rFmk$%2`jZ[]Xu/7(&[6PpucsP%KEscrjf4j%Y+oqWf<oX#=gLlQ*'6;IXc/%gUCP*"U:!Sk_?M+rueLQj3rnX6iC<dPP[^mc2U']I6ZVb%+)mI(h4jo_k[+!fmPdY[qr&G'/D!p[gRjd[Qosq_Gua],)L6\=5dGEQ)+<0(($K:=8c@3>o*.FM0`%]UGs2K54T=^AI7#J.^hTq&%A/TLU<f+<m1-uq)l+RVnkQh[lpo'"?j].J/YO;I1:>IPo_^QZ,d#&(+:E"V/#2?o^E<1PpJH6,(9(?ZRhjE<h.)4a!c0oG5@f>?a%p&!%oH0o*As!(sX>E67Bq,K=XUB5&m^>ne/KPj/JAo]?3FZD!q]Ca)AlIak!c\np3b&1-?;[Md%A1f4$W@O7agflAFZb*7j[;Qg9%3C5T:<7efXW6:!?HaJNs[0djhFl8nT73Vd-gSMc)pNMt^Da,)jIZ(\el@uXG_PuAB2>Wg*<=gpi/.4VV-^b![oJm*XpkXFsJq%S<%m1URDI=4,5AcUfaF,TL,BmF,_!/hW93,1#Y/V:2i?)H.^2/aH&0B_e])@CV\D18P:CH"mNp5nVK8BuM[ct9?YKIP2.bC[=YHr7#I%rE')Xrj:s^#1>]6$NM[n:d)AM[P[oejQXcUXVgFF!RBUI+/4II)aL`U*gQMPd`gn+>rl;iA`R"eHMsTHqn,N\[X^EXaX[@+"c5PC%lJFdjg@LjR>C@qNPqO5katQ$[e!hF"0Eh[W!:n4K'fra1KU9%[e6r6Mh>$X%VgB%;)dshZVkA^m(K)V]5+P`D8i,(uoQm,Jmt3Y0%.3fr/\,f%CeahCqmOMZJ_rlFYgb+$dFmsR$r!L<eIcHJJ^]1Hc$"S5kFRIW.Z`>ePcN=t++P,gZa)Vtc[heBsg\p)TE9b.d/C[,@%'1<s/I'oG4Fm6GI+bo.4p@Z+N35$SFp"*aUH^\<Xo.sFI(RI4.<mAFo,OWI<612Md#)tG.n8KBbi(B!d&V2^!ITXa2rb+sI.m6qV%Di:Rd:VBC5n.fPJhLFK$V`E)2MlYd\&:+"Tb_:8lajOVYo>T\q8DG&2[=lmn5gB+L/8M2nC)>t>*ol#Dc^M56grHt.5Au#,e*t";%:KFZF8Fs(`USlqZ]%f=Sl,iQ_#u-JlE0[5[+.c85rFkF.IoqMOoi]6:Xa\d$1H@Y#3!`Q@4U>orCnRReLsRj^H_3f=]ph7!/q1oJ%1l`'?\r^AmEH;][M9!nnGCd6^9f!$S8+qsdU+Wt5,B55B/W%[/%oWm\nLK:ins0f]U#^pNa6d`R7t:4(L:VS;aH'.ZItfZ":lhA*%L3MUMS?c'R^%I-F"PYN%?s+2AYLLii?c0@?O=gM_E`#Ah:KRCGauS>8&5^^Q&`oNQX<dK:+&U<>\WD.:O!s2T;%0Dds+k\jIS3g,%s$r=F9J0J/SrIbSM9\?"EXq^S<6tRVjW)krX61f/n;(gbFnj.dp^f8e:5ef@01=GCDA+-P^mkJ+XLL2RqtOrhe..M\565-m$5e`.%4o"'d$iJHtI2"^AW@mCL4oafqe`Sg$AI.Pg4/g4:4hdrIYpK/L&E/\;g:+][cTaQUqRm]9.^R[E#>AR_>OqNUXZ?P0qn3^^[_IF$%^W1&\X^5569[;`]HdIIhYuCZ#[+.Q^g?'mUg:Q/G\&mTlVuN(8pATG*./qtn=&<lrE;atYs1=DuCtm%bL2CL[-ZABQn#5u*s4GGr%Aj0a_>J#ibGFI>kYLP[LrHhB*2Vt$0SO%E^>MM7kn*\n!V:Fcf>M7QBCQXe#1Z4tU9"&?$hp(?Q+4ktn]%/f7Bb(%/lCI>9`Lko5%mt7fJ>H8e<lbb']YU^++[q[6k.I[347CX,lJL-lc"3QBsjj)P.g0$E2<3P(+<u[;l:E&]]bLnEB[!'etPFGdiC&XK(<GSLRq40^N%"T_\0TAhaqd*IP"hfjs4Jq0ZJDj\*+>NL46F\20Ws4TZI1_7dSH#cW.0(tbV1:`j[n8qq6p0#$,n9r'X!NWs4\[>qmh%Eog"tIU!%fufM4=(5H@];L&'nTgh+B)`(qY?_\D,C]f0_mg?3>9)^$PIh\<W\Op>mb_-<<,+_<&om9POMOKf"Rc)\8%,/h=fk5rK1=NkA/&?t%n0DQ^hs9,0+f'%$5HMsk!;b.T1^]njo[?J/hYW%!5AZZm;77MubHUU9X[aP8ndkJ@e,,hhUO]0M[cD(To:2AZ)N'8:`lW45o*#*h%<UTbXIKarhlRHi$G\=,d<<B7;:5=h::MAs>/WtAhP,Y^sM`ga7kdL$SS@[5r!OQpsj"atI>18T[S?9p"H1UV4&*$GXmDAhmeoB_f%^Tt=1GH+2P;K?OZ6TMum:FH=BUb;&a4sp"@eR'Z&a05B4I&]"-a7!3d^V8Is>GlE.*in1f`sSu,q=q#iHFs/-ABWN2k"-m_+IO^K%QA7$K31Ekt?d$Mr^D-q,282B6\%aVBp)A(l`A_i)FRa8fs'*iSb[W,O\E/-hloh?gKC%3>*Hgu(Dl&(>V58A((`7c0P,VD\$>77e%n*q,Yp5;6>h6Ihg%s""Vg_CNJq8AOt$BT;1o5Xd)4Xi:n(=5/?Y"1'^$U^jeL;(UF@J/err9*p6lTNp(ohONpHuX]bZr<XM0\.Zf%8C7Dn^OS1.42okHc@I(I..U\:oDqS/A'+6k>?*`!4mH;gZEB_hLicEhe*8qDE7utd["&+Tkk]u+'ud]=gPk%l-6V4E&SD7d='agE%9DfPgl/5jn@.9bPJ8^OrGprE,La!<T+nMj_D0Tr`Y9CNEr/(A0fe_*]pP)p7K7)SBics+`Zb0SjGIF)K#?#b+R")o":hp<!%k@$Q%B`T<?\M0@#]rUpGX<ArlW@2o)C7!]!O2d;`*OXs(=*]s#`Q*u0.Ud#\EHQ\^E8$"O]Xk>J?LdQaZ_G/1q!g:g0=B&__n?'<b?bY0%L/7-e5R&:oNCibWaI-\TKq)i&/uA.`d?R7M6.^33Wop;e?$6!S^SLBD`HV`=L4(RfOrk"Apaob^.`-bV6iQf8a\NK?qDR5pTd!Pm%DgBnj-ldm.=c7>TdAq]U*e[dJe:1Zm4_k_A$GirQ:,.Mt/tiY2^G=Ubf(5q@H9CZ=Kse9l#ri^R"\&>6\pufR8@T0k>4dgYd1Eu4%jkNJ.*mY^r4O?R(\.X5C/@KmS/"us\=p"ScJ2(^C0eq2O:<=RbpZY[m#JsokS^JUGan[N0qI/KpL`M+WXHp$A0)[i=9($;]s0F18%=;Ge!k9![F!uC,cVNTE=*#AN^Q(2/]IfK<VX5ribW;iA[*nJ@2)3p`;j\5^;<-"3VLAR"k'Z&33Ti-8JDouI%MGPb*24?!sRNb^g%4F,(Wl2TS\I)tBqpN':#1hFEt-C4hUBl!53Jdm[.;X==eZX<aEe]Y0Js.9Am@p(1[)Fg#A.fJ,;5PB"OH"rd*Qa6LZ9^\dfeJhI/%)hZ1KVr%;4]8iQ-KDkDt8p3A@gYP3M&(s'=7_+*$nC&$HRVlMb2]3pR"ohm-/#.o?i?*Qe5JFp?rW).h=Zq+nrUEP&2R2(0ArW<d%\n)Zte$cU/)-_<$s53^Ar8COsfkk=O"\[<eYF59+\(M_u:K(X64m;hmUPPc0Dqjs)dh8:u'C6)8bUgG8.%6@MCos@6Q3Nm8b:M;7%k(D@fZ3mIG)*X"qgalG]$,T@T!)>g7*!E2D>uC61,D.\I=dBS6'?i0?)dl-$;(PqeCn',^@"uM%SR0+hUs8sJi$lM_9ZPS/#RkFa%1j%7Q5u4@`clCjI_\C!H3R"c$/2Jk[&@6s"SMB9Q$G3bSR\g<:C75<3%4r3#L8$aq(jr>cI)crG:pW+fh,5h==(1fWD+M]uS&brF%)*SQIAn_Dn#Z(m5C_LWF>#6'=cr(2\dt%Y[0:&VZM!gXh3gX7n1T<%&!/Qm?_f+:_41^,:!J<`A_uU[DE,^eN1'AqB1VTM9cF"m*%GFURYK2gdE/ccUMVMX@W_8Q1uJ@g78d)BD([!p$s]Z0Q-efTG4[Ao*fJ7\!80YW!9@0IZJe/n]7-<##9((p`tg;s$hRh[InYb3Sc%E"kPj^M?)(pb_;t%fjdr(j..@>eKd]'*G"J&a&MA(r5#oG7G5gAno1l)Y,d2R@+P.ANL&o2'P?SQSQYL*WS7ihOT57)bWg4^te&(%Ll+Yab[$r[!Fmn`rb\tAA?F$Rn0$^A?pkOf@[7OD0ag(o*1=+Fi?c\T^]YBtbDCiXb4>8G+2QcDD\=[Qj-BX_5pYh'_MO$'ED`Aa%]qDAtJBh,+_G\WDF+cQB,7UJ)@&Bs'F,0q('d:.`BFhDecj94DAh`:q0!$YB!$<f9&hrim!6/!YnW=5>FhqN87V%=P0F?0hfAn*Q%%n"I8C'4TUNhVcJO.fup7`"$d./4B,gGYHHZY!B#QVh'>QnoE")U?8DLr0:'O[+r(b0iS-l#8u#mD>5."rW^OkaO$6Iu]L@3T-u4%a,smT%LL4q9UTL'O<>F+!?GjNk-H'.(cJW/QS\FKO"9uZ5r0.hjb$mcJC1g#RTXQRT4A!G_08m[:kRP+<FKV^nMNbC"@r]t%`0%g%BU+K"%?@&=8juGX`K^l_-B'YngZIKfEU4gf5c;-OFp)AE_sT:[!DntO":d8!!0W^M:n.Yr6C\m)_9so<S,`\j8J:;$7#2Kei3QSn%jrTuC[<o(5pl[U&Ql_>/5RKn&0d%9J@*q$AUs@djnAk8G*i#"/aoG&=%+18h6!(";&]D+<C=rf-*_sKPc&X!kd>4G('kgP/)oYJc%[uM1[:atY56/)O.U]W?&g?(c\45GKE<XlSSE,??3&:.E>1J&-c#o[KipmheVKX_P6<t,^/$u]Kp3#@c=JPDJ>mM>,=NOfl9F8&rF%Co:9["!Goe9mI'e`8>eMjt<Sa_k8Mh+pcR1:-Z/r,!a[U73d[VF[bpKQ3\mS+ND9Ql5%JGV4cHJUMXYP/OAm9R+/o?-ifWl,pS=@%Vi:tnC.H-ob,Bo$D)5;q!A[%V`aN,4X/\n+$3l.m14tc1lq^Xc3FQYP?P-Ct^a,Q\h*OF5h;$EmU,ieh)\)_"A;Cb;AV^lEq-L)J%gh(/[lsuK1g+Y21<302hMZM[N]b(gM:iGbQI#+/*,NHZm,USut)D%9G^4=XR/p;6VQGP4$<T#m*-oT+6h8D#KU>&!F2(V0@#].2Y%h)L5q5[m;3@#q$#YqUBi?qiYm&86HZ5/^a(&+Q"N_-H"fmL+<S!O>%D#Vu\J?s$IF:^Fo@#3(plf8,+ec49&Og%;C*Jr?<$/3J`$%-k2qk3t_a<a+96[e!1<e1;FVF!!+=[O<cMnSdJQ5r+-(?@S%'.+2ATM@:GXb<\RhTblnqL/2!='=a1K$^c[.S7NVh^bfKW$]8Y#S%?(rP]js$"uRM_EM@(8.o,PVANgZNQS+6)TL_-Lsi"7@ppX[&Uk/-pgt$o#IC<T>?=(o4>X9OiZnaZH.E0PAoI=Ka]1&7RU-obE&r%8mmLkd0bcMZri\t2Q06D>QI7?d9-MM2B5qa+.<7pE>4mCD&TuT,6GP<r(Ki7E3UXg?u]Fjd,IphJu7k(1L#[Y)FLO/<6dl`iWpIV%&Io2YC,CZC8$c]6m`[uoZ8@??#%Ss#_GEJ$q4?k4c5jY%<WWhd9<^n(Bs]*n_BdQ/O;Wp.R6#;3.e#[b"=u-!;[Ssc6;50O%=#WS%9LY=:#dID%9_g"I_An8$Al;ifH011[D#d$NjdA"4;<[e&#fotLQQQ`_9qFr;_`X+g,QZ9'CAJnc(CnJ.\S/3oci>=9M(_H`AE^FQ%"*#mSRm`\L5<5Zdq_f&'6CpLcjI&6\QP)uG^T*<4&g>1iA\!C(`==j72&2O<'1=\qk+\:Ol7$e%h-!ZrB[)[<`.rTM_1r=t+9;Tu%oQtaAZ9Q(LOb5@5I5MJu?OO[YTL%=uN?EnB[UKDKYRK9nI)?4Ka&J.S\-a#nXA,"YD\u&jiu(>(oFVNGC7,8u/9`:r*IeQLg^OKO%P<"e0MZAGhbhI(Yibu=3F#VkZ\/Xl/lts6o]X6QO88Kkk[@k+pnLuQq2,NFXif%4<-KggW"]-pQ)8bL-%fknA<(.IKX#_Ub>sVc5%)[ml*'!r/0a`L9Wm`Z,JZFX^\O>@0D+NmSAWgYsiYn$kIJSjm<(PWn1=V^/e)L#K?Y[PV2aA=Y%LW;\n2pNE<-5Uj(jB9Dlck'\J%2lI.f(i,f&)^IdI)NXu[#,?'LrdFpdJF@"f)5i1@3s"_@6UR06%a[F!^YqiDZeU;e%$Zq%]0a5UGDfm:5^V&`=DA+"K.u'2q4p9M%E*`k1^lT\C=25/ClH=g:j2.C@kLsK*YVBC79ACkQqX#[BW!b"QRJ>?2<O?"MX[EC2F$OSnCa]&e5Z@n)0PZtCr%8,,,Ya^a"0\!T%Rh1O?cA01PLpHfH$a\2qTF8.B4fPYeRR*k4!]9<PCh.o)DCfpI]5BrD>AG'Oi>g4N^i>M='tdS9.ne\#2$#o^EM,?rBmc(uDK&dc%i%T+;9fRAtBXh=>G['*0RlCXb$.#V*7gYNl8&9$G(sSGEqRfRTk\rcss3?8M"k,e]%-+;qXa,Sua@SN#.SsebnML[k#Xf]4"_OT5%-9#R24BU5u_f[LS!(V[`.El^^)l=Idba)'1-EV?T0SE3g8/NHjnlFLeI<a'n^h',<EHDdiiVX-$V2+hY!%,e<2M!"T,:Z!H@%`=T%A8f$p"@@4\[,kG8&4,.o^pbF3(g.E!a0&,+7e\Kj!6c`eD`'7'=(pRLaNbiVq`LS66[YRBh"C@p5\Qn-WsYl(88?[2^sICHbcDL7%dm7F:j9!/J(kKPWWJoUK!T)%Rp4Y14A+\8(*@qiP;$4'uJh^O=_`2uXJQf$/Z"Glu<EAEol!U\tVB%Ku!63MroL_J\cuurKq?.D)%lZNOX6Gm-*(1E*")"LXW_[4%)Bpes"25UUeBS5QLA;oKk*7s.7]YuUY4Y8+tN`@cL2ib[L`.tlnliULW#)K,!JOGSa"TYJ%_@"(<%&a<]R)8nMo@%=G,I2#uX5kkWHL2&#jkCFI>]65Gn.!ReafK&X4d/d>V>-:\@]JJ)<R"_Q\JHS\u=U,<H+VBHKIV_Di3fe>+`6`=\%b_AKBM9`p7<68chF&NPE!eZWgVVrJQ#h+1Mfhu3j&Ycc[Em/*pCZ9T+$[*Ph$r-eDFU$=HKR8V>AI(#58(,D]0@8Iti*8SHe&dXp%G-!:536"JhQ$X2W@]RA@7(0_Q$t'9_^mPjh$1(J'fC]p^',]aO-"mJiF:s+cm3P&GN#=s5FsQE,F.RBWq5*H>\'/%\7%8q11'Q#I%5`&LIq;\TpZ_PEQ<`PB#p:0I#Xf0<5-n.Ng34V5r0Z!'Sic/q!WoJ%kM.5gb$A&!YNE,,\ia!CTL+od*nL]cRdC25a##^nN@%%f$%"AM9c<,!+3`:@Df/e"g6$E^aJ(pGKZ@TB.H9liS^;VY!j6.6^\U)TL#N,6)6^SWt-j";;++Wd6K7dtR5AjK["Jr$rq,5/bl$+nBZ%\g#"Qn.u=h+#k\YPAJ02*",MG78qdQH%7rW@pi)$%t^K0*s/3h&T$2M5eL-JgVQu[j8r5@+H5W;NJnBXT_C1V:n3)/#qs(?aR/:\%'MtNl9(<*--6s5LMPhl=B%d`6%93QiK+TOC_WPVe7;dh,C__p[ON\2qNMGE!%8O`E,(mq8;>"<$@2%+7W#)Cqgc6jA#7<o0]7:Gl%[T0]B9oNTi!1u8+)6XJd^$p50!D<ke#k'2,l%)g!RmS#kFm'N=e=b1+mQk52/7bH6N!(rQBY\SrMFg`["QNA>DM"tJ?9oBXPLP<B%k;NHWZd>D$*J$>qqWO]jSr1>2&5'>T@;\O:>&l[XL@>j:PVET"/eK'A0[O:=;Y59s;o(mSbRL=`!!r\Bbg]T^6;!3lEKsEhF[X1B%3!B!s:nB/rHQ8njGS$[Vf9:DD-4h;3JOtVfThWI"[uH)%Ad1JFMILjHo.YoSP!GVT`"e?Z,)k9U'$RY0IL3jspAf0M5SH[Sj+-Y2%%O3om$c,O;AuaU+/$SCu*U+34*R_>+!:6P,D'S)YcqS6n\-G:*jO;ON5nm]-ELkL2i%>"j5SMIZKE4^\NAocl#3C5W-]F'O*g.L(%oQDMH0!kH[BN!gGG]]hCd2E@s.7Y-8(Y\'i+J`jb)YYNJaKu2g/.E1-p0b,XTV5iI!-ZL?I$2H#G:Y)52Y&3Y7.].5%G;(KdS8/g%I/rU``B:[qNl05QM,?4mBVqeM*&UF>Mo/2'%'PsIDgWM6M]QSq>8ZR9G;-tu_/KIK+JI-1jpiFSi\FK'RgW0A?]Cp81-J*C:bY?Y%O)tSoI=b42B]pf7fVe*BD^?&?)BT$5:_X*-h1Ylal%gL3:Ys<Nf%5^[1Z?<`E*&4,EXZ=Q_2\NX.L^sT$@9)g1,_kC&!7R:#KR#e%h)'Op7=1W#0.JC?j>0%[J:Naa)m,mD$o>GO-p`Aq<+5QC?L;M0!LSuFR]19#Gr/(U!U`qcmLc*'VL)82+C_()N"8i@"j5mY;032=%D[`#DAdW0'#Vd'2C?V;b/pa02i=OKRiL&%=qD:$glTGT#\8h5`^D`L_9WUc`KRjm@F-ha]JW^2LFnuYnSNau!V[)hHVZbHOjnTIA%b5r*<#c@$hRfSmQ/P0W,jH#!$FVAcB2!"a#jRahY6,Z_A&LcFpK\_bj$M)f2[5BdeD2*i/C298j?90D>9?jo!9^m`^#2C3@!qBHF%iSosVg==b"Lo7BN0NVJr)%^TUR#;LF[5A9Qq%',Y$$D<bTLVO3"7-6TamC.Q'hB0oP,;N%NFF*moCTFJ1j;W()j7Xa^/9b>GhSUq%$Q`MB1XjhTXP_ENYgN]Kn]q*VY.!I[4Di=J\_7s^V<C6q,Ak\\ptD/>'A=?.P*mIB@^pL7\*U/2Gj:gNH`bZjJXbY6CHhUig=e5Q%[3K+(YTR&]U$/dZ-c(HrKb+UWGt&hMPu-.uW%7o^'SY\Tb$lKF_U/!hP^ha4F?5gk6r<:[I#)F^q(SG2,a^:L]\Yem9?]Y1iY"Xu%12eaa0YuRYB@&6iFma+<CWf9\c^#O,p3%\i%S/HG+P@Qb^kP*7+J$mnKt;iX\1NP(h#IV7$n,0mK$h[RF<k#Q_'E/3_$#CV+G,I9%->$tk!Eg7i\XS<c/^uDJ61-YBF7oDh>SjG*#7of##p8:;6dS.f_1XHM6,EY(;@H\F,)ca^>[`F"+j5Qn7#3Nf4CK([M'X=/,c2:Y%F4Z9EZ4uftf',QWFnuZ!SK>ukL([2$+UK?'(!QchIXk+'QqNYl+;n[o0UG`N)_p@2%H*qX57%k[$,^0sDF_S3W)UfJjF/h/8G/BP%^fY,(Tc2q[WYeEO0tFiUO])C=7Z>q=@2XSd+9I`,UF3qI7*:^E-S,T['QK^!0G2$3^j13OLi2fT(.3:*g4jjhPlJN=Zj7)CerhBp%lN8u;jX<H'j7G&M5cd@r.2^6_GZ"TFY(Xu#>%BU[bl]2BeC/YV&L@jrF2c!E<m[hI9:EU(F6AU0F;1p4hImiGL@&6(KM[r%.T^dM%gWf5!#.d!7O^!JNB'9TU>7@VISHg2qLrV,Vp)4tTe!]^H^j%d60q#XJo'A*iJY]q8HPttk?IRloC`X.c!$B+c$Ve,AW0DkLVGe.B%p,Zg>UA%g\nopHRn<n5#,ppO>Z#+J"ai$#+Af,D0SVK>F\ClmqKcI2A21Xn7,!goH%pT:(Hsf&:[85._'M"Bp0Ws(R$k3J7kJqfK%A^t8R1B8T7cKbN7biVq>q?fMf@HMhlbi8%9KRkjn(`L5h'FH"VG8TBLi>u(>k&(<T0SL<(@!3Hb,+G/qLG6p$9hP)caLS+6gf2;#%:.jeO0sZKJ-7Y[`j658_/Aj<95,_kp/(/JYbgG8BK0IIKTQ<SY5oU3<i#YNj@9(4@\a#pe5iE:\>S>F$0/]E4,W<P^&72S-i<JY>%8jj8c@j3pmLV>XrN>g`Va9U+cWX&iFCT)TDa9]J:jIO>:kud0aJ/Okl&Ai[1(qit\5>]7f%=,tq0X3\h3\`t5(k@G`;isW7PV?pI%TF]K/p'8m%qo(:WKM!q8L%+W4(ktQ*)l!f)6Ysq"X.WpJ!('Xhi=JUY6&:NEgVZ)/Q[nnaM9ZM3bFBbbQKO'g@2+5Z#k9s/&D89r%=#;X56QCB-#2;utcX"LQS!`JnM%/[GZdH7:FXEJ&Jt%F?_me.2)Gm]8->IZ/Tg593-3cr$N$.*b@,f6]70dnN@U\75%DZ"MF$peO%_WsK)E[Nt=e(/aQLOfMagjYX`MOm]kGk?8RgC0%s;0=r)jtdC.<=\1f'PsS^"Q[G0d5J!u#b`r[bUcRd_TGDf*o*B(@pIWXXfh.u%:4G^rM86'b]Oq84fH73A5fj]J'75IC$WU4IJRSrl!>UGY.,bLV%S_kR/pH"ON_;piN^/P:)#*i7EJBL%@Z1h3igDj(9Hk"uVD9#1%M1D_'gmn*-Vi`*BV?t2;d7K-:B,9?K+(eFH,,W[bjIJ!U,RsiqgJEmF?3akI?a52"M\#tEk[#QR[Xb?E[Y:tjS:jHZks7kddC:FW%K,Ios;UKSUJ"h^T31`^Rmm?)\8bhSgI!han/ka2cD^-elro$5k;9Et8LUOE-#ns4p#uh9.)t;M,\c,9b"bioqAroeoj(7Z^5U+1I%DGBX%%>ks@cJl8u`sFaf..o4nJ?p'bSfS:e7SEmZU-V,h'QF-J>g]KX6pQ"`6cV5>W>-c&WBrj!VO$mV7WnDC`KZ*XgQ$s_r`ulZ%37ks:A%^aMLEYPO2/\=[Ee$rT@*'l\EoUY?!2b#jpS<,T_Dq4`)+.RgNPMY$L"H?NZ]H;=Y)SAN6OZ7L\1PT$Qh,QJ`KEFj?gpW@%+*5+Q7DaFg`Z;p(WA"%Z?,Tm-a2S4;WAYs/^E!WmUXX#6'J,jhc^lR;>,0/tQ_Oo!#8=I7^L2SB8%)\/``g<o%t6%1rDaildqpB2%RMFn/p-FSW;C$BUiESah0VT'YJnM_Y:4elreP="=(QqFidSPrfF$M`c/0D_R64U?_7Y[j;F+k52<",8^KQIG'T-]Q7\ggmQMC_Hn%YopdN,YDt[:bAL87B@q=Qk'`A[r"KIKY!O_n3SXC]_W2o/WB:0PQm!aKlu,)"oqg`XT6;tL*'d,J,tL*1-\H)coP46U-jh1/'[T-%3$)87(6_s:"[a\jA2-Zs!tkcSUIGAQ[3K*GV2HmB%#GVbTPk),f0)7#7@G7n<-/_S,ebir7*,XoAT/Kdrfea&-(("2jd>^8.43KZ%TW8B9E5.ZhW<4Kf"J5#@6)[UY,M_csL+'nm0L*hue3R>PBRPkr21+j[FT2rF`iVadj>1A1F)0-Vi@(4?Hc`QW6r6W'j21k^Gd3+A%Gb)HB!]ZcgC&pB3Zj"X7W<jdagk`1C#/]iJ+h/I$g!C??G0pm:"hZ4$k!SHM7'&B[0?!>`\[5TgpIr,l+Fs5J$uU#]Kd%\BX+MY8%<ZFkuhN].TGOT[NMALBl].hFd\CQsSVTAT-+`=_H\tGE>C!8\R<kpiSNcR(:+MX7N*l%G^l]30o<i&rD&2@68g!s(.g,t'm'1=4<%%92T:Ksp(h#%PS?ZRoNmU>.^`1Fu0e4A^$jKHB"Q+i4(&@D7G*7t^_.;LsC18;m*`mNR(8^ISlij<uM%I$d`<,`'8m.;0'S*`+><%0VLbiNZ!Et7)FUTJ]Od_s25km6Vi1I*^n5[&V7mf8=8aM$<X0c+fas\j-]&&7&A$?nN"hj0N%;X<`H)..\'0e;*m'94)lFV(fe&5%g^9g9Q=r]FL2*4;3WP&]o=R',pdNdYS/Zj2Hj,_ra['Os<7'NT$/6/_1f,ms8o2Kn0eum\MZ>Z0&k.ap.&d"dh,%",$fTbDY*YG5%_Ko4>P%*P]f71ZLdYQO):N=G72En4frSZ#/-9>=H:$HZ-(]<PF"/A$aY?L%`i'J?Has+u;]N/,f^d#.?FL(s4UXD_a:oJu4jdN[_%=G9+g"1=kl0Z+O6)3,Y]2CtH]_2%&2]7t8YiM=PiMMn0["[#hK@D"A:EVGP2UD]FE96Q`B*WIAl85R-"KA<h^8;"@nOIIB%<2g\6%9cDm27`>!)\2`V=+o=P>,A//QfHk/OQCYNg"otD4;bVmAVuT@C`SE27*'r+Uk]ioX.nn/p2L*N(,t+9F2)k`k3i593\gXU%hkBH4%&72o)Nit\mIK>Hf)Ysr#0=_WnX;"M4j0o*@6b,2WE@@*&1%%*@^8[hK^V_O#NL/#]KEHu!.7@8.-':p=m<oLqZc&>`n?O=S&\8AZ%rg?*HAd+H6RkI22,bj`aDXGnbnlfQuU]A2rF(3.(AP07I%u-Q=.WZjPg(5*IUoG>eHO[O=7G2>e%(R"3P+]:BM99mlVoSDg2XYA"%/-nkT,6,;Ne`T'1V;&Wg%4Qj[hP_QQN(P?*!?q;,b2B6qkY341!\&ce9jELQ^S`m[>@G[C`hP1h2F+')2ZU?!6tol0-,11LLNG^O%Y"0d';,%JaPp/'r?lI@l2*#tjmmKI/\4Bb[MFbr*!+,AZeqr9Pj$%,ZL]drVUG-t]+s"8!OQjn*h%Kip%7%XA@H8*(5MO%L6O%@B%VSEV3<$\(_%#h_/+W-7jq3Wj0b0_n:(YsDZf_il[Snj/fL%jf(pj(0#FpfV3L$d&;fO6TNpZ6=g@,AA:)'/B9.TZ.2JPua'/pP$B%.D`Y<V/N,:iDBl=n.mh0GbqfmY^IB90&PBL^Q!hjhhErgN&AF`U-\i(3XZQ?rj+;ZhbWO@S7ZoPVJ#k7IZ0k\ojcqYNK-Hl8".OO%1'<.D2Wj73#s+fNJaPM/EWk\m0O4i*,d>E/Sgsq)U4LIrJRpqPUOg3eYa&^kLh@XXj:Qu;XA&?s(mo#MT[[VA:;KmZ[50LVLQY[T%(<s]a%$\c1&TPfa-%^kg$-#RW*XI`JFKZc1/51mCTKbFr*$VhBEroeOXk9Kn*t2]lKW<XcNaS1kLEI1qM+,8%VUPrOFr3aoh@iM'%>?k2qj"ZXmAM,D43Q+&-5eoEH'>Lm<jtr(QGT'lnKBiUWc\1o91/5c4_:5uD9hDUs;&Ik0:#/]Hg.bHjbEQ\bBG2)]He6@?@"E42%Ns3*@D[Q"M3]r$JNs[rhgHT-U1/LO]7g!ic+EM]k:2sg<_H_2tdk)&;XU']sVW0_2-Ogl%8cU3DJ9`J&LLK=qMO:O14F^!o^2IKQ%#/<Z_X4p1eFQsQ#^dHQ_EU!H<=<//_@Wde#3*c!I4F\oLU6;B/QO8s+!j%F>G3!%M%^?66,<EOZ2k]MFk(7$!1C%3Xf7dYIs#s"-%IP[VNCnFf\F-+:dI::@SP_MPVaV7InaX2$/U-a9i:E0VU(cX9f^,F4IarK?QZid,rJUeQk`3hiC+abeW)+#:Flf']1UJjG`-&/5b%/e;rB4:r^W$lVDaEuoa"YECL*Fp@kBhJAtar6g#Z1pd.9qF`@9ghjJ$2tU.j.6>?E7jZ7'7+qMpLT-)_/o7/e?X)&4%`:@]820)W%K>n.36=#.?mZ;lPiQ"f#=1PFVjTA\;8hV0^Ggc@-cQAiA4eue"Mo%QNU'q-h3,>J6oJ,5CeTHd.S8MODrs".0hl/6VK4*NIb$.[W%S<!H-L8YLl#@dj\ZkWIP&6W2@=<4/M)C;h-4<Qu`I?r-3^12[acrK#+$Ck9[_^2l;)PL>caG0!n*B>=YLh;=8l0`+**8_=b'oSt)%;SX5R"(!Qmp^i'_hNjY5b@-bB8SQGLc>UNV1ea1Q6?=^'d-6L.+1\#0)72H=fi5e=!DmbU(,'LP0Sgqo)X=(3Lnpdlh$I/@;Nr9<%b)&-73+]1MZ7tYQ=XqF(%@pj%L5E2)$,J%@D37Dc'805g!o6PCo'_)o/V,rDXI3HS:QWVE&k!bQ.8M<:A3;\\(j'\P-:1s&g+[k/%k<qT<>m"N&(iQ+>0Gt'O4TjNl`4p+F!ZV4PY'&L'"[obCQiYL^i"/RE/^rNk\d;Jk0U"4',KH2p`*b'].Mf&T#bg!#K^8_4#[h=%%(jo9'*Cc6''W8lDEH#n-7q>p.U1;st@6BeT+f`[hWQ6\<Ls;c`ps+T0IsfGuBJ"gTO#W/4UNV2-Vt,b=&;DHibfsb4F1ReN+l"+*%#Qun:Xcc0ll%!md"26?j0kuCg0,1:)KXAdh0=^k<+E[3"Lb*?F(oW"YCV\neV35EnB]9(i]K+'aGt1!*:\SS`@=j$;F;!pM=4%U(%r)j.Y:b0Do,tm:9;8FqP'NKO9"r'C'eJ9Oq!6u2!dBtod.7espYnZVUUHgmB?p]Tpi+U.B%!`+E0Q.%:R_bPYA7Q6:d9Sj8qqNH]%LW/dW+tC&GEl)#g.0ma94CP1m3<CicS[O]l!FOU;DlTP?_uu0S)iQ9_@Wgls,+)kt9sI.U%M-@/M7es"h1At'5OW^Zc`LgQ^/o5:%ihM3$!D.nKDeXH%r0jBk8NL?<b.Y8*s")u=f'j:X"V&X4:emD\lt;=%I\:S4oKH%"-CXDmj5mWB"QXHDc,Rsj.[D%M#d=gJ$(Zip%8r^(\.]"-k56Ccm3(9f4riT-Jj6O7kWCUHC-=mCWJ^*j_k(m2IZmlM(\VNeg"BA+YZlj`eY84hp"%BDRDB:DQ!/8dcV4`b,E0JLu%n8KX$<3"^\313-[Y007)Y9H-diQ8ZB;T'PSRh/&\7IF6]BEFjm1EdXT1b!!>W,s'hXd/jD-UBbOI!$i%KIOadg'FFb&<jYQl,^C;%XYbZaHK&-[`[b\R0UrrO"'Uc6jO)q>>fp7m<=Z(G:!gH!.r?#%'I$KH[o;C/3j@jB0O2@-L9&E''?>kL$)0!NN6/%jQ@qL+)IGpQ%iZh)5V96p@#7;'c==$ViB.KcnKr@eh@b+Qq0?$CFY=Bf#7c@9&AW!h#.&$F\'QN"IfeprP<8Im/,0^[qnV2S=V+XX4HGdC';ATda%XRjdZ-n(n;+[n2Fn<#J.%2.*J?\Z-ff8#dX`\P'AJJWI'e&DB'NpIOoedV#12,IejF^^E]>o<hnI*`n>9]qabj&\A+Sr$+p%"&cj%>mh*^ISbJ/_O,t)5%I--X+FaeoI!E\#"]AX`UIGF:l/H1"ecmSiB"(KU<#(?&qJXafRsJqNS*=D4o$e!\=rGm6ctHJkZ0-tQ^3i9%&0YG9CLRKi(<GcW\r-VgqCm;R&Au@=/JGC0KV1"JMbEeddf]!dm<2HEKOTTj4jE%oISpKNpa1BY,>]Dg?80\.W]U!SL_2:R:mJID%r>SdmHG9+UH9V,LUJ?GM(('`+XK>C'!u8ntI0mEEIVFa2#@u*sA!Y+T'-.Hk,tmm'crH2T*?eu]nOt'0ZhZMs!SF4)RnQ2C#;i)'%ga*DG#r\C7GoUJel3TuB\1U\10j'CU@(?kqL(OtNcj`qn0_)kNSpIsJP^Fn?(.OY*-6+?t,M_HX\Z=q>+cVW)'/7hNT\ERB?8#kn%,VrD>=WBcT),Cg-r%&+0d'P-e:-M'tl.iJ;$hQg;A;On*Q_dY7@A!s<na^a*\%-^;7"B7LU>HF%<[B%4n%<(>h4UF63bWUj!80rr%O/9sqm`=%a\9o;s#.j:,MiA-CrtJ.;a:=iu#X-A</5u]Tp)>\_;iA\F]P%KE0p\D^nFJBa0uOu=F$b,4<R^05Mu1R^]Z5+hC_X\^%<25_u)bhVUC'OkA$;^no\B"^c(C&W-8(,5Js2lZARkB_m@]!7&@S$i'V?d747L5%T&be;E)'6NF!li;ok@1:1]rHh&>RW@HD+fN^%K\eic&H@W3s)K;KqZEs']IUlE'SHJW\E'I<_VGMB5SHP@c7g1j=X-Vjq,JIMlQH3POg!g%8$!W-iXq<bNXeJkHpHj\BJ<g&)<284%1<o@9&kA^Tm5X7&9*`A$MC)gqh)e:?!tXEhP6!I0(R.6p&tNfKVAF(V*o9,8mhhhkOU4`\^;jtja)M6Ia*gANY+!"#*59IS<Z5n`%8:7nnc&4]HA2L';3ZP_BiCS)^c80?4jR4M`D+t60/clPq@RUpi.BdiW%]L3Ji\=c6D]+9?C![7oNTEX@iT`#M,Cq615rA/dEu5SJ%C#V4%."i]iI!8#]aA'Z_DIO8XD'/<bDl)1!g^8K%WYgjh&0WG\4\-eBZ9Ing.i%Mj$hU6gQH^SQ,pE=SSmi06?>tJH[3MQOWS@_e%4.97mL'u/bE?H!f<'23^E-M]jOT7fWks>pQp62f'4Ur5De"0$cRD_Kb>j:mE0M+"<`'XqlTPFt$.FMPe`<g']\h6*D%Y&Fa-#YX#%Y+maXB``=I_jHH&-A&`h&="r^iFAMF,NtC=En):VV4186[uT&fR$d=.aBB_:jqtU5T.=<$Ob1X5C6*V,S9qgcjtMgn:]iRX%A\<\%1hr[taC5@WO/;f3:]i9l=S1,-R/%QsV+h_e_/G<neH/5L=W2'HbD=RJ.5)$\)[7Y2lf,JuHjkQ/04*4G>9_rANGY>8*H;U\U?&]!%BSFRajlhu+!$'ppM-^@=:^iI[)7gCarNqUQRNsrgYG1ln)Es*&.Ut['MHZtnP/H?X5\ZCb\7EUE;o`iuSdZfIN#_&I"MmJJ-:/4a%$niXPq01%Phglp`==I(&*[:/'/)mQJ`\4/)DDC++[=faDf8R[M7*3MYF`2uh_l&\/NJhA\+b\3C'o>-^EF#Xj0m#A9^t-%O:<TGT%$M;BuH?HeN_mY7PJaOE<70-A9bJ`Y%V/RbiMomGAq6MK\kjZf4mM;U]%>*P2p'F3T*?+!f'u_jR7g)>HqGGO$mJqQmFWMs<9OV!I%bhtL'%f*sR^c<bg3:MFh(_)Y?VK*Ngo"ahG)0E)b/F,q5Mc^#o63`IdjtN8S.Wn^i"MitT4UHNW02YP'\)[Th7QHEtSsUa7(]m%%%M\-[m['>:2?KKHRJsdr]qpoj9>2ek<#bdTs#bpq>jB'rROCI``,OR=^9qkq0#A(j)>5TV!lU)Z3GT32YB`G9LF5)s#]?^!]XEW;U%!h962OdlYO?E+h.^q`R4fT+t*&is5K`CMY)gm/uXm8O&ZO%HWlEjZB0__Rkm6+t:@@ZclG36"1sZ%d-*bIhr?iYh`=aYc7.[F#%[%2r;W7>$2d?SD5I?'X^:b`[:-rGAnAO?Wp5@eZ`2L*GEIC]!NAmVWjH`W2n+c/E!1(YcFMK9''dt.kt'@a1[C?l"goC41sH!jA`eY%/de-7T"OT_S[Lc.=MJ:e^MTVYC$e)r.DqGnoJ(-#gpW_[8GF_nIJhR2Xu+.jZ7Km;27T*UUDk;'GE]piopPKhiVYe8lJQmc%DSq3%lKGY4Nh.U'J?hPMZ(M=M&&oJ6Mj0:!(L9Rr*h2<U8s5YsZ]h6@i@5*.-1WbG;'eV7Jfh^NB3?c(EAYdfr@#YLM1CHkP@MT@PSn+8%=#hrD=Q?JV$)B,2\`2BN'HS<raXJ8V-[Hi$HR]GLr>t!0^,3_o$MArsK6U5EqKku/d)N\8EHUMGA0G+'(:c'[e_%L_j?tJT'KVfl%e-^8>.LJtQ`?:;^S9uUc0+Q8__:qEb2o8M%Ui)T1;OsmXS?lel[.2Y91BRcG2lc842*WNbNahFkicK"Gl%CpgV%OuRP6h8E3=9kh%eWD$eIu:%:JliaUP&DP>7+.54=\hA6i/#mo72_]A&0J)mT__P[p;[M2SX5jUGGhDX\`_*nZ.[[0kM&.^M[pB/<MqgD<p)D9hP#;X%<i]."Kf`*k-th*:s.Ua!p'%EQ6VQkY6_hd#Rrl_BI36nn=LIU!ZBURj]VE"pfD=a0Hj3]]k06Im+Of-ZL8)UW)-0Oqg/Js%1ahHM%H0;S'/ear"^:qed9MJ]&`.[?/C)3kbFuq]2TK$=@4L7AF%(m:\YN#G_V"W//#jmfY2W+SKaU2Ce/?m.(<9cT<\]1)r8iKWd9_@or%=A]fF=dVdf\j5t9S:Q.<Z2QYHbJ/<rj[Bo/J'4h(VIO(/b*D*TLRGg3VGqP1Oc+\d9d*OLWW(7,re!H2jmW&0=-L-N:!s7$-B?hg%L1VT5P@@?H7hB4Y#"Y&eDUq3!4-bMu^P0X$7Bg>*Yq!pT/\_(m2Y1cD/#VZm'U)7T0c[$US]aT"M(H3ns1Km*rRKd<j$L1km_?27%1o:33q,8kc*fdk^^1m,@XX_>X<H1UA11,H(-"C/V)P<0X!/h*s5P:r:RV^I<JZi,b5V,NdpaQEubD,DmhNblf'mS>$^LapW2&2#R%[:MUZ^b]Oe(\>pEs3S3W%\'U7fW@RTkWM,?R@F`^c_@JK*gWEf*_"hu(I#4\p!+@t<oE6:(Q5l8ai,l"Ol3.6Sf_N%K]Md4MN5++%BTq&HqDE1]b@-Mmn'o([WW2V"J7YG=-;27k6N>:r-f1f&Zu'mLDk3rtQIW-Alc'Ii]RMTh6G1m8Ecetn24F`'j)=HDh0nIrN&K@2%o!\8)*(m_f.*)M6D6&RL>iKN<j$7*(pMt!COZi9j]T[Lp*h;d+aTB4K6[14hDN;e:Ka*@V\LBhq(ZV<r<$#D9oV4J%VUpE@U&!e%%/qMB7/$]lg7[<+SZ0N'9D/3>ic4a'C\d%(`'XaMZJ#;A-hdpuSKo?HKH8tD6eUmhVinC>^r4Q!?f4gUnFKrDR2*hNec$++G)Cq,]%Iqr>7hW-DK73Wd(9A;d_$:-BAi8X2o7>>?8'dme8IYsmOoE!@1RdOj/=)qKj<9Yf(7o1^m0s.l4iu^ppRk:X@k3in[U/j]u^A;^F%T<Y1QGpqMZ0aj:-Xo3TW7bTcrHT;gjDiPF"4ju#(,=dbl.]?Q-d#>(C^C[Aak1<5d1PdEUm-n:Y4kk^a=dDdu1g-,V4[G7.es8jM%P#kD"]&kqu-&NC="Uc[s;BZa-:M-&lpg0M5I+Z"pF7ZCYK2lM=:`;fh24dQ(/UtqpF(mMIO#_(VV#.qOa+4CDXG3WK.4]nNrCWBI%02&YPo@molG<;eD/\mmBKoe7>,2_Tb4^,'@L0#n[Y:XYN7K,C4<H;$KSQ8rg.&JkCMXQi*\X`R8<s"Y\"9j_;4'9@"U1H\I/(p;'%A@_(?II3I^hrRmN[hG.pOR6_BNGY4Zkbh^A6V=+&Rir(u5>N;3Z,K=.[o<.[.slU5VQutn\:/Q,\Xr$JgD4$c7Cm'0Z11>=mNJt!%3$,Fj4Bh%r73Nd9*$aIcE\9_&8t5Id*\Y4ji=t3U7f$9tJs]DO_eX(:]0cKKZ\CB"=:C-^k+cF+acN!'Fic=S"3M=!'RC*?'?Thf%3]em0oDFAa0T[%'h_6G/g`_4k.s$Iob'0k#*'J-*n%j<^%Rs5;Mb[QGFL'ub,>-6thY-lOgImPEIuZZ$lh<g+.Gqp%e\6.,]ii^Q%H@b<BVNi)K5U".lk&8nU0*7Fmg99CooUh@<P&?9O\6kj7YKr!AHJeMC4$d$e1aT:[Y&CL2gN?I\C_$9XHH:VsDr,ZNTjj%cZ<dKY%IdtV=ne^E174*D0o.D:Y2M]QX<W;-)q_&t)R2de*P\-'A(("_g9DG_%;tH[RKf0>ZchOnbmXj5_,IUY=Cb85WKT"0f[Nn3[f$%Q*%(2lk-Yq7rHopgrT[up\gjR+\cCtY>JD6NAF1GE'8C)inS-hN*n/K6O(&k;h@H.K5:g[%B9%@3H#ZfSnUJ!8UR[`cgKel7d)AQ69i%+`FLnl<ia="mDPp@3/4\I6BXjWh`q0JNSBQ-Uj<,Pj]6egMcfgO$::=J&#u?Ot6BN/t=<XFY&"qjHdmodM.'p,i;4)_'4XE+[)fK%/`eUo:SC=#-k]C+f<&mp4n_+9N?Pbsq4!]FhARTtXccGk7$8H$il/X1aVUDZca:lJX@CBq'ap399A;:N6R2`Z;8(&fju#R[)]W2?%K"X,>4To^rH3Qg5gE]ogZ>g+HSag<+H#?iD'KA*&jGQbGm`;+RB.V<NJ_C)eP?_4m\"Y]3^Q.&/_S>QH(PV2o)=Y(/0t>^qp/Wne%<u70pUNijK[md71K5;!!45N7U*q&oBG=._fm3]ejZ6(>EZUMGh5NW5(*rEH9DQ#V;GMKNZ/G[opPDMjbeLk+FOfIA2&L^gR0&XkQ%0:uFV;ODfLrG5-\qI`hJC?t>I":W!BhM>io&MeBET9E&>b*o9BLQlD[<L68A:bs,h2\I!@hpCqdm(FZf\K31Dj%0$+ReBlWj$(e*%P;XApSYghD**5np\G9"N^<'NR/V1,+='rO%8+;!mf!Kr%6XTg&5;['-@5sPF=E*+OO[63)9DI+;BMMi>ril%VmEQD+r2[AOq`;j&%e`CZL5R+j'a!uWF5(uCUPsgpL?-7H+OU[S(X@[[$d7s:Flcp-$gW:4(+P6-''[%b9\;3P5`RIb9l*TMlgTC/qQTKG*b(#DiD-_FX%>;YBZioWF$blYWUd]KhZ<Te+:qqq^6:A+cSE3ZnjloTXl5K$-4@hrcd.lBG5P9Mi8Ge_YaCq'iS.LSIPe(faNKFN*DR_S*6ZX)r;%@8psLju#ZiM'J@'ki[Ja8PEDtObre)cQJiY`c[+@D;!u,Q]8QhPg@ebb)ATPGL/FtP"Wkfp1h*j(;mch$%aCsU-qG(YiH#a$Kp<D%#gdIQ3's%og8q=bG*UgW`P,+!f>%4t`?8=&RHdF*Kc!GZ/DXsN]udIJem($6cT1'2Z=Fk6ar9/?C,,,;Yj"\e%2H,u2'.;op4mAP%gR?:?69\4';=Pi6cb?"2S^opLOmAgr5Sj1E?C_ZSnM.4H9DY,pRmJogo4]7*gS30P9F=Ie8@gM>C'%\nk%)Lb`3[^F.-b_T2YIJr%[k'frQ=.)1+imM\N.-b*ke(sBEZAaA(/n7E0<7H$]?TRi`)r9fb/"mL9-g]YU.<m(>ib\4D>k_'&\bc/9\Wn6j!WC=B"b=q:K#9)%aI%R>P-_j<^!f_C9gS:XotA#j!dR$HSFEu2F3+;g&n>-XL*sFK,Hj\gE45.PA/O[m0`4S-U7jLGDYS_t%N;^/k%8W#7;58R>]^oW%&aT1SG=\Z!XG74gq<Nr=P>gP.UhUK4fqqm$4@HdBFO]&>$6?Q8jHl?[W90p/p<'X+Xck&RM]G%11mue(G28^bHqrYd:Y.0>[8_!,%IB!L[6#mOsDNtLB`2]\>@k3?NeLBZ>Qb\i^^@nmU3a#3J`07<GBI^/C[7XbHkH`FjVr2j)A?_aZf%uC&?BK"BP0j0@4MJMT4",9%%Eet-=NhcB^jMM*K(/b3JT3F-\DVk&m$h7ZU\IPH6&C0"K3't[k;g_bSjZPY1r:(7\P:-<RpicVMa!:G*N5%RC%j$;LC%/B?iT,G)%>ni?4n#I,uG`'7"lOOJVd:_qNSqWC.@J!DZH89p]_q4/&Ya@PI=805$Vm;39\6/>rNkq\JKuIoJ$17@6NLo9=l"ZhAEC@h`-gJF+%[r@CmM'@?LVj$,)<mt(+^#]r)?V1'Tbh,C@+g1$JMLqX)j=-9WNfOj!mX/enTL9[:3l%TZPdXBY@+p2BUMp>2B)YWj%1*;]U"2"<%O@:8+L@0+0l#d='S6cXp08^?ZJ_Jt24fjr(Hq''@]1Y;kC5YZ<XO7T`;WgX#Wp"U5&S_V>D/.bXVICZWGGO6n6_Zt@$Kr`CT;&n2%O)"!PN!d.)nZN.)7-ik33SRr_`7:mRS.X#+h\1UX2o&.uF?MK:FF`?$kK"7RMo!jkX>7HH5!+aSM"d5J,;G9,Y&P-XZsqrs>er'G%&K-W@ND%L8!TFqn*EPLe&c4;W5qW0^"(l(3OUT$gSiM2\;nTf&'T8)qEQQ+CA7gcsN=5<saQFBX*^<'h\Dr-&1.+O:aMlBo8+P.O%a]![7:]6D<oeC`L<Ci2cm49"d7KpD)&I5Gu.a+sUi=0&#+Z?@sL0$TphOq[(%R@PA$AdS[6YiV\A@=:=<N63^n25R=Pnu]Gftlc:%_(:WB\d)jc$AO/U(i[X[m7jPk<U]D3gV-16b59@>Bk;h">Tm;UY0/'djan"a$'?)k1D`$>&R$uBD6E@e,9piok_u=.&]\sDm(!2p%%.p0C%s.ga)Grj<322J-7;'!TJ3UVs,X%ld7blE,Pj&P21ub&q#h4B^)JE"b^o7o<21hm3n5^b:CB.pOiNt52>9fO$OmI/.rtu\?%f-I%[hU'=h\gA4Vnr6*CdR[",`QOC6=sC<>*VTiRL#&U0ZIO)W;,-S4h/_e,h,]`iVT4r]^Vli"^)n<,ah@Xk4+0SfcW8>Xl'Cq%%mC)tZqLssaIXJZn8%;>i[3&gN@3*g%YEE<9;eF(Wg;i:/cQAtH?7#/KV>HjJJq*Xf60drLG4CrO4<uD;ailu:o%`i2LWo"@eC.p0%:oQj1'&*<sW)flNVST<,qD$lV8BJWhgV:ht*shpKS:H_K0G4Vn\-+%i?mH^SEY)PAj<`T&(#E7LkR/W/@/p=YHq;A_Qm<\[eWlNV%ig_;dF6gc$Z8jN$eYIW8*+`(<mu>7^_T@+RWQ"/;nNr/?5k,4^]/H\8(8UZ_0[7^AMT#t+LSW+c&"1kL+!jnDk?Z:)R%->%DdR($%5A#LSjGI:iP[A!mO.#6Brq_`;53B\Bg%)n&)1qbS0@p8U;'I^8#Y(r4-qCeq/<%`+8+FKN5iP+!0aK?p&n@F8)l':j6MW@W6S9&u%=#uO2N&'TsY#Hthg6Y)HF.o:Q<8*:GS1Dk0W9bDP5?Abs;+YjQ2S)d3NOkr`gGCCQ7\/&-V&FJ#(M]+!E:PDLEMM;\=5I79j=R,.%Art.4i_0OIV;;MH;^Sl@jODk^?s+*!_fDW+bm+uB6H)R5S@@.,TMV63h@8Z9dZm2$b-QBi</P,2YEQtg&ghITAlV$_MkaJQ4[2,3%J(T)rg&&qr]'KK:p-TCu*L/P0e/jH^<Z'Y4fpkP-#]I<V]T!c<&Jd;*jY!KQ".=%;f0'3'?9\GK4TO'in7bhZN'W3ZIo4W?i<V#`%D2mo8^-(Q!`am;uKY!U0Pr2]TnOZE\M&*22H:^S0i[!D_CjTFP'Si#DVf_7]F,@;sQ%!7b%03SonFZb^qj8+AcP-cA"*n^5P?edE%#0toC6G"G=NEik!p=`&N)`_d\lg9QZ`oF>[Bs-(*Cb.Gs\%&c08rkO=?][i#:@@6eLU50$7,-i^<MW%s^MFhJ#oEAGGLEL1X=W48%h(3EJ>(,WP#%b'N#bKb"o(NCuP.If@EhQ1/k9EP'fG<O2V0JaZLOAli8Mn`j4K=bq;>r(1kIgRo5AsQ&OrS6&iWY)lX$O,$&?%0A%._JZ\/R-2iZe=KP-Z*a]q7(amjsjbZW>2t!oX3s<?!4%dr[W@]T!]n%,n+KqgCo%B9_7PN?g.nC\6(XjH;-_&an$nc+=FA_`ULH:%iGOO-S_V6R]1E#E$K1KrXZ-H:#Fcj&GRmsQLq!=7;2X$S]8S[%R3CeD3P>tj8);Xc<@rNf;\(cY)g$I"4#!d9^/@]<&);4'*XN+X%:"lOVOsr=Pf\g*mDV07P$4./:6/-6>(K/)MH(rQQo/trN9XD>]HP.ES;dNr5Y>.[2=%5`hYD#nQT+dFI+"\m$qUUgAVfpm6efcY2%]gq]\cL,:UJ]?oTc)3a*P`@H:`^NsL6Me(CBlj1ljc1\U+?KS,OA'ZH3&Y^E)-TGJQn:E[ntm^n.%&Sc7F[Kh_m`jpF^T*KA[,tN%RtA6(QKD!-4=UG5`FL*26C,`1WP43_<<5tK_!/OO+o%?e%GgSrS/FH;F1-bCg32bkbD%MR<e71[=HMVnRr]#HhttVQ6Op)!Do)UX%aLE42C8tO]I"!lpnRf-?S8HG,`rR2KBpJm8m<,qi]ALMiB7uQ<WZTTQBn@WNT_"K0>GXiRDKD=adVECrJsSp08rI@9\)q7Fo`Y:e%eDG&*5@g8b1=I43XiIm:$41g'ScT?o>\CJG1:a^$p^X/>"gUKj'<4V;1JN=+TkN(:BbI!q]3FcR1S(_=>r&aLesQ#LmU`$<"0sQ#%;+Yn'<p:;%nQ]\;*m;Z@<1[t>n84$?:$o6Z4pN^1#rUs':KHcgll\9";aOp2ofVE?e5M_*cI9)[5ZtV"\PM)UY2i8O2A83URk,`J%CgSMd,TZKu6"Hs.VVZ#VJuN$f9C-?;7UJ_!ZQ.g0DbIGEIM(Rr8ZoXK3K3,4VPt\$\[nUf\d`C!VH!I_4de@K9Y72*5]/L04;4R5%Y.7.q4"Ck@=[8VdWQnd]%o=:?CFXb5a]lYZG<*d/-:;tcQ(C=EY_ba\<4,5uTRK6G6Qmn36rYMbOse9P_blu6#a[#-\4RgCi"o=I%5#^,SCHYO2?a$>QAQDI[HHo!dT^7pI^ZX7<ZuKs..*R:j8M4hiR-n89EUlB7kEj0Ei8X=R.9rI2lMl)tQ?t\P-JRUBZW,Pl#2,q3%h22;B=dp!q[`bp-J(^sY\dYXQ/gNI?3KE_I[j'eH<a:Rk3kX'O!dk(=$2r,N;DM(O"=\4&KLGjufJ"2=H=7JL)":9OmC,YLCPa%"%KuR!tg_,b`oJ#aRQYWLj[E*Ge%KZ>U^lSC),QO%ANlX9K1**e1rOa#qfG/3iI*T/h#P-?ojNE^??``*6PA]gco$1#-r,o8HLnfWh%$-J+*m?n;@YpiaSD*!Rm?sts\S(mch0A>cPGbO53e&&K%e@?HRYVrgsVJou^\1jEI94"Gl%;a,l*0Z#%ZOgj3BpA0;j9%ddD\&f-%.iVo6Z?]Mgg,O2n!D,%$h<%\f>l\B-6o%TUdU;'pqr`p&QpaS//f+!1e*em^?>rtEOSNfjh1CXfj9M-)*4,P6;%@XR$a!fdltu4A%%NBQc[`p4X[KOn72SW;%W'MX&TVjY;]<`eV-7JJ'b2hboRHY`<K1,Mm`$T^O@.=ZK?$Hg#"\CP+Nm(g4fs_BU5(qgQ.[h5be_[/^%p*<0n4<^fO=@pY\n=5W8FLP/?21F]@/?N`DV+6qYRC=4$-6X`]Z*I6L(0#(^QGl98Q8Lk&6/=(F9:FTlmUpe&C6.FVB\CdTRARB`%k7H<3Gj]Xt)[F^Qn'0P(1daIhXKbo7UQ.KT;m-s;Z2lH,#\-Skf/4:UJAf#4`:nt&IHd[4\KoD7nf!hi<$n-hf/^5Ij7tN[l['<5%UHZdee7#oV$\==Ho7gRi?S8-2_#Lbp.f*,c<FXq?lX?BN-XFDOcd3l579<Xtei+@*5@9Gg<),Vg=<#R%J2J!dQh1Xu2mKNKj$'iJ%h<9nnYP4A6o%-D;]4-S%P/]s0ft]-Xa^udrm#$pK78b(=CEo$[,e&bT[jq[<'e+$raUQJ)O\BsbYIe9!?'4VG>2I?M)p*FOSSoce%?#[5A(=s;+CW(OYjKAeNQsGLA'J]Ik+'E*733k&Hfgn$5TV#LEdKYfeaBEojZ@)jm]-Fq9ol@lu]3rQ_OQ8mfg]`o0MHi+0m7%<:%"Y"BNl&Ep#$S^HQ]l,%k%33.oE.O'+cl5&4Z&K;XC;uhQ<P;=l2+MM!/]D>J.RU>Ti@dA5g62<XR=f%&)mdN'\LJl)9-G!uZRf5&%R6o/i!6!eFQ"A6V0P&\U1>#5/0o"sa@If_ISGW:K*2FlEe@arp53qYrnERmD[IbCIE8k`X"`:\4O&shfq@M;J)kZA[X.^*F.87oU%pUA]:md(JF?m]7#O[ZmT(Q,!3Mu@[B)4V]Fc>niB[mpo%H&u4JKJ,AmpNEbk&^mULrNH)I&t?.^glqW/&Q$OQdDi4T8Iu>Zm[MEg%oj]Hhkqh(YD4(u/2ibA\63k,I5F_>"e*P<d=#W961ml81f",#jD^WG>qgcjJa?c$Q!,0rdnjI.I;EJukKT&\]L0"/Bg<unS*!\mp%R5IN7B=^FNl)kd^eX_&sAVU<H6\/V!@OUCT5/0ck"+G.U800%Vgls=+=0M81n`!0q_V=nFda"_!Y,2Mo94jA,(9QZHB5.0T8oKtF%RiIlEl:!0bE;PP:.9$Q8edpkZl%3Z`?OLC@HS8%aK%7`H9_kgDY!RdC/I9Cu8?Wfs[H<0jm5<tU*'H/]j.<b]'sC2M*-=.1GBG9+%%TrkI_q'5\_c26sC;:S=2t?r+*l5m`GiTI2r5`$TJh^UWRg6%d,Pl](6Os=a/'RW#N-YV-O'(][IXMC@*\l@NC\nIZI0K"e7!k!i%mqYJh4\0rCNF1_e+/.d@f_c>2DS>!l-Jcc=H^=M!>JEG/O5T^DmXBk?+$&kP,l&tGr&R+-7r\DQhL:.9?\.c4`p"Slr=R9RM!qe]%m2km!p-CE`qiUtEICUgYE)h;DYsQ9/`aC??E.JfI)<?j?nc<8R?fNC#r9`SQMa!f_0*(=IGt_QCXgAYV]9l5$s#EZkUm+JS;aO>W%j%4X)X]@6_T<o9=:9ttc#(5P5W"J.=N%K6'*_G\qB,6Q(KFgJ3fu^J-#L\H6C,V=Npg+Z69$%I0\:in5j!$ls+Ff6Bh9)OCa&W4E%2X-XZc8Q-D`(W4O(3*p.9p$G_;Y4VZQm>j1FVc:]FoWuVL]tSh-J7.Kh+NbRQJGTYBruWWg.cGck&Xgs@-Od6&ddp9"2][GJV@Bo%a<8MV@4Np.Gb[j9:iooVr7B"ud7QWe@cg/Bg:)\7UO5"65IG_?fM0QZ)3SdW22(HJ8%0Hapq[C2eB(G*JLi18P.GnW'("`r02r]:%I:a+Um$uACeA9ljJ"()q2c.:bINO7/99$E0s74h.X7OOZ;9B&*3t.g5+NOkki,M%',/MZ@'J#ncgPT@A9idRod8,ra0NjjBaWk:q%^!'aBf$g^pQq;L!K62'+_/-a-YmTG\0(tcGUh@[8$p"0dFmL(cDr7f7klp,u9q.!<n!#CP&tJ5'DYns?9.PT\7]8'RARUPU:`%IP%Q/G8t)pgL_HM*"79CBr"h>ijN;FL()<fT=FY(YXM!<YnZZ]c/`XHeEZfm<MhZiodJ_c8],=TAa':)'lt>cR"Ji!hA1LBi8;!I[mg%&AMuf/U8Z<<%%6;"3I6RHkmA@X^-jg44$7IEuW1AQ,B!,]$>9(F67;q0VJtnAHg4UNn!I_CF=%"16dc'F=`sp$sE45$%B6+mjCRY%iVDlb#UU(#3uGdkPh"Shj>!.7-Vi%neB[juem2Oo213Qlm`H:^BeA0WJ@l5=Kt.*:PkHLiiZCnb^48T]+NZ.hj9VS%_3J)Hb6nU<%#g0fqC#2397kj*rps,#l3FG+U@%d["FG,\2UIeg"7YIb)INLkR,7O5WRHcT_4^-CMJe>dZ6<^QhXs<H/&IEf<N?-u`,CoIp;gSPO%*J([9=POL[qZtif_XLmJH3^&1(%c\q!tXnZ/&^o_+s(13=%M?`I!brb*Y?I=BR*u??NHWLWQkV@q#V'i6DR,uoG*D_!a7a=XU"ds%#g'd^Bj]i-0;.)F\9iaQNr\Y]&q5NI^As:T;">!9q$8r%+m9`8oDtgQ!nT*1liXnK"MA)Ni($oI4\u%a3e'Sq+5uloM#.d;s+nh4%U?R`[r=R6Q+h[i6pjX[on5q7"oqRZO=+pn!ncX/*%).%u.WmG26b"V70N;'iM_Ej%BXiu30B];2A$LfEM@a..>a:9c91rO>T6R;3%0p]']Md<uE:_MfoE5l!dj/r[.=6G/ZVc"OF3KO'3+.kbK%<='Do$topOccmWa]5U/Tqoe4p>iM=b#guA.'rKca1d:AO.>SF)Y_>>%*jOQ<m-g&J5#T<@=l\@j<fM*b(C?>`?`_G3M473mElerX)jH)@j]'sqCt"F@/SsTe[k6^K28?Wm^+^Wl`d7^)"6:9j;4q>_IN%C'%(."<JHFAOS@Ol?f&dJr'T#o>"+&?("e=1/=K-EhACm`?"#<TLW`M-3CGQ[EWiq)E[Vl:M"U)Xr@"A6>0]*<_DS<[,RMLetO\5+O$%3Qe11rn_H.#7%u%9O>7Z/ImK3&-\b\UEba@9:b+YWRq`IXiBmoC^$=OEu[Kt;WE,"'69Vn<^Ze>P[G"r:-"H2JLl)lM8ad>BeLa=%oP(U5ISQPt"6UZW!r!4!1R+QKE;7_KIu5EhP)%TS3E`A,T,;[-DaMRg40m.9SFoU,Q"1_2LnZ54o_FjojZ!`@IETSN(46MVCmB=@%`g-khp9#safD[SVZ_p-6MXLB&d2;<NNCV.#nK80=pJeh9.oJ:acVg-1QA&peiD`@=\qb>Q"nG!3,e\Z;8)cuP<oT@m@^Lh`!`sb1%P5PWW6Sng+5NGc*/i1mp<<4Df>.c[34s\'"XdLqiCYoQ"Ue9]dB9Y<lLLkN[o(Qt<Xec?4KU9cO0:m/=;p#"n#9*85FUr`E[-%YZ%JN.3Ia0`&lcqfOa&/OM0T4RQG2$$G4B?Au5VtYYG9V*Ck^Do0*[o6O[fo_[@r51V/V^_Sbs7&5NUo#2bMOe^""cpRfSV'IJ+G&@o%9"_Ls>iOQTgdSBQPi*0-^m23nALE))<'>:)_[r>.+M"iS$?Sn'I1Ssi^do)M**q2]-24A@$-7&3e)]jHdbn&uVqEsUUhW'uLDH;.%KJF(UNeQneNlr[K/Wq0s`oi]>A5ZrW2e>W)PWGA!>:))2F!6SL4%PJr4_^P/Vb6$^FlqcSg0Qj'LS'r-nHd>]Mht2[3smZ$`:J'P%"sT5aI((d5:\V;]#N8%J;U1oGm0_ZRJmgXqJsW!8)0K3GHb@2:*#S8Bhd2gj34Uj'b2aql@IM"S;fC;#QG36>pSf33kqL??(A`I8%'=Qe*XuY9uV!]b%pET9V^k,q"_ahT=80S!M<IWqqO3I2#ReIQfHc1MC_o#!_pkU)CKU"cOhI>($Y!GW[!7/>gUM%$i(1k\G,C3&C%)[M3AhO!'hg#j=qM,0bD4p[I6g5dDid'om$U=)i\?TcRr"\.2s/5$IGWF7MNk0CDsKkQs?MV+6AGfUDHA_uG36<Di\TYg9,4a[S>%cJ=bEQ&FN]WS7+DlA*245MSD1`OdKc-b-X9I"Y#ejN&r7RW,O4nZJR<F`;`np8/f9l`X!J"a"7(YHK@Tn,g`:q93S(_F_%-X!&8R%EiaD`p@3hj:1=YFl#<Ps#g&;'f+5sNnH"i0l;VDc!_I=.[ZdhrSS[\;oC0<Heur/G9XOi&h7thNY^UedPi7Di-W$/<NjM$JOb.?X%>;XA[*8W_pGe`S!Fq%(!],c\iSPf[6dZK_HjCEC67'^Nt&)?,UG3h+IhOp3(C:[\Wg2\?t^OPWZq2Ep7"UB3u.Q^)1[*Hl^fS6PB%Z_Q&g:ATW[^g%ILAU]-_[W@%j1^l6VNLaoHn"VG!DC[H7JZ$\#pNM+&/b8$#.')ao;p^'_Y#J"VId]DIqgH![=BBS!I>u1GrV9L[%mdD'&FgUej<6[al;fhAjg>;&8ps+!61`><!hd7Hqgo[n,qb'Cg>YdLkPB<(EffRAeQdRYcKXq%'qWt@a2C.AQ7HGG5a-O)deh3Al%'j:%<k7.4MK#Na-\LXG,P\``l2C'=P>EU+Od%jGf)OPRK&S^E?$iM3cHYmh/ldfpYD%]H%`k*WR23Ua7SZPDjM,%:"Z3KL\l$,UQ%h,h;pW>41QR3Pc\DJ$2&Z`D\Z7=):""2\k):7=QPaeHnuec&1F(u;N8*5@SiONCM^0EQ;/8$=0pb$n1.U5sL<Fn%<31iJCMP5tYW%=,.G,[aj7ZFsfr*Mpic#[>D#q"N%iH!Iu)VRibcQXmQF:<Lub"g-Ofb$sJL)ZGBHQ[-4S`+O&-8b7ZCEni[Ae0e^fj2f&hsQ:,4$%$>o(cRjfC$V\DIfgL1.`FMUhP`D9YTZD$C<$]dE<XkKVo#tS#`,RPj0QDsNSb@FZ\W6F*;;\V((f;I5p[*:p\]-;Z]/IT9pp&<5(%k@$ckrJ%m7[fn'89&N8lW3-RD=^L"+RQu`D8ilQtGlMfeWT[*/X!Do.ib3aA5W$lpWIm.OR@5IN?EZ]LP/hK!L&Qr-Wlg)SNiET]%Hi2rk^ZA6HB&ldN#"]\%7fet2*-I`Z5,u-^3#^ZR&4XR4l0\3`+Ktf?#0>u*%ZoRdanYdh\R^):if`j-R7kPl?*F-TU8,VCT@*YU%V]YrhYJ:+l?iBQET7$Ir:Hj:-L\JR]makh3USjr\Xf<LU3Zhn3'W6e`%=-,8C#H$TDn=+L.9op^4sE-^dIAOkc9)=D^AG#YrZg`1%mQmkre8S/9OI=Ug\"@I$Tb_Y(cLR5u7>ngF$d;DW:9+^hTi@3,<W7?eWC-*KFDg'QA8<cY+f*l6!XbM3!^no!8BQ!$f0cadM!bEh%/^A1[o0T-LWt=pSNGm;."[=cKYU/p@Ru\%]#hBHeq4q*"J1]:7lc@@q"Ju_h1\tXA"hc8D<TO'p`h@W4'g4F"Q@L3m\e\9i><fVP%9$$'XXEg(S9[$>nD=e0+>E`n;3CGO'\6`1?:_T*D)9B[jcDD1&8V622[Ai5TPD,g#/H%R#Q/V7>T@Ii0O?JSCI%ckS.[1'U>O15L%eOLd8epQCSf4'9q1Wbk8TF.XGReY.P;`?<f>s*t,8=(%39E'-C/D_d5O\30<<OrmP'&uX?9abY=&#]t%</:3ilO?F]FPr/#YJtP0%>U5I&pioSM\)NZ@.p#@W-Wiu3XQG\X_Fmqf)guIX=uD^ES6(A;?3Xc#9U\CZAPjr&NKJo.+g\7\BNc1<fnpa%^qM%2.e0L_%#^oH%JdcN@`T3MDWNprQ,8nZMdJiZO3HDl[\2bUJc6^2JZ73?Cc@X>_BU#ESmc*n/(WI?gc<;:8<igs_T(JqJPe8LH7n&Cj-#nEHQkFqs%[<Pu_+?RbS))M>)fiG;kH%Ef/X#lAf>HG:(*<9JN!gf*tXAGLGa`<^feW7(,n%Ad-[B<8b0<ZM;%Nre)?-$6:KhHaZ<ThpcTgguO%Dj@4XG7CCZb*se(s4p"em0+bAA*q\gNrTiUS]#eV]42e#NBXpW:<dqlVd6_q?_,aej#)Ff)BuNd$QAE`Y\X9cr*s7EOoSk9E*$Oe%LeemeLWuZ._RICGaKNfY;X3*5CepN4<j.2C#R`@;VJV(tRkndpo&#>Z&a-!W"T"B[D&*?!2V2X0m*?5'Q8]"f)sIjpHm'O&QUk/O%852hXYpJOb%F0-'SU$XN,*jMn)kDFI[4,OJ/G&"2CD:h,T'^6O[Q.nCUY/dc/DI5g6W&o/^8jR.b#cW8MQKPX^+b5QZ:(B,g8n$*%>o@C^"VhG=NenK"Ttbf@i]JH<S&nO("p:-DEe&]=&`[IY[5NDL"F3,Pk''OBL@O5oeS<f/aoP/%ads!MG=JI)Y3(m8F,86n`M)\2%8<n%tjn@@b<o8lbq%hV.2OF$t#$G1'[Y_Xj]$9$D4/dQjf@JG1$-(j'*C`2QmR/'Na!PL13P0UC.k/_</WsZYk^7cjVmW!(M/tdp%%5q0@Nggo<btdQI>4kdQL$b6IohL)OZ\l%c/jJTrVrIM$RrQ-OQ4!4e[3,!PX'9[1VtJ/0,m9AuZbkS1=`X,\#=@D<2:#EoC9)7c%]S%iB\UMXL;fodQK-OTX!J#.D(7'nZpp^%T?(3rl&^_I:ji2%pYhPV!JSalSaWsS3c%\@X'>taJ.@:WLMuD&[qI67Y_*`Qgr6Z]m%SL:Ji`ZA,2S\"VqTJU0[=UK;ArO<?a_8VRs;eVqn=0`28rDF=(YC%7[m:dS_$$BYY'](%M##%-;3Da7Skql,.e`IJ(7$=u>9fbbB%cgsKBES%PG;DYSeir#+pqTV)58_9Dor="_Gl1ZMFs3SlB-+29P#=R&/UnigQpE9O7e0#>oF9bMdR)eB:if&]aOp5%%*S6$_?+7%0%6EB][S)RAC`]=/9Lo,:f\eYF=0.eZiZ2PjbUuB2$A>(Xc\+O",`K2.3oBC0YS5Qk5S@$i)$XoG!cQOM[d3ln\(nJnXI)EibEV6HI%,H\HH<NNp#3GJ]VD\3B`_-!HlFRnQ]/fRrV226@#^a-<'Xuu)AV@oYG>2id;.'H/*rj?La\eT.+[aLm_2(+)1V@61G$nQ<\FYZ>o%`k*hMmV$>)qmh3^V_qVp_k_?,5r9ZO/ETq&Q4e2.jghm5<G_/+X$/Kr7ge<lQ(BA@2%I1,$T-7r`LGWlc!oEY.$!bq20jA%@C^X-%DR7uRBR&'pes<FVW^0g"fUUWA8;&\n^"\t'0D=huSp4FVX8<)`#To@P$/pJ8#nK2cS.QUHId4%dRStn\FoEI1qI4Xq5W2@aiqE2N%frorAFN,\LRD2f`M?>'Ejm3qjE.FQb_Q_+NkHDGqF$h,6Mbis2--OI/a/=:<$7b#&H9S_c;@6Y2omsB%",k8jL@Eb^?#D2N[rA_+%-"N65Gh!D)X83.DJJ)O2d9bD+IgZB3[\`h9!;84!n&:k@`$/<jgOA62ULPkk??=k:A@+rd5<diN<e=GB+XbcfgOTa#Jf`1+*cI$h%7JO[e9N+-<H:8IQb_/;d]m?rg<MMk=A3F]O0g0A8W9S)dG9,Y+We!5`qnJJsD`M3<ETNFt1"esFi/MS&I2X0nM)-&&%fI#,s7_nG%)n/1l,I9/>bng,]9Zp@TG')N#f8aPO[;P^!>nI_<S.;*maO4=_YljtH$L*M*--foW!<rA`<JZ<R3FtKl`A&6sbh=)f\oG-H!%P&L%^43X?[[Q*JR1jACRPRfKe$O)Kc='!]m^%&E/%L"mZs5HU)F9l0&41Jb%^p\,S#fg&o;Snr)3h,q0B+'pV&J1B/nejF*M"A%Csd"S%/,'Bqp(Pq-g-<H>pQ,'e/OqdNB=%KK;4DYo@_*[:;VNu)*@_[%9j*SkJP7ZX2H3#T.=!:`/O2nJa\bk"8;[<pq-iIHloM+!k$GBR%1jRMG-s]rf<OABQ.TR-WM<'9D=[(V$=&PklNR%(iT"2`j92*!DN[$cd.&LXL[jei+hlWLbJB#'0LCS%ehHR*K!$d34]%+qAQ;u]f%HJ94;[Y0,TBJ[4X][aF-M<.>PkCSkQ-(:8XbI[<X9-?6jbtd"6T'U/C"u+T4(AtQ-CA-]onY>BVmR6W&./H9\aV%9c=l;8pR"YXn%\jT+DGTd48k.Wq`'>ZF;plBZKFr_'r7GO)[Q;p\^aXoit]?9T-fA<iJg<"#(m[Ng^9"7_9G'LSG2B+F6%#B;eU=m2!=%"a]dDe[q%EM01rT\6j,[PNOmY6/^FWn6B%"&1rK7uAR4\6.OF6jETIMRpoQgSBL@9aO@rX;aZkbn]HD2ctBrP]H7u96s;Sn!Y2YeS9KC-]ZN<%D>C<ci+)E["UD"dSh&'d<XU(f9V;'Q=aO58lO/KL#%(]lrt63k-)sr.@?%(FDe"\(d*Z%`1[#Elj@!LG*t4_MkHhe<LYHtFJV4sb%NjSNA^USY.YK`kcSg:Yl/7sL)qL<Onf<J&Akf@h2X)M6W5O\10m1kHt$qQ3`CFmO@[B!anB%Qqg$&V6f$^W=nWOI"EF,H?]g_ag+%Vt%5YothlA@fPfgd#L/7FIV/!--P)n0cTKVl/YHDqY`a<mI4dbg_eWik8Os#-HcE]VLatU%0f&n,H5hPgcb8nO^iT2636iIje>/N%Ou;M)/l%tYpMFM=+Jp-o)X@3.Td$@!r@Rl?Js?6M2']YTBlW-'d:Una*$4K]9ibPiM0GYL88(67Xgl0DV#Xu6?s&S32tjm=b,kXZ%faQ2fL&r9!Zt-3B:b#<VJ>kBf^!IctRK=.f2,qGQNK>]7QW"&:HCep7+S>01.XG'A.[A[GOL5ZB*q"kh@s5V@ddo1M=(P@SiqaY[%jku""/kIe<0f'.Y@9j#mZdk=U5h=m:;*J]6.<,U&I2Ib4^2+sW10tl:M/\QeURnH[7F3WuG/Y.(EGM:6pIJ4pj]PWT(hKl66'P(;%ph3GbkcaM+,ceK#24_o]6%ICR)9q\M4%`YSC;:f_8#n#b:NQXEO+OEsHl*6:TSil&erYSqJjh=f0GT0BB5(=+P!p=&WN;sggH0/h%\luD(J.pA,=U.@>+O-<E\u1C*i5=#,WS*jcmQRq,G+#gS;L-I>FaWZ1E+&-L^I6RnabM':M53D7:Vp:bMCon66IilWi4UWP+\`("%4`lS@83:IbWu4?C-bXh-4CSn&m>scZ"?p<3:WcQe2[P$]pig2HLJCuCm)b[*+kBW`10Ha`k>WHPb*D<3d!JD8nWDoX_pZ:VMibL8%;W$J#lZT4.Yn1g>!`pp5Sb.>E$#'2g!ee7H$`=@9Q'GW[4sf9CH6X(5T3ZT<SD`JHL0^:IQdc9eGPr^CaJP76Q".!j[Vgj=ndSfD%^2cak'Ac;1[Y1_[(<!#\psRdb9&)k(Dfd$%H+T;>((gDUg_7kc9I*$"mW>pX)f^[3QadgMRWaOe/0tl_$Q3^5^"-JjqKak5rWNYt%0=o)KY.%]JS^D,a#Mo'*Gabpta;-A>c;JtDl?_&efBr*D?`\C0U)fs!0'KrtpRh?R\+r&W,G7o-nXf2,hNq0kO3`<*qXK(6malsa%c0+Q0s7rd*2+Lr]fT6('S$0U*043W!a+([Kk0os8roDE*F1d4Arl'*=^\aX4QFfkD5QC/$IIje;r;$&mg[G0mYQ+FQDglm-lCHXO%rq&-6fBZ_6+lMOoCX99`:uM=4[,7K7[(h%Kd/N_LFD-1$e=lj<X`L-7IB7Ln:KZf&^0po/XaEoC[\jfoMj(FegDl\H_K3#U6gUOb%%+JNBUu/Wf+AeM4+>+&bNa5")Mm6KAdTh#0Mbgo*?*@qJ6R4MSl6?Tu_P(c^JHbj8QbQHsAdRo>NaH3i.`;)od`^c<HC*@gDM_=2%</i[.QuqQcokSW/]s5NS#00CbrVtN9:O5m,_,a/W*P-FIb+/>(;RD(h]7*(5/dk8>-_WP]hl>-\OJAjnXY&e#FfL_BIGK&55]P-c%G4dr):Xe[oJGu0l<?e@T.XG98Sg..4e!FZs7>$!>j,["1Zt:g3#!?G`ZA"5]eD[^#+4h7g/.W_H%\:.JHZKlXeEH0CjJhU*F_2T&%Rtn.P2PQ4;r(b3Xdt:"10+3f>PDifa[uRVLm3skj-Hc^7U5tB0Zuuhkk"4-AgD[LHQH[5j/bjt;$l]u+eOjn)jg$Fh_!fuu=o8I6%JN>^;A@d_jjVZ3<=1Vo+]"-2*T7/Fmo@t'.c`X@9`GX^AIZJ2(8b?0:29^7^s4Aesm&"r;*P-F_4Y/DHC>?.jF'T,*$P9%"0$_?J%1$k?L^.&:?Xukgh(/!rYFER?iH\R8\Zc&)ihhKFI,3`t<Xs7DAZ9]5]2=o&@(8-DbhQok`6p&om9[nONd-,NUmK0*B+'[i`c#)A+%Tkg!S)NVKs*"0Qj*TF*X[RH5_Xgr6Xm<1q0kDmgE6ab2d-kr=T[UWaf&,EgGFm`HO$08?6[lS'lZ>K9`Y-_gk.j;<]FmJSFT""b4%WB&)SZ'CM:*((&B2&^L<J./$6k,_d8@&$5)h'0,(9@d7TVSruY_KKbK9n`9^"*,1#j1X)>/ohsFq?-paKrgjiF1I&.\eopE[\l!O%ZnONY*3sb@+>WE^E%L<X6]NI0T'/LSmRh$C*>CM[!iR2uI>SJ3Aft^"OL8Rc?e*-a=O9-PJ\3OW3$0o%/rn;OC[JY5c_@,R+!9rc%mA:kmaVt-i[UT\n3q@4uc8#_53P2d>o6^hgO(G]Ad1\t:k8;g6>-a-X,=03#!)1]&$1U*C?Kg4aZt7oWU)c"8/oGBIM![3_3mT2W%q;]peX4]I%X`99M[:@BQ9F*/\<`u.e(un=Jknk#+)4/UU!4oI@O6c">=.d[AUrXbdNB4M>Tn\`$%:G*#8[-DXl/Hn"RX!-O0]BWa%?C#_kjIauGO12a5r#V'2)kk[B;5SSVnC*+MH!4^]Y%2Sd[W<QcC"J.+a'H3c9?=B>+\(o82*'>DYD4*gk:.WF7teqKYSqj)[dO[T%eaImF&_[uj/A3oY13E.>itS[,XhF/VR6Ou;5<diN)JtCA_hYIe*^c(L/e82g\WIsF&oq.%T:CSsZ@QlLjll'OXo8jQ3la5K"a=Ce%C_ZHnjmNU]4)dM1YA8&\QWdTacgT8f]A0!i8l=`8a`;dC-dIO1d^fh@4X6gk+O6jA[iHB-p2D]F&"U7ITLla4SJ/;%SqgWX(.[j)%<P*)0S9O?^/&]kY]$eX*Nmu/(#SfLX:%5o'CX5^tnbjBUeGEm*ips_R2\ruJ0=G^Z1ubf;=D&G4b>O]!l(g0!n:r:#ld=Clbd/ll%en)*J@$e:-qcM;jIHOg-aIV^kU6'VC-OLI!ISBtHG,7>P/P_M4`ZLi?M&X,>8FOuMG&_QZljE9Io-#7.[PTJ[mkSt;Z83`&^8\Y[%B\1rJ_)g?(Gs/4^;ieZ\g3:9.aRH?nkL)WjG7f8W!?5<Yc^rG&mSMr)&,*rZo#17dOL8$S\?=#K%[Y."l`M@CY?p@7esW.*oG44V%>B,h,j/fIWD\ohQ+m0f"o\J+jc64>&iKM+?8Mrp.g_3<"0"'ld2+@?GEr>IlT!fD6W9bm3]1cmKG($kOdIT[kNb8oGi?:&0H3H?R%Q_V`5V-94eiu3)Mat@MN'B?`_OMBhW.EQda66;I'cJh2\:E=>=O=n!)c7R8H*e/FGVf+X,@Cm?FRLYH>CHP4k/gP(nOlpnRS$QI8%mEhZ8bLf#nHaa<dc67#e6X(@e(;/haDTluT1m%&c%]R-'Bo6@L?#7i(+(G+J5E-3J`(;PIOLBnRSZ.uEq@JK>'BAWH132O9(@pW"%RsV\:(9&NMB.Bdg8!g?aJ@;,-jC:qD1TF++4fS15@0q_CXd(>$FGT0aH(=UFP'aAp!P([d2a6(3gWdFoOLP,^hOc\-T&,r[+Z[9,%Y(p=m@`u#_F\0/GLhI?1lh64[I993l5qjRX9Al6(WUS>Inijg$H`"Db8hO[G!F9`lI@%12hAMsRM&VLp"7PMu2Gd\1O%,Y!(Ptmm%8']s"B>pQ&LXXQ(ehu^YqpoF-FR,GOXf:(*mDgZ^CZ*lje[&#BbulWi2a^<c-8&MWNT?ZMVZpCmjc>Jsb['YBIQE>?3PR5H*BJ36%mo*b``8nO!ma3XHQRS_\Th>'Q@dE8T0st#j=_QRcN"a2t!A@*FB9bU"J=>;+Tr$r1_)\kQmN"Nl@IY;JHa9QWf\E/d]==D<jP6sN%M=]kNh@:\hXqI:i%^A#G%8!<FdbW>!d5ha(XHd)FcA+YFFTFT@ipbGdnoi6MGM]1gmYtnc6ZCA"VheY&ard8DM9Qf(Wa4EJe&t]#%OZ5Lrma-[KlM8Hn*--+tnR],$'i@$@3-t<O>\>3'&bD*no;Oe`4A,g/pX%$gN\$m,%l$5fY,NFnHi*Dj6A?n<I(C\cc^?B_+`9O;%M3*'?p+-U^8[p9^PjL"Ap\5,)Zr\u!/3%*^"hG]mTbTb:9C+_.C3D/o=l4*iN.@#/F*6CI>s-GAh%K#bfR&W\6Gjc!C-<#qS'^Hl%^f6!PCAtJ@T'4OZ'S'KHcIU.#nW8VAK:,JLE]-r@Gn/(ZgL%^[d&"';Ar>m-F[n+VE`QtR^"R;S_/lH,X+s^s\(>r0Vg#ADKbbVj%]5ATaF;O)#O8$ReEo\KgNB>18*6j4A>Sa?tm##iWls&^@oFa666<:]VSPgps._C.8QKgt'2&i6K80<p-?<<$&JCN2:g?6S>e8qeN%*7ncrgihqSOih9\[\pN9$/EfLE[ToY]eICa#W4`*Kq;Pl)%P+Ce[]KHgPW..V[*df[]Wu("`hqlEOX_@p9bLLldtL;l=,$Am&<&l%ogfg`3HAaJ-D4fO=@i&(7sj5ZDk"[amh0iih&1?6BZ3ork25jm.(Z3(4/pO$<"4*ddWG+j%bu_bSPh]I'Fp6e_8ajAUP-+':[In[%Q9S,W];2$LV`a!FG0b,uTq-ops7+d6f$/6JMaQMW8WZRPFfdVY.1S[M:G,:=RJN-4*!oLLY,$6SFAH.??+nO>d]@X@gjKf1mEi\U%=j-#b67^BX:Htm-Z&rc?WUG&e4[Y\'Lg?K752@<X`r5AE@/ok_n"#?CAN)H"bakVn)IbMuJHH4o#"(CBc07Mf8i:]Pc5YE5a<a@j%q,45Yd+loF<B@H*0)7j1<C95[JJPguM&)+\k1=t"9%D\H]*JWUfgn-WH#!CYZi*8fe1u6<hqb&U^3JFO?iKfCs*XX]1Z$N/8)*l!%5Mt"oIs3^H`J6kE5IUL);9O<%'$2WNnn_(04SP/N\$2E,T$79rUdrn?prS`(2nc(DibWtjbCVG1eF_rMnL=1/Qc61hBR<c@d$$uS%j('EN\[T7r?KGksn_$*54R^$sdi[&_gQsQXqT5@rTDe#XIfB'65C`;'(LOiQkXY[?lX,,4fAD)V\)2Z+rQ?korp,(3k0qqsqNW]1%c2YKUbGS]rs39I$qRc42\P6MirBFG&?g/[4d?";!0E1>"rrY[*%u^~>%AI9_PrivateDataEnd